import tools.vitruv.dsls.^reactions.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor
import static tools.vitruv.dsls.^reactions.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.*;
import org.eclipse.emf.ecore.change.FeatureChange
import tools.vitruv.change.atomic.^root.RootEChange
import tools.vitruv.change.atomic.eobject.EObjectExistenceEChange
import static extension tools.vitruv.change.testutils.metamodels.TestMetamodelsPathFactory.allElementTypes

import "http://tools.vitruv.change.testutils.metamodels.allElementTypes" as minimal

reactions: simpleChangesTests
in reaction to changes in minimal
execute actions in minimal

/*
 * Inserts the model for comparing the further test model with.
 */
reaction InsertRootTest {
	after element minimal::Root inserted as root
	call createRoot(newValue)
}

routine createRoot(minimal::Root rootElement) {
	match {
		require absence of minimal::Root corresponding to rootElement
	}
	create {
		val newRoot = new minimal::Root
	}
	update {
		newRoot.id = rootElement.id
		val targetModel = rootElement.eResource.URI.trimFileExtension.lastSegment.replace('Source', 'Target').
			allElementTypes
		persistProjectRelative(rootElement, newRoot, targetModel.toString)
		addCorrespondenceBetween(newRoot, rootElement)
	}
}

reaction RemoveRootTest {
	after element minimal::Root removed as root
	call deleteRoot(oldValue)
}

routine deleteRoot(minimal::Root rootElement) {
	match {
		val oldModel = retrieve minimal::Root corresponding to rootElement
	}
	update {
		removeObject(oldModel)
		removeCorrespondenceBetween(rootElement, oldModel)
	}
}

/*
 * UpdateSingleValuedEAttribute
 */
reaction ReplacedSingleValuedPrimitiveTypeEAttribute {
	after attribute replaced at minimal::Root[singleValuedPrimitiveTypeEAttribute]
	call replaceSingleValuedPrimitiveTypeEAttribute(affectedEObject, newValue)
}

routine replaceSingleValuedPrimitiveTypeEAttribute(minimal::Root rootElement, Integer value) {
	match {
		val targetElement = retrieve asserted minimal::Root corresponding to rootElement
	}
	update {
		targetElement.singleValuedPrimitiveTypeEAttribute = value;
		SimpleChangesTestsExecutionMonitor.instance.set(UpdateSingleValuedPrimitveTypeEAttribute);
	}
}

/*
 * UpdateSingleValuedEAttribute
 */
reaction ReplacedSingleValuedEAttribute {
	after attribute replaced at minimal::Root[singleValuedEAttribute]
	call replaceSingleValuedEAttribute(affectedEObject, newValue)
}

routine replaceSingleValuedEAttribute(minimal::Root rootElement, Integer value) {
	match {
		// The check statements do only test that multiple check statements work
		check asserted {
			rootElement !== null
		}
		val targetElement = retrieve asserted minimal::Root corresponding to rootElement
		check {
			value !== null
		}
	}
	update {
		targetElement.singleValuedEAttribute = value;
		SimpleChangesTestsExecutionMonitor.instance.set(UpdateSingleValuedEAttribute);
	}
}

/*
 * UpdateSingleValuedEAttribute
 */
reaction ReplacedIdentifiedId {
	after attribute replaced at minimal::Identified[id]
	call replaceIdentifiedId(affectedEObject, newValue)
}

routine replaceIdentifiedId(minimal::Identified identified, String value) {
	match {
		val targetElement = retrieve asserted minimal::Identified corresponding to identified
	}
	update {
		targetElement.id = value;
	}
}

/*
 * InsertNonRootEObjectInList
 */
reaction InsertedNonRootEObjectInList {
	after element minimal::NonRoot inserted in minimal::Root[multiValuedContainmentEReference]
	call insertNonRoot(affectedEObject, newValue)
}

routine insertNonRoot(minimal::Root rootElement, minimal::NonRoot insertedNonRoot) {
	match {
		val targetElement = retrieve asserted minimal::Root corresponding to rootElement
		require absence of minimal::NonRoot corresponding to insertedNonRoot
	}
	create {
		val newNonRoot = new minimal::NonRoot
	}
	update {
		newNonRoot.id = insertedNonRoot.id
		targetElement.multiValuedContainmentEReference += newNonRoot;
		addCorrespondenceBetween(newNonRoot, insertedNonRoot)
		SimpleChangesTestsExecutionMonitor.instance.set(CreateNonRootEObjectInList);
	}
}

/*
 * RemoveNonRootEObjectInList
 */
reaction RemovedNonRootEObjectInList {
	after element minimal::NonRoot removed from minimal::Root[multiValuedContainmentEReference]
	call removeNonRoot(oldValue)
}

routine removeNonRoot(minimal::NonRoot removedNonRoot) {
	match {
		val targetElement = retrieve minimal::NonRoot corresponding to removedNonRoot
	}
	update {
		SimpleChangesTestsExecutionMonitor.instance.set(DeleteNonRootEObjectInList);
		removeObject(targetElement)
		removeCorrespondenceBetween(targetElement, removedNonRoot)
	}
}

/*
 * ReplaceNonRootEObjectSingle
 */
reaction ReplacedNonRootEObjectSingleReupdate {
	after element minimal::NonRoot replaced at minimal::Root[singleValuedContainmentEReference]
	call {
		if (oldValue !== null) {
			deleteNonRootEObjectSingle(affectedEObject, oldValue);
		}
		if (newValue !== null) {
			createNonRootEObjectSingle(affectedEObject, newValue);
		}
	}
}

routine deleteNonRootEObjectSingle(minimal::Root container, minimal::NonRoot containedObject) {
	match {
		val correspondingContainer = retrieve asserted minimal::Root corresponding to container
		val targetElement = retrieve minimal::NonRoot corresponding to containedObject with eContainer ===
			correspondingContainer
	}
	update {
		removeObject(targetElement)
		removeCorrespondenceBetween(containedObject, targetElement)
		SimpleChangesTestsExecutionMonitor.instance.set(DeleteNonRootEObjectSingle);
	}
}

routine createNonRootEObjectSingle(minimal::Root sourceRoot, minimal::NonRoot containedObject) {
	match {
		val targetElement = retrieve asserted minimal::Root corresponding to sourceRoot
		require absence of minimal::NonRoot corresponding to containedObject
	}
	create {
		val newNonRoot = new minimal::NonRoot
	}
	update {
		newNonRoot.id = containedObject.id
		targetElement.singleValuedContainmentEReference = newNonRoot;
		addCorrespondenceBetween(newNonRoot, containedObject)
		SimpleChangesTestsExecutionMonitor.instance.set(CreateNonRootEObjectSingle);
	}
}

/*
 * UpdateSingleValuedNonContainmentEReference
 */
reaction ReplacedSingleValuedNonContainmentEReference {
	after element minimal::NonRoot replaced at minimal::Root[singleValuedNonContainmentEReference]
	call replaceSingleValuedNonContainmentReference(affectedEObject, newValue)
}

routine replaceSingleValuedNonContainmentReference(minimal::Root rootElement, minimal::NonRoot newReferencedElement) {
	match {
		val targetContainer = retrieve asserted minimal::Root corresponding to rootElement
		val targetElement = retrieve asserted minimal::NonRoot corresponding to newReferencedElement
	}
	update {
		targetContainer.singleValuedNonContainmentEReference = targetElement;
		SimpleChangesTestsExecutionMonitor.instance.set(UpdateSingleValuedNonContainmentEReference);
	}
}

/*
 * InsertEAttributeValue
 */
reaction InsertedEAttributeValue {
	after attribute inserted in minimal::Root[multiValuedEAttribute]
	call insertEAttribute(affectedEObject, newValue)
}

routine insertEAttribute(minimal::Root rootElement, Integer attributeValue) {
	match {
		val targetElement = retrieve asserted minimal::Root corresponding to rootElement
	}
	update {
		targetElement.multiValuedEAttribute += attributeValue;
		SimpleChangesTestsExecutionMonitor.instance.set(InsertEAttributeValue);
	}
}

/*
 * RemoveEAttributeValue
 */
reaction RemovedEAttributeValue {
	after attribute removed from minimal::Root[multiValuedEAttribute]
	call removeEAttribute(affectedEObject, oldValue)
}

routine removeEAttribute(minimal::Root rootElement, Integer removedAttributeValue) {
	match {
		val targetElement = retrieve asserted minimal::Root corresponding to rootElement
	}
	update {
		val sourceValueList = rootElement.multiValuedEAttribute;
		targetElement.multiValuedEAttribute.removeIf[!sourceValueList.contains(it.intValue)];
		SimpleChangesTestsExecutionMonitor.instance.set(RemoveEAttributeValue);
	}
}

/*
 * InsertNonContainmentEReference
 */
reaction InsertedNonContainmentEReference {
	after element minimal::NonRoot inserted in minimal::Root[multiValuedNonContainmentEReference]
	call insertNonContainmentReference(affectedEObject, newValue)
}

routine insertNonContainmentReference(minimal::Root rootElement, minimal::NonRoot insertedNonRoot) {
	match {
		val targetElement = retrieve asserted minimal::Root corresponding to rootElement
	}
	update {
		val addedNonRoot = targetElement.nonRootObjectContainerHelper.nonRootObjectsContainment.findFirst [
			it.id == insertedNonRoot.id
		];
		targetElement.multiValuedNonContainmentEReference += addedNonRoot;
		SimpleChangesTestsExecutionMonitor.instance.set(InsertNonContainmentEReference);
	}
}

/*
 * RemoveNonContainmentEReference
 */
reaction RemovedNonContainmentEReference {
	after element minimal::NonRoot removed from minimal::Root[multiValuedNonContainmentEReference]
	call removeNonContainmentReference(affectedEObject, oldValue)
}

routine removeNonContainmentReference(minimal::Root rootElement, minimal::NonRoot removedNonRoot) {
	match {
		val targetRoot = retrieve asserted minimal::Root corresponding to rootElement
	}
	update {
		targetRoot.multiValuedNonContainmentEReference.removeIf[it.id == removedNonRoot.id];
		SimpleChangesTestsExecutionMonitor.instance.set(RemoveNonContainmentEReference);
	}
}

/**
 * Initializes the nonRootObjectContainer for second model
 */
reaction HelperReactionForNonRootObjectContainerInitialization {
	after element minimal::NonRootObjectContainerHelper replaced at minimal::Root[nonRootObjectContainerHelper]
	with newValue !== null
	call createNonRootObjectContainer(affectedEObject, newValue)
}

routine createNonRootObjectContainer(minimal::Root rootElement, minimal::NonRootObjectContainerHelper nonRootObjectContainer) {
	match {
		val targetElement = retrieve asserted minimal::Root corresponding to rootElement
		require absence of minimal::NonRootObjectContainerHelper corresponding to nonRootObjectContainer
	}
	create {
		val newNonRootContainer = new minimal::NonRootObjectContainerHelper
	}
	update {
		newNonRootContainer.id = nonRootObjectContainer.id;
		targetElement.nonRootObjectContainerHelper = newNonRootContainer;
		addCorrespondenceBetween(newNonRootContainer, nonRootObjectContainer)
	}
}

/**
 * Initializes the nonRootObjectContainer for second model
 */
reaction AddNonRootObjectToHelperContainer {
	after element minimal::NonRoot inserted in minimal::NonRootObjectContainerHelper[nonRootObjectsContainment]
	call createNonRootInContainer(affectedEObject, newValue)
}

routine createNonRootInContainer(minimal::NonRootObjectContainerHelper container, minimal::NonRoot insertedNonRoot) {
	match {
		val nonRootContainer = retrieve asserted minimal::NonRootObjectContainerHelper corresponding to container
		require absence of minimal::NonRoot corresponding to insertedNonRoot
	}
	create {
		val newNonRoot = new minimal::NonRoot
	}
	update {
		newNonRoot.id = insertedNonRoot.id;
		nonRootContainer.nonRootObjectsContainment += newNonRoot;
		addCorrespondenceBetween(newNonRoot, insertedNonRoot)
	}
}

reaction RemovedNonRootObjectFromHelperContainer {
	after element minimal::NonRoot removed from minimal::NonRootObjectContainerHelper[nonRootObjectsContainment]
	call deleteNonRootFromContainer(oldValue)
}

routine deleteNonRootFromContainer(minimal::NonRoot removedNonRoot) {
	match {
		val correspondingNonRoot = retrieve minimal::NonRoot corresponding to removedNonRoot
	}
	update {
		removeObject(correspondingNonRoot)
		removeCorrespondenceBetween(removedNonRoot, correspondingNonRoot)
	}
}

reaction NonRootCreated {
	after element minimal::NonRoot created
	call SimpleChangesTestsExecutionMonitor.instance.set(CreateEObject)
}

reaction NonRootDeleted {
	after element minimal::NonRoot deleted
	call SimpleChangesTestsExecutionMonitor.instance.set(DeleteEObject)
}

// Unused routine: Only to test if primitive types are mapped and scoped correctly
routine testPrimitiveTypesRoutine(Integer intVal, Long longVal, Short shortVal, Byte byteVal, Character charVal, Double doubleVal, Float floatVal, Boolean boolVal, String stringVal) {
	update {
		// Call methods of types to ensure that they are correctly mapped
		// otherwise static code checks will fail
		intVal.intValue;
		longVal.longValue;
		shortVal.shortValue;
		byteVal.byteValue;
		charVal.charValue;
		doubleVal.doubleValue;
		floatVal.floatValue;
		boolVal.booleanValue;
		stringVal.charAt(0);
		testPrimitiveTypesRoutine(intVal, longVal, shortVal, byteVal, charVal, doubleVal, floatVal, boolVal, stringVal)
	}
}

// Unused reaction: Only check, that change is available when reacting to any change
reaction AnyChange {
	after anychange
	with change instanceof FeatureChange || change instanceof RootEChange ||
		change instanceof EObjectExistenceEChange<?>
	call {
		change.eClass
	}
}

routine testJavaTypes(plain SimpleChangesTestsExecutionMonitor as monitor) {
}

reaction CheckManyCorrespondenceRetrievalWorks {
	after attribute replaced at minimal::Root[singleValuedEAttribute]
	with !replaceChange.wasUnset
	call checkManyCorrespondenceRetrievalWorks(affectedEObject)
}

routine checkManyCorrespondenceRetrievalWorks(minimal::Root rootElement) {
	match {
		val targetElements = retrieve many minimal::Root corresponding to rootElement
		check asserted {
			return targetElements !== null && !targetElements.empty
		}
	}
	update {
	}
}

