/**
 * generated by Xtext 2.9.0
 */
package tools.vitruv.dsls.reactions.ui.outline;

import java.util.function.Consumer;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;
import tools.vitruv.dsls.common.elements.MetamodelImport;
import tools.vitruv.dsls.reactions.language.ArbitraryModelChange;
import tools.vitruv.dsls.reactions.language.ModelAttributeChange;
import tools.vitruv.dsls.reactions.language.ModelElementChange;
import tools.vitruv.dsls.reactions.language.toplevelelements.CreateBlock;
import tools.vitruv.dsls.reactions.language.toplevelelements.MatchBlock;
import tools.vitruv.dsls.reactions.language.toplevelelements.Reaction;
import tools.vitruv.dsls.reactions.language.toplevelelements.ReactionsFile;
import tools.vitruv.dsls.reactions.language.toplevelelements.ReactionsImport;
import tools.vitruv.dsls.reactions.language.toplevelelements.ReactionsSegment;
import tools.vitruv.dsls.reactions.language.toplevelelements.Routine;
import tools.vitruv.dsls.reactions.language.toplevelelements.RoutineCall;
import tools.vitruv.dsls.reactions.language.toplevelelements.RoutineInput;
import tools.vitruv.dsls.reactions.language.toplevelelements.TopLevelElementsPackage;
import tools.vitruv.dsls.reactions.language.toplevelelements.Trigger;
import tools.vitruv.dsls.reactions.language.toplevelelements.UpdateBlock;
import tools.vitruv.dsls.reactions.util.ReactionsLanguageUtil;

/**
 * Outline structure definition for a reactions file.
 * 
 * @author Heiko Klare
 */
@SuppressWarnings("all")
public class ReactionsLanguageOutlineTreeProvider extends DefaultOutlineTreeProvider {
  protected void _createChildren(final DocumentRootNode root, final ReactionsFile reactionsFile) {
    this.createEStructuralFeatureNode(root, reactionsFile, 
      TopLevelElementsPackage.Literals.REACTIONS_FILE__METAMODEL_IMPORTS, this.imageDispatcher.invoke(reactionsFile), 
      "imports", false);
    final Consumer<ReactionsSegment> _function = (ReactionsSegment it) -> {
      this.createChildren(root, it);
    };
    reactionsFile.getReactionsSegments().forEach(_function);
  }

  protected void _createChildren(final DocumentRootNode parentNode, final ReactionsSegment reactionsSegment) {
    final EObjectNode segmentNode = this.createEObjectNode(parentNode, reactionsSegment);
    this.createEStructuralFeatureNode(segmentNode, reactionsSegment, 
      TopLevelElementsPackage.Literals.REACTIONS_SEGMENT__REACTIONS_IMPORTS, 
      this.imageDispatcher.invoke(reactionsSegment), "imported segments", false);
    this.createEStructuralFeatureNode(segmentNode, reactionsSegment, 
      TopLevelElementsPackage.Literals.REACTIONS_SEGMENT__REACTIONS, this.imageDispatcher.invoke(reactionsSegment), 
      "reactions", false);
    this.createEStructuralFeatureNode(segmentNode, reactionsSegment, 
      TopLevelElementsPackage.Literals.REACTIONS_SEGMENT__ROUTINES, this.imageDispatcher.invoke(reactionsSegment), 
      "routines", false);
  }

  protected Object _text(final MetamodelImport mmImport) {
    String _name = null;
    if (mmImport!=null) {
      _name=mmImport.getName();
    }
    String _plus = (_name + ": ");
    EPackage _package = null;
    if (mmImport!=null) {
      _package=mmImport.getPackage();
    }
    String _nsURI = _package.getNsURI();
    return (_plus + _nsURI);
  }

  protected Object _text(final ReactionsImport reactionsImport) {
    ReactionsSegment _importedReactionsSegment = reactionsImport.getImportedReactionsSegment();
    String _name = null;
    if (_importedReactionsSegment!=null) {
      _name=_importedReactionsSegment.getName();
    }
    return _name;
  }

  protected Object _text(final Reaction reaction) {
    String _displayName = ReactionsLanguageUtil.getDisplayName(reaction);
    return ("reaction: " + _displayName);
  }

  protected Object _text(final Routine routine) {
    String _displayName = ReactionsLanguageUtil.getDisplayName(routine);
    return ("routine: " + _displayName);
  }

  protected Object _text(final RoutineInput routineInput) {
    return "parameters";
  }

  protected Object _text(final MatchBlock matcher) {
    return "match";
  }

  protected Object _text(final CreateBlock creator) {
    return "create";
  }

  protected Object _text(final UpdateBlock update) {
    return "update";
  }

  protected Object _text(final ReactionsSegment reactionsSegment) {
    String _name = reactionsSegment.getName();
    return ("segment: " + _name);
  }

  protected Object _text(final Trigger trigger) {
    return "there is no outline for this trigger";
  }

  protected Object _text(final ModelElementChange event) {
    return "element change";
  }

  protected Object _text(final ModelAttributeChange event) {
    return "attribute change";
  }

  protected Object _text(final ArbitraryModelChange event) {
    return "any change";
  }

  protected boolean _isLeaf(final Trigger element) {
    return true;
  }

  protected boolean _isLeaf(final MatchBlock element) {
    return true;
  }

  protected boolean _isLeaf(final CreateBlock element) {
    return true;
  }

  protected boolean _isLeaf(final UpdateBlock element) {
    return true;
  }

  protected boolean _isLeaf(final RoutineCall element) {
    return true;
  }
}
