/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.reactions.language.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tools.vitruv.dsls.common.elements.MetaclassReference;

import tools.vitruv.dsls.reactions.language.ElementChangeType;
import tools.vitruv.dsls.reactions.language.LanguagePackage;
import tools.vitruv.dsls.reactions.language.ModelElementChange;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model Element Change</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.reactions.language.impl.ModelElementChangeImpl#getElementType <em>Element Type</em>}</li>
 *   <li>{@link tools.vitruv.dsls.reactions.language.impl.ModelElementChangeImpl#getChangeType <em>Change Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelElementChangeImpl extends ConcreteModelChangeImpl implements ModelElementChange
{
  /**
   * The cached value of the '{@link #getElementType() <em>Element Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementType()
   * @generated
   * @ordered
   */
  protected MetaclassReference elementType;

  /**
   * The cached value of the '{@link #getChangeType() <em>Change Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChangeType()
   * @generated
   * @ordered
   */
  protected ElementChangeType changeType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelElementChangeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.MODEL_ELEMENT_CHANGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaclassReference getElementType()
  {
    return elementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElementType(MetaclassReference newElementType, NotificationChain msgs)
  {
    MetaclassReference oldElementType = elementType;
    elementType = newElementType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE, oldElementType, newElementType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElementType(MetaclassReference newElementType)
  {
    if (newElementType != elementType)
    {
      NotificationChain msgs = null;
      if (elementType != null)
        msgs = ((InternalEObject)elementType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE, null, msgs);
      if (newElementType != null)
        msgs = ((InternalEObject)newElementType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE, null, msgs);
      msgs = basicSetElementType(newElementType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE, newElementType, newElementType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementChangeType getChangeType()
  {
    return changeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChangeType(ElementChangeType newChangeType, NotificationChain msgs)
  {
    ElementChangeType oldChangeType = changeType;
    changeType = newChangeType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE, oldChangeType, newChangeType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChangeType(ElementChangeType newChangeType)
  {
    if (newChangeType != changeType)
    {
      NotificationChain msgs = null;
      if (changeType != null)
        msgs = ((InternalEObject)changeType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE, null, msgs);
      if (newChangeType != null)
        msgs = ((InternalEObject)newChangeType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE, null, msgs);
      msgs = basicSetChangeType(newChangeType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE, newChangeType, newChangeType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE:
        return basicSetElementType(null, msgs);
      case LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE:
        return basicSetChangeType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE:
        return getElementType();
      case LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE:
        return getChangeType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE:
        setElementType((MetaclassReference)newValue);
        return;
      case LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE:
        setChangeType((ElementChangeType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE:
        setElementType((MetaclassReference)null);
        return;
      case LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE:
        setChangeType((ElementChangeType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.MODEL_ELEMENT_CHANGE__ELEMENT_TYPE:
        return elementType != null;
      case LanguagePackage.MODEL_ELEMENT_CHANGE__CHANGE_TYPE:
        return changeType != null;
    }
    return super.eIsSet(featureID);
  }

} //ModelElementChangeImpl
