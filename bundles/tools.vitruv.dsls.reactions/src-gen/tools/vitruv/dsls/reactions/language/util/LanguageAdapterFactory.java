/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.reactions.language.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import tools.vitruv.dsls.reactions.language.*;

import tools.vitruv.dsls.reactions.language.toplevelelements.MatchStatement;
import tools.vitruv.dsls.reactions.language.toplevelelements.Trigger;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see tools.vitruv.dsls.reactions.language.LanguagePackage
 * @generated
 */
public class LanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LanguageSwitch<Adapter> modelSwitch =
    new LanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseConcreteModelChange(ConcreteModelChange object)
      {
        return createConcreteModelChangeAdapter();
      }
      @Override
      public Adapter caseModelElementChange(ModelElementChange object)
      {
        return createModelElementChangeAdapter();
      }
      @Override
      public Adapter caseModelAttributeChange(ModelAttributeChange object)
      {
        return createModelAttributeChangeAdapter();
      }
      @Override
      public Adapter caseArbitraryModelChange(ArbitraryModelChange object)
      {
        return createArbitraryModelChangeAdapter();
      }
      @Override
      public Adapter caseElementExistenceChangeType(ElementExistenceChangeType object)
      {
        return createElementExistenceChangeTypeAdapter();
      }
      @Override
      public Adapter caseModelElementUsageChangeType(ModelElementUsageChangeType object)
      {
        return createModelElementUsageChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementCreationChangeType(ElementCreationChangeType object)
      {
        return createElementCreationChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementDeletionChangeType(ElementDeletionChangeType object)
      {
        return createElementDeletionChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementReferenceChangeType(ElementReferenceChangeType object)
      {
        return createElementReferenceChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementRootChangeType(ElementRootChangeType object)
      {
        return createElementRootChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementInsertionChangeType(ElementInsertionChangeType object)
      {
        return createElementInsertionChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementInsertionInListChangeType(ElementInsertionInListChangeType object)
      {
        return createElementInsertionInListChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementInsertionAsRootChangeType(ElementInsertionAsRootChangeType object)
      {
        return createElementInsertionAsRootChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementRemovalChangeType(ElementRemovalChangeType object)
      {
        return createElementRemovalChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementRemovalAsRootChangeType(ElementRemovalAsRootChangeType object)
      {
        return createElementRemovalAsRootChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementRemovalFromListChangeType(ElementRemovalFromListChangeType object)
      {
        return createElementRemovalFromListChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementReplacementChangeType(ElementReplacementChangeType object)
      {
        return createElementReplacementChangeTypeAdapter();
      }
      @Override
      public Adapter caseElementChangeType(ElementChangeType object)
      {
        return createElementChangeTypeAdapter();
      }
      @Override
      public Adapter caseRetrieveOrRequireAbscenceOfModelElement(RetrieveOrRequireAbscenceOfModelElement object)
      {
        return createRetrieveOrRequireAbscenceOfModelElementAdapter();
      }
      @Override
      public Adapter caseRequireAbscenceOfModelElement(RequireAbscenceOfModelElement object)
      {
        return createRequireAbscenceOfModelElementAdapter();
      }
      @Override
      public Adapter caseRetrieveModelElement(RetrieveModelElement object)
      {
        return createRetrieveModelElementAdapter();
      }
      @Override
      public Adapter caseRetrieveModelElementType(RetrieveModelElementType object)
      {
        return createRetrieveModelElementTypeAdapter();
      }
      @Override
      public Adapter caseMatchCheckStatement(MatchCheckStatement object)
      {
        return createMatchCheckStatementAdapter();
      }
      @Override
      public Adapter caseModelAttributeInsertedChange(ModelAttributeInsertedChange object)
      {
        return createModelAttributeInsertedChangeAdapter();
      }
      @Override
      public Adapter caseModelAttributeRemovedChange(ModelAttributeRemovedChange object)
      {
        return createModelAttributeRemovedChangeAdapter();
      }
      @Override
      public Adapter caseModelAttributeReplacedChange(ModelAttributeReplacedChange object)
      {
        return createModelAttributeReplacedChangeAdapter();
      }
      @Override
      public Adapter caseRetrieveOneModelElement(RetrieveOneModelElement object)
      {
        return createRetrieveOneModelElementAdapter();
      }
      @Override
      public Adapter caseRetrieveManyModelElements(RetrieveManyModelElements object)
      {
        return createRetrieveManyModelElementsAdapter();
      }
      @Override
      public Adapter caseTrigger(Trigger object)
      {
        return createTriggerAdapter();
      }
      @Override
      public Adapter caseMatchStatement(MatchStatement object)
      {
        return createMatchStatementAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ConcreteModelChange <em>Concrete Model Change</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ConcreteModelChange
   * @generated
   */
  public Adapter createConcreteModelChangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ModelElementChange <em>Model Element Change</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ModelElementChange
   * @generated
   */
  public Adapter createModelElementChangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ModelAttributeChange <em>Model Attribute Change</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ModelAttributeChange
   * @generated
   */
  public Adapter createModelAttributeChangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ArbitraryModelChange <em>Arbitrary Model Change</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ArbitraryModelChange
   * @generated
   */
  public Adapter createArbitraryModelChangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementExistenceChangeType <em>Element Existence Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementExistenceChangeType
   * @generated
   */
  public Adapter createElementExistenceChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ModelElementUsageChangeType <em>Model Element Usage Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ModelElementUsageChangeType
   * @generated
   */
  public Adapter createModelElementUsageChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementCreationChangeType <em>Element Creation Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementCreationChangeType
   * @generated
   */
  public Adapter createElementCreationChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementDeletionChangeType <em>Element Deletion Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementDeletionChangeType
   * @generated
   */
  public Adapter createElementDeletionChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementReferenceChangeType <em>Element Reference Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementReferenceChangeType
   * @generated
   */
  public Adapter createElementReferenceChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementRootChangeType <em>Element Root Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementRootChangeType
   * @generated
   */
  public Adapter createElementRootChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementInsertionChangeType <em>Element Insertion Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementInsertionChangeType
   * @generated
   */
  public Adapter createElementInsertionChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementInsertionInListChangeType <em>Element Insertion In List Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementInsertionInListChangeType
   * @generated
   */
  public Adapter createElementInsertionInListChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementInsertionAsRootChangeType <em>Element Insertion As Root Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementInsertionAsRootChangeType
   * @generated
   */
  public Adapter createElementInsertionAsRootChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementRemovalChangeType <em>Element Removal Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementRemovalChangeType
   * @generated
   */
  public Adapter createElementRemovalChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementRemovalAsRootChangeType <em>Element Removal As Root Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementRemovalAsRootChangeType
   * @generated
   */
  public Adapter createElementRemovalAsRootChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementRemovalFromListChangeType <em>Element Removal From List Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementRemovalFromListChangeType
   * @generated
   */
  public Adapter createElementRemovalFromListChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementReplacementChangeType <em>Element Replacement Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementReplacementChangeType
   * @generated
   */
  public Adapter createElementReplacementChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ElementChangeType <em>Element Change Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ElementChangeType
   * @generated
   */
  public Adapter createElementChangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.RetrieveOrRequireAbscenceOfModelElement <em>Retrieve Or Require Abscence Of Model Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.RetrieveOrRequireAbscenceOfModelElement
   * @generated
   */
  public Adapter createRetrieveOrRequireAbscenceOfModelElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.RequireAbscenceOfModelElement <em>Require Abscence Of Model Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.RequireAbscenceOfModelElement
   * @generated
   */
  public Adapter createRequireAbscenceOfModelElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.RetrieveModelElement <em>Retrieve Model Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.RetrieveModelElement
   * @generated
   */
  public Adapter createRetrieveModelElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.RetrieveModelElementType <em>Retrieve Model Element Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.RetrieveModelElementType
   * @generated
   */
  public Adapter createRetrieveModelElementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.MatchCheckStatement <em>Match Check Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.MatchCheckStatement
   * @generated
   */
  public Adapter createMatchCheckStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ModelAttributeInsertedChange <em>Model Attribute Inserted Change</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ModelAttributeInsertedChange
   * @generated
   */
  public Adapter createModelAttributeInsertedChangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ModelAttributeRemovedChange <em>Model Attribute Removed Change</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ModelAttributeRemovedChange
   * @generated
   */
  public Adapter createModelAttributeRemovedChangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.ModelAttributeReplacedChange <em>Model Attribute Replaced Change</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.ModelAttributeReplacedChange
   * @generated
   */
  public Adapter createModelAttributeReplacedChangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.RetrieveOneModelElement <em>Retrieve One Model Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.RetrieveOneModelElement
   * @generated
   */
  public Adapter createRetrieveOneModelElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.RetrieveManyModelElements <em>Retrieve Many Model Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.RetrieveManyModelElements
   * @generated
   */
  public Adapter createRetrieveManyModelElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.toplevelelements.Trigger <em>Trigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.toplevelelements.Trigger
   * @generated
   */
  public Adapter createTriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.reactions.language.toplevelelements.MatchStatement <em>Match Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.reactions.language.toplevelelements.MatchStatement
   * @generated
   */
  public Adapter createMatchStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LanguageAdapterFactory
