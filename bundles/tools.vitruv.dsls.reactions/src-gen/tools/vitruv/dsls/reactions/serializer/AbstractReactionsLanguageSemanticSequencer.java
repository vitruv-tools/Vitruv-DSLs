/*
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.reactions.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;
import tools.vitruv.dsls.common.elements.ElementsPackage;
import tools.vitruv.dsls.common.elements.MetaclassEAttributeReference;
import tools.vitruv.dsls.common.elements.MetaclassEReferenceReference;
import tools.vitruv.dsls.common.elements.MetaclassReference;
import tools.vitruv.dsls.common.elements.MetamodelImport;
import tools.vitruv.dsls.common.elements.NamedMetaclassReference;
import tools.vitruv.dsls.reactions.language.ArbitraryModelChange;
import tools.vitruv.dsls.reactions.language.ElementCreationChangeType;
import tools.vitruv.dsls.reactions.language.ElementDeletionChangeType;
import tools.vitruv.dsls.reactions.language.ElementInsertionAsRootChangeType;
import tools.vitruv.dsls.reactions.language.ElementInsertionInListChangeType;
import tools.vitruv.dsls.reactions.language.ElementRemovalAsRootChangeType;
import tools.vitruv.dsls.reactions.language.ElementRemovalFromListChangeType;
import tools.vitruv.dsls.reactions.language.ElementReplacementChangeType;
import tools.vitruv.dsls.reactions.language.LanguagePackage;
import tools.vitruv.dsls.reactions.language.MatchCheckStatement;
import tools.vitruv.dsls.reactions.language.ModelAttributeInsertedChange;
import tools.vitruv.dsls.reactions.language.ModelAttributeRemovedChange;
import tools.vitruv.dsls.reactions.language.ModelAttributeReplacedChange;
import tools.vitruv.dsls.reactions.language.ModelElementChange;
import tools.vitruv.dsls.reactions.language.RequireAbscenceOfModelElement;
import tools.vitruv.dsls.reactions.language.RetrieveManyModelElements;
import tools.vitruv.dsls.reactions.language.RetrieveModelElement;
import tools.vitruv.dsls.reactions.language.RetrieveOneModelElement;
import tools.vitruv.dsls.reactions.language.toplevelelements.CreateBlock;
import tools.vitruv.dsls.reactions.language.toplevelelements.MatchBlock;
import tools.vitruv.dsls.reactions.language.toplevelelements.NamedJavaElementReference;
import tools.vitruv.dsls.reactions.language.toplevelelements.Reaction;
import tools.vitruv.dsls.reactions.language.toplevelelements.ReactionsFile;
import tools.vitruv.dsls.reactions.language.toplevelelements.ReactionsImport;
import tools.vitruv.dsls.reactions.language.toplevelelements.ReactionsSegment;
import tools.vitruv.dsls.reactions.language.toplevelelements.Routine;
import tools.vitruv.dsls.reactions.language.toplevelelements.RoutineCall;
import tools.vitruv.dsls.reactions.language.toplevelelements.RoutineInput;
import tools.vitruv.dsls.reactions.language.toplevelelements.RoutineOverrideImportPath;
import tools.vitruv.dsls.reactions.language.toplevelelements.TopLevelElementsPackage;
import tools.vitruv.dsls.reactions.language.toplevelelements.UpdateBlock;
import tools.vitruv.dsls.reactions.services.ReactionsLanguageGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractReactionsLanguageSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private ReactionsLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ElementsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ElementsPackage.METACLASS_EATTRIBUTE_REFERENCE:
				sequence_MetaclassEAttributeReference_MetaclassReference(context, (MetaclassEAttributeReference) semanticObject); 
				return; 
			case ElementsPackage.METACLASS_EREFERENCE_REFERENCE:
				sequence_MetaclassEReferenceReference_MetaclassReference(context, (MetaclassEReferenceReference) semanticObject); 
				return; 
			case ElementsPackage.METACLASS_REFERENCE:
				sequence_MetaclassReference(context, (MetaclassReference) semanticObject); 
				return; 
			case ElementsPackage.METAMODEL_IMPORT:
				sequence_MetamodelImport(context, (MetamodelImport) semanticObject); 
				return; 
			case ElementsPackage.NAMED_METACLASS_REFERENCE:
				if (rule == grammarAccess.getCreateStatementRule()) {
					sequence_CreateStatement_MetaclassReference(context, (NamedMetaclassReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedMetaclassReferenceRule()) {
					sequence_MetaclassReference_NamedMetaclassReference(context, (NamedMetaclassReference) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == LanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LanguagePackage.ARBITRARY_MODEL_CHANGE:
				sequence_ArbitraryModelChange(context, (ArbitraryModelChange) semanticObject); 
				return; 
			case LanguagePackage.ELEMENT_CREATION_CHANGE_TYPE:
				sequence_ElementCreationChangeType(context, (ElementCreationChangeType) semanticObject); 
				return; 
			case LanguagePackage.ELEMENT_DELETION_CHANGE_TYPE:
				sequence_ElementDeletionChangeType(context, (ElementDeletionChangeType) semanticObject); 
				return; 
			case LanguagePackage.ELEMENT_INSERTION_AS_ROOT_CHANGE_TYPE:
				sequence_ElementInsertionAsRootChangeType(context, (ElementInsertionAsRootChangeType) semanticObject); 
				return; 
			case LanguagePackage.ELEMENT_INSERTION_IN_LIST_CHANGE_TYPE:
				sequence_ElementReferenceChangeType(context, (ElementInsertionInListChangeType) semanticObject); 
				return; 
			case LanguagePackage.ELEMENT_REMOVAL_AS_ROOT_CHANGE_TYPE:
				sequence_ElementRemovalAsRootChangeType(context, (ElementRemovalAsRootChangeType) semanticObject); 
				return; 
			case LanguagePackage.ELEMENT_REMOVAL_FROM_LIST_CHANGE_TYPE:
				sequence_ElementReferenceChangeType(context, (ElementRemovalFromListChangeType) semanticObject); 
				return; 
			case LanguagePackage.ELEMENT_REPLACEMENT_CHANGE_TYPE:
				sequence_ElementReferenceChangeType(context, (ElementReplacementChangeType) semanticObject); 
				return; 
			case LanguagePackage.MATCH_CHECK_STATEMENT:
				sequence_MatchCheckStatement(context, (MatchCheckStatement) semanticObject); 
				return; 
			case LanguagePackage.MODEL_ATTRIBUTE_INSERTED_CHANGE:
				sequence_ModelAttributeChange(context, (ModelAttributeInsertedChange) semanticObject); 
				return; 
			case LanguagePackage.MODEL_ATTRIBUTE_REMOVED_CHANGE:
				sequence_ModelAttributeChange(context, (ModelAttributeRemovedChange) semanticObject); 
				return; 
			case LanguagePackage.MODEL_ATTRIBUTE_REPLACED_CHANGE:
				sequence_ModelAttributeChange(context, (ModelAttributeReplacedChange) semanticObject); 
				return; 
			case LanguagePackage.MODEL_ELEMENT_CHANGE:
				sequence_ModelElementChange(context, (ModelElementChange) semanticObject); 
				return; 
			case LanguagePackage.REQUIRE_ABSCENCE_OF_MODEL_ELEMENT:
				sequence_RequireAbscenceOfModelElement(context, (RequireAbscenceOfModelElement) semanticObject); 
				return; 
			case LanguagePackage.RETRIEVE_MANY_MODEL_ELEMENTS:
				sequence_RetrieveModelElementTypeStatement(context, (RetrieveManyModelElements) semanticObject); 
				return; 
			case LanguagePackage.RETRIEVE_MODEL_ELEMENT:
				sequence_RetrieveModelElement(context, (RetrieveModelElement) semanticObject); 
				return; 
			case LanguagePackage.RETRIEVE_ONE_MODEL_ELEMENT:
				sequence_RetrieveModelElementTypeStatement(context, (RetrieveOneModelElement) semanticObject); 
				return; 
			}
		else if (epackage == TopLevelElementsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TopLevelElementsPackage.CREATE_BLOCK:
				sequence_CreateBlock(context, (CreateBlock) semanticObject); 
				return; 
			case TopLevelElementsPackage.MATCH_BLOCK:
				sequence_MatchBlock(context, (MatchBlock) semanticObject); 
				return; 
			case TopLevelElementsPackage.NAMED_JAVA_ELEMENT_REFERENCE:
				sequence_NamedJavaElementReference(context, (NamedJavaElementReference) semanticObject); 
				return; 
			case TopLevelElementsPackage.REACTION:
				sequence_Reaction(context, (Reaction) semanticObject); 
				return; 
			case TopLevelElementsPackage.REACTIONS_FILE:
				sequence_ReactionsFile(context, (ReactionsFile) semanticObject); 
				return; 
			case TopLevelElementsPackage.REACTIONS_IMPORT:
				sequence_ReactionsImport(context, (ReactionsImport) semanticObject); 
				return; 
			case TopLevelElementsPackage.REACTIONS_SEGMENT:
				sequence_ReactionsSegment(context, (ReactionsSegment) semanticObject); 
				return; 
			case TopLevelElementsPackage.ROUTINE:
				sequence_Routine(context, (Routine) semanticObject); 
				return; 
			case TopLevelElementsPackage.ROUTINE_CALL:
				sequence_RoutineCall(context, (RoutineCall) semanticObject); 
				return; 
			case TopLevelElementsPackage.ROUTINE_INPUT:
				sequence_RoutineInput(context, (RoutineInput) semanticObject); 
				return; 
			case TopLevelElementsPackage.ROUTINE_OVERRIDE_IMPORT_PATH:
				sequence_RoutineOverrideImportPath(context, (RoutineOverrideImportPath) semanticObject); 
				return; 
			case TopLevelElementsPackage.UPDATE_BLOCK:
				sequence_UpdateBlock(context, (UpdateBlock) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Trigger returns ArbitraryModelChange
	 *     ArbitraryModelChange returns ArbitraryModelChange
	 *
	 * Constraint:
	 *     precondition=XExpression?
	 * </pre>
	 */
	protected void sequence_ArbitraryModelChange(ISerializationContext context, ArbitraryModelChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CreateBlock returns CreateBlock
	 *
	 * Constraint:
	 *     createStatements+=CreateStatement*
	 * </pre>
	 */
	protected void sequence_CreateBlock(ISerializationContext context, CreateBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CreateStatement returns NamedMetaclassReference
	 *
	 * Constraint:
	 *     (name=ValidID metamodel=[MetamodelImport|ID]? metaclass=[EClassifier|QualifiedName])
	 * </pre>
	 */
	protected void sequence_CreateStatement_MetaclassReference(ISerializationContext context, NamedMetaclassReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementExistenceChangeType returns ElementCreationChangeType
	 *     ElementCreationChangeType returns ElementCreationChangeType
	 *     ElementChangeType returns ElementCreationChangeType
	 *
	 * Constraint:
	 *     {ElementCreationChangeType}
	 * </pre>
	 */
	protected void sequence_ElementCreationChangeType(ISerializationContext context, ElementCreationChangeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementExistenceChangeType returns ElementDeletionChangeType
	 *     ElementDeletionChangeType returns ElementDeletionChangeType
	 *     ElementChangeType returns ElementDeletionChangeType
	 *
	 * Constraint:
	 *     {ElementDeletionChangeType}
	 * </pre>
	 */
	protected void sequence_ElementDeletionChangeType(ISerializationContext context, ElementDeletionChangeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementUsageChangeType returns ElementInsertionAsRootChangeType
	 *     ElementRootChangeType returns ElementInsertionAsRootChangeType
	 *     ElementInsertionChangeType returns ElementInsertionAsRootChangeType
	 *     ElementInsertionAsRootChangeType returns ElementInsertionAsRootChangeType
	 *     ElementChangeType returns ElementInsertionAsRootChangeType
	 *
	 * Constraint:
	 *     {ElementInsertionAsRootChangeType}
	 * </pre>
	 */
	protected void sequence_ElementInsertionAsRootChangeType(ISerializationContext context, ElementInsertionAsRootChangeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementUsageChangeType returns ElementInsertionInListChangeType
	 *     ElementInsertionChangeType returns ElementInsertionInListChangeType
	 *     ElementInsertionInListChangeType returns ElementInsertionInListChangeType
	 *     ElementChangeType returns ElementInsertionInListChangeType
	 *
	 * Constraint:
	 *     feature=MetaclassEReferenceReference
	 * </pre>
	 */
	protected void sequence_ElementReferenceChangeType(ISerializationContext context, ElementInsertionInListChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.ELEMENT_REFERENCE_CHANGE_TYPE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.ELEMENT_REFERENCE_CHANGE_TYPE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementReferenceChangeTypeAccess().getFeatureMetaclassEReferenceReferenceParserRuleCall_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementUsageChangeType returns ElementRemovalFromListChangeType
	 *     ElementRemovalChangeType returns ElementRemovalFromListChangeType
	 *     ElementRemovalFromListChangeType returns ElementRemovalFromListChangeType
	 *     ElementChangeType returns ElementRemovalFromListChangeType
	 *
	 * Constraint:
	 *     feature=MetaclassEReferenceReference
	 * </pre>
	 */
	protected void sequence_ElementReferenceChangeType(ISerializationContext context, ElementRemovalFromListChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.ELEMENT_REFERENCE_CHANGE_TYPE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.ELEMENT_REFERENCE_CHANGE_TYPE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementReferenceChangeTypeAccess().getFeatureMetaclassEReferenceReferenceParserRuleCall_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementUsageChangeType returns ElementReplacementChangeType
	 *     ElementReplacementChangeType returns ElementReplacementChangeType
	 *     ElementChangeType returns ElementReplacementChangeType
	 *
	 * Constraint:
	 *     feature=MetaclassEReferenceReference
	 * </pre>
	 */
	protected void sequence_ElementReferenceChangeType(ISerializationContext context, ElementReplacementChangeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.ELEMENT_REFERENCE_CHANGE_TYPE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.ELEMENT_REFERENCE_CHANGE_TYPE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementReferenceChangeTypeAccess().getFeatureMetaclassEReferenceReferenceParserRuleCall_0(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementUsageChangeType returns ElementRemovalAsRootChangeType
	 *     ElementRootChangeType returns ElementRemovalAsRootChangeType
	 *     ElementRemovalChangeType returns ElementRemovalAsRootChangeType
	 *     ElementRemovalAsRootChangeType returns ElementRemovalAsRootChangeType
	 *     ElementChangeType returns ElementRemovalAsRootChangeType
	 *
	 * Constraint:
	 *     {ElementRemovalAsRootChangeType}
	 * </pre>
	 */
	protected void sequence_ElementRemovalAsRootChangeType(ISerializationContext context, ElementRemovalAsRootChangeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MatchBlock returns MatchBlock
	 *
	 * Constraint:
	 *     matchStatements+=MatchStatement+
	 * </pre>
	 */
	protected void sequence_MatchBlock(ISerializationContext context, MatchBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MatchStatement returns MatchCheckStatement
	 *     MatchCheckStatement returns MatchCheckStatement
	 *
	 * Constraint:
	 *     (asserted?='asserted'? condition=XExpression)
	 * </pre>
	 */
	protected void sequence_MatchCheckStatement(ISerializationContext context, MatchCheckStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MetaclassEAttributeReference returns MetaclassEAttributeReference
	 *
	 * Constraint:
	 *     (metamodel=[MetamodelImport|ID]? metaclass=[EClassifier|QualifiedName] feature=[EAttribute|ValidID])
	 * </pre>
	 */
	protected void sequence_MetaclassEAttributeReference_MetaclassReference(ISerializationContext context, MetaclassEAttributeReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MetaclassEReferenceReference returns MetaclassEReferenceReference
	 *
	 * Constraint:
	 *     (metamodel=[MetamodelImport|ID]? metaclass=[EClassifier|QualifiedName] feature=[EReference|ValidID])
	 * </pre>
	 */
	protected void sequence_MetaclassEReferenceReference_MetaclassReference(ISerializationContext context, MetaclassEReferenceReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UnnamedMetaclassReference returns MetaclassReference
	 *
	 * Constraint:
	 *     (metamodel=[MetamodelImport|ID]? metaclass=[EClassifier|QualifiedName])
	 * </pre>
	 */
	protected void sequence_MetaclassReference(ISerializationContext context, MetaclassReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NamedMetaclassReference returns NamedMetaclassReference
	 *
	 * Constraint:
	 *     (metamodel=[MetamodelImport|ID]? metaclass=[EClassifier|QualifiedName] name=ValidID)
	 * </pre>
	 */
	protected void sequence_MetaclassReference_NamedMetaclassReference(ISerializationContext context, NamedMetaclassReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MetamodelImport returns MetamodelImport
	 *
	 * Constraint:
	 *     (package=[EPackage|STRING] name=ValidID useQualifiedNames?='using'?)
	 * </pre>
	 */
	protected void sequence_MetamodelImport(ISerializationContext context, MetamodelImport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Trigger returns ModelAttributeInsertedChange
	 *     ConcreteModelChange returns ModelAttributeInsertedChange
	 *     ModelAttributeChange returns ModelAttributeInsertedChange
	 *
	 * Constraint:
	 *     (feature=MetaclassEAttributeReference precondition=XExpression?)
	 * </pre>
	 */
	protected void sequence_ModelAttributeChange(ISerializationContext context, ModelAttributeInsertedChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Trigger returns ModelAttributeRemovedChange
	 *     ConcreteModelChange returns ModelAttributeRemovedChange
	 *     ModelAttributeChange returns ModelAttributeRemovedChange
	 *
	 * Constraint:
	 *     (feature=MetaclassEAttributeReference precondition=XExpression?)
	 * </pre>
	 */
	protected void sequence_ModelAttributeChange(ISerializationContext context, ModelAttributeRemovedChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Trigger returns ModelAttributeReplacedChange
	 *     ConcreteModelChange returns ModelAttributeReplacedChange
	 *     ModelAttributeChange returns ModelAttributeReplacedChange
	 *
	 * Constraint:
	 *     (feature=MetaclassEAttributeReference precondition=XExpression?)
	 * </pre>
	 */
	protected void sequence_ModelAttributeChange(ISerializationContext context, ModelAttributeReplacedChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Trigger returns ModelElementChange
	 *     ConcreteModelChange returns ModelElementChange
	 *     ModelElementChange returns ModelElementChange
	 *
	 * Constraint:
	 *     (elementType=UnnamedMetaclassReference? changeType=ElementChangeType precondition=XExpression?)
	 * </pre>
	 */
	protected void sequence_ModelElementChange(ISerializationContext context, ModelElementChange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NamedJavaElementReference returns NamedJavaElementReference
	 *
	 * Constraint:
	 *     (type=JvmTypeReference name=ValidID)
	 * </pre>
	 */
	protected void sequence_NamedJavaElementReference(ISerializationContext context, NamedJavaElementReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TopLevelElementsPackage.Literals.NAMED_JAVA_ELEMENT_REFERENCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopLevelElementsPackage.Literals.NAMED_JAVA_ELEMENT_REFERENCE__TYPE));
			if (transientValues.isValueTransient(semanticObject, TopLevelElementsPackage.Literals.NAMED_JAVA_ELEMENT_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopLevelElementsPackage.Literals.NAMED_JAVA_ELEMENT_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNamedJavaElementReferenceAccess().getTypeJvmTypeReferenceParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getNamedJavaElementReferenceAccess().getNameValidIDParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reaction returns Reaction
	 *
	 * Constraint:
	 *     (documentation=ML_COMMENT? overriddenReactionsSegment=[ReactionsSegment|ID]? name=ValidID trigger=Trigger callRoutine=RoutineCall)
	 * </pre>
	 */
	protected void sequence_Reaction(ISerializationContext context, Reaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReactionsFile returns ReactionsFile
	 *
	 * Constraint:
	 *     (namespaceImports=XImportSection? metamodelImports+=MetamodelImport* reactionsSegments+=ReactionsSegment+)
	 * </pre>
	 */
	protected void sequence_ReactionsFile(ISerializationContext context, ReactionsFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReactionsImport returns ReactionsImport
	 *
	 * Constraint:
	 *     (routinesOnly?='routines'? importedReactionsSegment=[ReactionsSegment|ID] useQualifiedNames?='using'?)
	 * </pre>
	 */
	protected void sequence_ReactionsImport(ISerializationContext context, ReactionsImport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReactionsSegment returns ReactionsSegment
	 *
	 * Constraint:
	 *     (
	 *         name=ValidID 
	 *         fromMetamodels+=[MetamodelImport|ID] 
	 *         fromMetamodels+=[MetamodelImport|ID]* 
	 *         toMetamodels+=[MetamodelImport|ID] 
	 *         toMetamodels+=[MetamodelImport|ID]* 
	 *         reactionsImports+=ReactionsImport* 
	 *         (reactions+=Reaction | routines+=Routine)*
	 *     )
	 * </pre>
	 */
	protected void sequence_ReactionsSegment(ISerializationContext context, ReactionsSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MatchStatement returns RequireAbscenceOfModelElement
	 *     RetrieveOrRequireAbscenceOfModelElement returns RequireAbscenceOfModelElement
	 *     RequireAbscenceOfModelElement returns RequireAbscenceOfModelElement
	 *
	 * Constraint:
	 *     (elementType=UnnamedMetaclassReference correspondenceSource=XExpression tag=XExpression? precondition=XExpression?)
	 * </pre>
	 */
	protected void sequence_RequireAbscenceOfModelElement(ISerializationContext context, RequireAbscenceOfModelElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RetrieveModelElementTypeStatement returns RetrieveManyModelElements
	 *
	 * Constraint:
	 *     {RetrieveManyModelElements}
	 * </pre>
	 */
	protected void sequence_RetrieveModelElementTypeStatement(ISerializationContext context, RetrieveManyModelElements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RetrieveModelElementTypeStatement returns RetrieveOneModelElement
	 *
	 * Constraint:
	 *     (optional?='optional' | asserted?='asserted')?
	 * </pre>
	 */
	protected void sequence_RetrieveModelElementTypeStatement(ISerializationContext context, RetrieveOneModelElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MatchStatement returns RetrieveModelElement
	 *     RetrieveOrRequireAbscenceOfModelElement returns RetrieveModelElement
	 *     RetrieveModelElement returns RetrieveModelElement
	 *
	 * Constraint:
	 *     (
	 *         name=ValidID? 
	 *         retrievalType=RetrieveModelElementTypeStatement 
	 *         elementType=UnnamedMetaclassReference 
	 *         correspondenceSource=XExpression 
	 *         tag=XExpression? 
	 *         precondition=XExpression?
	 *     )
	 * </pre>
	 */
	protected void sequence_RetrieveModelElement(ISerializationContext context, RetrieveModelElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RoutineCall returns RoutineCall
	 *
	 * Constraint:
	 *     code=XExpression
	 * </pre>
	 */
	protected void sequence_RoutineCall(ISerializationContext context, RoutineCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TopLevelElementsPackage.Literals.CODE_EXECUTION_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopLevelElementsPackage.Literals.CODE_EXECUTION_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoutineCallAccess().getCodeXExpressionParserRuleCall_2_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RoutineInput returns RoutineInput
	 *
	 * Constraint:
	 *     (
	 *         (modelInputElements+=NamedMetaclassReference | javaInputElements+=NamedJavaElementReference) 
	 *         modelInputElements+=NamedMetaclassReference? 
	 *         (javaInputElements+=NamedJavaElementReference? modelInputElements+=NamedMetaclassReference?)*
	 *     )?
	 * </pre>
	 */
	protected void sequence_RoutineInput(ISerializationContext context, RoutineInput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RoutineOverrideImportPath returns RoutineOverrideImportPath
	 *     RoutineOverrideImportPath.RoutineOverrideImportPath_1_0 returns RoutineOverrideImportPath
	 *
	 * Constraint:
	 *     (
	 *         reactionsSegment=[ReactionsSegment|ID] | 
	 *         (parent=RoutineOverrideImportPath_RoutineOverrideImportPath_1_0 reactionsSegment=[ReactionsSegment|ID])
	 *     )
	 * </pre>
	 */
	protected void sequence_RoutineOverrideImportPath(ISerializationContext context, RoutineOverrideImportPath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Routine returns Routine
	 *
	 * Constraint:
	 *     (
	 *         documentation=ML_COMMENT? 
	 *         overrideImportPath=RoutineOverrideImportPath? 
	 *         name=ValidID 
	 *         input=RoutineInput 
	 *         matchBlock=MatchBlock? 
	 *         createBlock=CreateBlock? 
	 *         updateBlock=UpdateBlock?
	 *     )
	 * </pre>
	 */
	protected void sequence_Routine(ISerializationContext context, Routine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UpdateBlock returns UpdateBlock
	 *
	 * Constraint:
	 *     code=XExpression
	 * </pre>
	 */
	protected void sequence_UpdateBlock(ISerializationContext context, UpdateBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TopLevelElementsPackage.Literals.CODE_EXECUTION_BLOCK__CODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopLevelElementsPackage.Literals.CODE_EXECUTION_BLOCK__CODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateBlockAccess().getCodeXExpressionParserRuleCall_1_0(), semanticObject.getCode());
		feeder.finish();
	}
	
	
}
