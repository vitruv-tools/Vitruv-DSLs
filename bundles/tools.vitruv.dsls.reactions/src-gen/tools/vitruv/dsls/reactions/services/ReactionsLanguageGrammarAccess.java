/*
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.reactions.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ReactionsLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ReactionsFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ReactionsFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceImportsXImportSectionParserRuleCall_0_0 = (RuleCall)cNamespaceImportsAssignment_0.eContents().get(0);
		private final Assignment cMetamodelImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelImportsMetamodelImportParserRuleCall_1_0 = (RuleCall)cMetamodelImportsAssignment_1.eContents().get(0);
		private final Assignment cReactionsSegmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReactionsSegmentsReactionsSegmentParserRuleCall_2_0 = (RuleCall)cReactionsSegmentsAssignment_2.eContents().get(0);
		
		//ReactionsFile returns toplevelelements::ReactionsFile:
		//    (namespaceImports=XImportSection)?
		//    (metamodelImports+=MetamodelImport)*
		//    (reactionsSegments+=ReactionsSegment)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(namespaceImports=XImportSection)?
		//(metamodelImports+=MetamodelImport)*
		//(reactionsSegments+=ReactionsSegment)+
		public Group getGroup() { return cGroup; }
		
		//(namespaceImports=XImportSection)?
		public Assignment getNamespaceImportsAssignment_0() { return cNamespaceImportsAssignment_0; }
		
		//XImportSection
		public RuleCall getNamespaceImportsXImportSectionParserRuleCall_0_0() { return cNamespaceImportsXImportSectionParserRuleCall_0_0; }
		
		//(metamodelImports+=MetamodelImport)*
		public Assignment getMetamodelImportsAssignment_1() { return cMetamodelImportsAssignment_1; }
		
		//MetamodelImport
		public RuleCall getMetamodelImportsMetamodelImportParserRuleCall_1_0() { return cMetamodelImportsMetamodelImportParserRuleCall_1_0; }
		
		//(reactionsSegments+=ReactionsSegment)+
		public Assignment getReactionsSegmentsAssignment_2() { return cReactionsSegmentsAssignment_2; }
		
		//ReactionsSegment
		public RuleCall getReactionsSegmentsReactionsSegmentParserRuleCall_2_0() { return cReactionsSegmentsReactionsSegmentParserRuleCall_2_0; }
	}
	public class MetamodelImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MetamodelImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageEPackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cUseQualifiedNamesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cUseQualifiedNamesUsingKeyword_4_0_0 = (Keyword)cUseQualifiedNamesAssignment_4_0.eContents().get(0);
		private final Keyword cQualifiedKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cNamesKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//MetamodelImport returns common::MetamodelImport:
		//    'import' package=[ecore::EPackage|STRING] 'as' name=ValidID (useQualifiedNames?='using' 'qualified' 'names')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' package=[ecore::EPackage|STRING] 'as' name=ValidID (useQualifiedNames?='using' 'qualified' 'names')?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_1_0() { return cPackageEPackageCrossReference_1_0; }
		
		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//(useQualifiedNames?='using' 'qualified' 'names')?
		public Group getGroup_4() { return cGroup_4; }
		
		//useQualifiedNames?='using'
		public Assignment getUseQualifiedNamesAssignment_4_0() { return cUseQualifiedNamesAssignment_4_0; }
		
		//'using'
		public Keyword getUseQualifiedNamesUsingKeyword_4_0_0() { return cUseQualifiedNamesUsingKeyword_4_0_0; }
		
		//'qualified'
		public Keyword getQualifiedKeyword_4_1() { return cQualifiedKeyword_4_1; }
		
		//'names'
		public Keyword getNamesKeyword_4_2() { return cNamesKeyword_4_2; }
	}
	public class ReactionsSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ReactionsSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReactionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cChangesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFromMetamodelsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cFromMetamodelsMetamodelImportCrossReference_7_0 = (CrossReference)cFromMetamodelsAssignment_7.eContents().get(0);
		private final RuleCall cFromMetamodelsMetamodelImportIDTerminalRuleCall_7_0_1 = (RuleCall)cFromMetamodelsMetamodelImportCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAndKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFromMetamodelsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cFromMetamodelsMetamodelImportCrossReference_8_1_0 = (CrossReference)cFromMetamodelsAssignment_8_1.eContents().get(0);
		private final RuleCall cFromMetamodelsMetamodelImportIDTerminalRuleCall_8_1_0_1 = (RuleCall)cFromMetamodelsMetamodelImportCrossReference_8_1_0.eContents().get(1);
		private final Keyword cExecuteKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cActionsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cInKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cToMetamodelsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cToMetamodelsMetamodelImportCrossReference_12_0 = (CrossReference)cToMetamodelsAssignment_12.eContents().get(0);
		private final RuleCall cToMetamodelsMetamodelImportIDTerminalRuleCall_12_0_1 = (RuleCall)cToMetamodelsMetamodelImportCrossReference_12_0.eContents().get(1);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cAndKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cToMetamodelsAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final CrossReference cToMetamodelsMetamodelImportCrossReference_13_1_0 = (CrossReference)cToMetamodelsAssignment_13_1.eContents().get(0);
		private final RuleCall cToMetamodelsMetamodelImportIDTerminalRuleCall_13_1_0_1 = (RuleCall)cToMetamodelsMetamodelImportCrossReference_13_1_0.eContents().get(1);
		private final Assignment cReactionsImportsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cReactionsImportsReactionsImportParserRuleCall_14_0 = (RuleCall)cReactionsImportsAssignment_14.eContents().get(0);
		private final Alternatives cAlternatives_15 = (Alternatives)cGroup.eContents().get(15);
		private final Assignment cReactionsAssignment_15_0 = (Assignment)cAlternatives_15.eContents().get(0);
		private final RuleCall cReactionsReactionParserRuleCall_15_0_0 = (RuleCall)cReactionsAssignment_15_0.eContents().get(0);
		private final Assignment cRoutinesAssignment_15_1 = (Assignment)cAlternatives_15.eContents().get(1);
		private final RuleCall cRoutinesRoutineParserRuleCall_15_1_0 = (RuleCall)cRoutinesAssignment_15_1.eContents().get(0);
		
		//ReactionsSegment returns toplevelelements::ReactionsSegment:
		//    'reactions:' name=ValidID
		//    'in' 'reaction' 'to' 'changes' 'in' fromMetamodels+=[common::MetamodelImport] ('and'
		//    fromMetamodels+=[common::MetamodelImport])*
		//    'execute' 'actions' 'in' toMetamodels+=[common::MetamodelImport] ('and' toMetamodels+=[common::MetamodelImport])*
		//    (reactionsImports+=ReactionsImport)*
		//    (reactions+=Reaction |
		//    routines+=Routine)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'reactions:' name=ValidID
		//'in' 'reaction' 'to' 'changes' 'in' fromMetamodels+=[common::MetamodelImport] ('and'
		//fromMetamodels+=[common::MetamodelImport])*
		//'execute' 'actions' 'in' toMetamodels+=[common::MetamodelImport] ('and' toMetamodels+=[common::MetamodelImport])*
		//(reactionsImports+=ReactionsImport)*
		//(reactions+=Reaction |
		//routines+=Routine)*
		public Group getGroup() { return cGroup; }
		
		//'reactions:'
		public Keyword getReactionsKeyword_0() { return cReactionsKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//'reaction'
		public Keyword getReactionKeyword_3() { return cReactionKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//'changes'
		public Keyword getChangesKeyword_5() { return cChangesKeyword_5; }
		
		//'in'
		public Keyword getInKeyword_6() { return cInKeyword_6; }
		
		//fromMetamodels+=[common::MetamodelImport]
		public Assignment getFromMetamodelsAssignment_7() { return cFromMetamodelsAssignment_7; }
		
		//[common::MetamodelImport]
		public CrossReference getFromMetamodelsMetamodelImportCrossReference_7_0() { return cFromMetamodelsMetamodelImportCrossReference_7_0; }
		
		//ID
		public RuleCall getFromMetamodelsMetamodelImportIDTerminalRuleCall_7_0_1() { return cFromMetamodelsMetamodelImportIDTerminalRuleCall_7_0_1; }
		
		//('and'
		//   fromMetamodels+=[common::MetamodelImport])*
		public Group getGroup_8() { return cGroup_8; }
		
		//'and'
		public Keyword getAndKeyword_8_0() { return cAndKeyword_8_0; }
		
		//fromMetamodels+=[common::MetamodelImport]
		public Assignment getFromMetamodelsAssignment_8_1() { return cFromMetamodelsAssignment_8_1; }
		
		//[common::MetamodelImport]
		public CrossReference getFromMetamodelsMetamodelImportCrossReference_8_1_0() { return cFromMetamodelsMetamodelImportCrossReference_8_1_0; }
		
		//ID
		public RuleCall getFromMetamodelsMetamodelImportIDTerminalRuleCall_8_1_0_1() { return cFromMetamodelsMetamodelImportIDTerminalRuleCall_8_1_0_1; }
		
		//'execute'
		public Keyword getExecuteKeyword_9() { return cExecuteKeyword_9; }
		
		//'actions'
		public Keyword getActionsKeyword_10() { return cActionsKeyword_10; }
		
		//'in'
		public Keyword getInKeyword_11() { return cInKeyword_11; }
		
		//toMetamodels+=[common::MetamodelImport]
		public Assignment getToMetamodelsAssignment_12() { return cToMetamodelsAssignment_12; }
		
		//[common::MetamodelImport]
		public CrossReference getToMetamodelsMetamodelImportCrossReference_12_0() { return cToMetamodelsMetamodelImportCrossReference_12_0; }
		
		//ID
		public RuleCall getToMetamodelsMetamodelImportIDTerminalRuleCall_12_0_1() { return cToMetamodelsMetamodelImportIDTerminalRuleCall_12_0_1; }
		
		//('and' toMetamodels+=[common::MetamodelImport])*
		public Group getGroup_13() { return cGroup_13; }
		
		//'and'
		public Keyword getAndKeyword_13_0() { return cAndKeyword_13_0; }
		
		//toMetamodels+=[common::MetamodelImport]
		public Assignment getToMetamodelsAssignment_13_1() { return cToMetamodelsAssignment_13_1; }
		
		//[common::MetamodelImport]
		public CrossReference getToMetamodelsMetamodelImportCrossReference_13_1_0() { return cToMetamodelsMetamodelImportCrossReference_13_1_0; }
		
		//ID
		public RuleCall getToMetamodelsMetamodelImportIDTerminalRuleCall_13_1_0_1() { return cToMetamodelsMetamodelImportIDTerminalRuleCall_13_1_0_1; }
		
		//(reactionsImports+=ReactionsImport)*
		public Assignment getReactionsImportsAssignment_14() { return cReactionsImportsAssignment_14; }
		
		//ReactionsImport
		public RuleCall getReactionsImportsReactionsImportParserRuleCall_14_0() { return cReactionsImportsReactionsImportParserRuleCall_14_0; }
		
		//(reactions+=Reaction |
		//routines+=Routine)*
		public Alternatives getAlternatives_15() { return cAlternatives_15; }
		
		//reactions+=Reaction
		public Assignment getReactionsAssignment_15_0() { return cReactionsAssignment_15_0; }
		
		//Reaction
		public RuleCall getReactionsReactionParserRuleCall_15_0_0() { return cReactionsReactionParserRuleCall_15_0_0; }
		
		//routines+=Routine
		public Assignment getRoutinesAssignment_15_1() { return cRoutinesAssignment_15_1; }
		
		//Routine
		public RuleCall getRoutinesRoutineParserRuleCall_15_1_0() { return cRoutinesRoutineParserRuleCall_15_1_0; }
	}
	public class ReactionsImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ReactionsImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoutinesOnlyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRoutinesOnlyRoutinesKeyword_1_0 = (Keyword)cRoutinesOnlyAssignment_1.eContents().get(0);
		private final Assignment cImportedReactionsSegmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cImportedReactionsSegmentReactionsSegmentCrossReference_2_0 = (CrossReference)cImportedReactionsSegmentAssignment_2.eContents().get(0);
		private final RuleCall cImportedReactionsSegmentReactionsSegmentIDTerminalRuleCall_2_0_1 = (RuleCall)cImportedReactionsSegmentReactionsSegmentCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cUseQualifiedNamesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cUseQualifiedNamesUsingKeyword_3_0_0 = (Keyword)cUseQualifiedNamesAssignment_3_0.eContents().get(0);
		private final Keyword cQualifiedKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cNamesKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ReactionsImport returns toplevelelements::ReactionsImport:
		//    'import' (routinesOnly?='routines')? importedReactionsSegment=[toplevelelements::ReactionsSegment]
		//    (useQualifiedNames?='using' 'qualified' 'names')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (routinesOnly?='routines')? importedReactionsSegment=[toplevelelements::ReactionsSegment]
		//(useQualifiedNames?='using' 'qualified' 'names')?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(routinesOnly?='routines')?
		public Assignment getRoutinesOnlyAssignment_1() { return cRoutinesOnlyAssignment_1; }
		
		//'routines'
		public Keyword getRoutinesOnlyRoutinesKeyword_1_0() { return cRoutinesOnlyRoutinesKeyword_1_0; }
		
		//importedReactionsSegment=[toplevelelements::ReactionsSegment]
		public Assignment getImportedReactionsSegmentAssignment_2() { return cImportedReactionsSegmentAssignment_2; }
		
		//[toplevelelements::ReactionsSegment]
		public CrossReference getImportedReactionsSegmentReactionsSegmentCrossReference_2_0() { return cImportedReactionsSegmentReactionsSegmentCrossReference_2_0; }
		
		//ID
		public RuleCall getImportedReactionsSegmentReactionsSegmentIDTerminalRuleCall_2_0_1() { return cImportedReactionsSegmentReactionsSegmentIDTerminalRuleCall_2_0_1; }
		
		//(useQualifiedNames?='using' 'qualified' 'names')?
		public Group getGroup_3() { return cGroup_3; }
		
		//useQualifiedNames?='using'
		public Assignment getUseQualifiedNamesAssignment_3_0() { return cUseQualifiedNamesAssignment_3_0; }
		
		//'using'
		public Keyword getUseQualifiedNamesUsingKeyword_3_0_0() { return cUseQualifiedNamesUsingKeyword_3_0_0; }
		
		//'qualified'
		public Keyword getQualifiedKeyword_3_1() { return cQualifiedKeyword_3_1; }
		
		//'names'
		public Keyword getNamesKeyword_3_2() { return cNamesKeyword_3_2; }
	}
	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cReactionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOverriddenReactionsSegmentAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cOverriddenReactionsSegmentReactionsSegmentCrossReference_2_0_0 = (CrossReference)cOverriddenReactionsSegmentAssignment_2_0.eContents().get(0);
		private final RuleCall cOverriddenReactionsSegmentReactionsSegmentIDTerminalRuleCall_2_0_0_1 = (RuleCall)cOverriddenReactionsSegmentReactionsSegmentCrossReference_2_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTriggerAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTriggerTriggerParserRuleCall_5_0 = (RuleCall)cTriggerAssignment_5.eContents().get(0);
		private final Assignment cCallRoutineAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCallRoutineRoutineCallParserRuleCall_6_0 = (RuleCall)cCallRoutineAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// *********************************
		//// *********** REACTIONS ***********
		//// *********************************
		//Reaction returns toplevelelements::Reaction:
		//    (documentation=ML_COMMENT)?
		//    'reaction' (overriddenReactionsSegment=[toplevelelements::ReactionsSegment] '::')? name=ValidID '{'
		//    trigger=Trigger
		//    callRoutine=RoutineCall
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//(documentation=ML_COMMENT)?
		//'reaction' (overriddenReactionsSegment=[toplevelelements::ReactionsSegment] '::')? name=ValidID '{'
		//trigger=Trigger
		//callRoutine=RoutineCall
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(documentation=ML_COMMENT)?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocumentationML_COMMENTTerminalRuleCall_0_0() { return cDocumentationML_COMMENTTerminalRuleCall_0_0; }
		
		//'reaction'
		public Keyword getReactionKeyword_1() { return cReactionKeyword_1; }
		
		//(overriddenReactionsSegment=[toplevelelements::ReactionsSegment] '::')?
		public Group getGroup_2() { return cGroup_2; }
		
		//overriddenReactionsSegment=[toplevelelements::ReactionsSegment]
		public Assignment getOverriddenReactionsSegmentAssignment_2_0() { return cOverriddenReactionsSegmentAssignment_2_0; }
		
		//[toplevelelements::ReactionsSegment]
		public CrossReference getOverriddenReactionsSegmentReactionsSegmentCrossReference_2_0_0() { return cOverriddenReactionsSegmentReactionsSegmentCrossReference_2_0_0; }
		
		//ID
		public RuleCall getOverriddenReactionsSegmentReactionsSegmentIDTerminalRuleCall_2_0_0_1() { return cOverriddenReactionsSegmentReactionsSegmentIDTerminalRuleCall_2_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2_1() { return cColonColonKeyword_2_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_5() { return cTriggerAssignment_5; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_5_0() { return cTriggerTriggerParserRuleCall_5_0; }
		
		//callRoutine=RoutineCall
		public Assignment getCallRoutineAssignment_6() { return cCallRoutineAssignment_6; }
		
		//RoutineCall
		public RuleCall getCallRoutineRoutineCallParserRuleCall_6_0() { return cCallRoutineRoutineCallParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RoutineCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RoutineCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeXExpressionParserRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		
		//RoutineCall returns toplevelelements::RoutineCall:
		//    {toplevelelements::RoutineCall}
		//    'call' code=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{toplevelelements::RoutineCall}
		//'call' code=XExpression
		public Group getGroup() { return cGroup; }
		
		//{toplevelelements::RoutineCall}
		public Action getRoutineCallAction_0() { return cRoutineCallAction_0; }
		
		//'call'
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }
		
		//code=XExpression
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//XExpression
		public RuleCall getCodeXExpressionParserRuleCall_2_0() { return cCodeXExpressionParserRuleCall_2_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cArbitraryModelChangeParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cConcreteModelChangeParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//// *********** TRIGGER ***********
		//Trigger returns toplevelelements::Trigger:
		//    'after' (ArbitraryModelChange | ConcreteModelChange);
		@Override public ParserRule getRule() { return rule; }
		
		//'after' (ArbitraryModelChange | ConcreteModelChange)
		public Group getGroup() { return cGroup; }
		
		//'after'
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }
		
		//(ArbitraryModelChange | ConcreteModelChange)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ArbitraryModelChange
		public RuleCall getArbitraryModelChangeParserRuleCall_1_0() { return cArbitraryModelChangeParserRuleCall_1_0; }
		
		//ConcreteModelChange
		public RuleCall getConcreteModelChangeParserRuleCall_1_1() { return cConcreteModelChangeParserRuleCall_1_1; }
	}
	public class ConcreteModelChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ConcreteModelChange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModelElementChangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelAttributeChangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcreteModelChange:
		//    ModelElementChange | ModelAttributeChange;
		@Override public ParserRule getRule() { return rule; }
		
		//ModelElementChange | ModelAttributeChange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ModelElementChange
		public RuleCall getModelElementChangeParserRuleCall_0() { return cModelElementChangeParserRuleCall_0; }
		
		//ModelAttributeChange
		public RuleCall getModelAttributeChangeParserRuleCall_1() { return cModelAttributeChangeParserRuleCall_1; }
	}
	public class ModelElementChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ModelElementChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelElementChangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeUnnamedMetaclassReferenceParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Assignment cChangeTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChangeTypeElementChangeTypeParserRuleCall_3_0 = (RuleCall)cChangeTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPreconditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPreconditionXExpressionParserRuleCall_4_1_0 = (RuleCall)cPreconditionAssignment_4_1.eContents().get(0);
		
		//ModelElementChange:
		//    {ModelElementChange}
		//    'element' (elementType=UnnamedMetaclassReference)? changeType=ElementChangeType
		//    ('with' precondition=XExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ModelElementChange}
		//'element' (elementType=UnnamedMetaclassReference)? changeType=ElementChangeType
		//('with' precondition=XExpression)?
		public Group getGroup() { return cGroup; }
		
		//{ModelElementChange}
		public Action getModelElementChangeAction_0() { return cModelElementChangeAction_0; }
		
		//'element'
		public Keyword getElementKeyword_1() { return cElementKeyword_1; }
		
		//(elementType=UnnamedMetaclassReference)?
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//UnnamedMetaclassReference
		public RuleCall getElementTypeUnnamedMetaclassReferenceParserRuleCall_2_0() { return cElementTypeUnnamedMetaclassReferenceParserRuleCall_2_0; }
		
		//changeType=ElementChangeType
		public Assignment getChangeTypeAssignment_3() { return cChangeTypeAssignment_3; }
		
		//ElementChangeType
		public RuleCall getChangeTypeElementChangeTypeParserRuleCall_3_0() { return cChangeTypeElementChangeTypeParserRuleCall_3_0; }
		
		//('with' precondition=XExpression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//precondition=XExpression
		public Assignment getPreconditionAssignment_4_1() { return cPreconditionAssignment_4_1; }
		
		//XExpression
		public RuleCall getPreconditionXExpressionParserRuleCall_4_1_0() { return cPreconditionXExpressionParserRuleCall_4_1_0; }
	}
	public class ModelAttributeChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ModelAttributeChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cModelAttributeInsertedChangeAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cInsertedKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cInKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cModelAttributeRemovedChangeAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cRemovedKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cFromKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cModelAttributeReplacedChangeAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cReplacedKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Keyword cAtKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureMetaclassEAttributeReferenceParserRuleCall_2_0 = (RuleCall)cFeatureAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPreconditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPreconditionXExpressionParserRuleCall_3_1_0 = (RuleCall)cPreconditionAssignment_3_1.eContents().get(0);
		
		//ModelAttributeChange:
		//    'attribute' ({ModelAttributeInsertedChange} 'inserted' 'in' |
		//    {ModelAttributeRemovedChange} 'removed' 'from' |
		//    {ModelAttributeReplacedChange} 'replaced' 'at')
		//    feature=MetaclassEAttributeReference
		//    ('with' precondition=XExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' ({ModelAttributeInsertedChange} 'inserted' 'in' |
		//{ModelAttributeRemovedChange} 'removed' 'from' |
		//{ModelAttributeReplacedChange} 'replaced' 'at')
		//feature=MetaclassEAttributeReference
		//('with' precondition=XExpression)?
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//({ModelAttributeInsertedChange} 'inserted' 'in' |
		//   {ModelAttributeRemovedChange} 'removed' 'from' |
		//   {ModelAttributeReplacedChange} 'replaced' 'at')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ModelAttributeInsertedChange} 'inserted' 'in'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ModelAttributeInsertedChange}
		public Action getModelAttributeInsertedChangeAction_1_0_0() { return cModelAttributeInsertedChangeAction_1_0_0; }
		
		//'inserted'
		public Keyword getInsertedKeyword_1_0_1() { return cInsertedKeyword_1_0_1; }
		
		//'in'
		public Keyword getInKeyword_1_0_2() { return cInKeyword_1_0_2; }
		
		//{ModelAttributeRemovedChange} 'removed' 'from'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ModelAttributeRemovedChange}
		public Action getModelAttributeRemovedChangeAction_1_1_0() { return cModelAttributeRemovedChangeAction_1_1_0; }
		
		//'removed'
		public Keyword getRemovedKeyword_1_1_1() { return cRemovedKeyword_1_1_1; }
		
		//'from'
		public Keyword getFromKeyword_1_1_2() { return cFromKeyword_1_1_2; }
		
		//{ModelAttributeReplacedChange} 'replaced' 'at'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ModelAttributeReplacedChange}
		public Action getModelAttributeReplacedChangeAction_1_2_0() { return cModelAttributeReplacedChangeAction_1_2_0; }
		
		//'replaced'
		public Keyword getReplacedKeyword_1_2_1() { return cReplacedKeyword_1_2_1; }
		
		//'at'
		public Keyword getAtKeyword_1_2_2() { return cAtKeyword_1_2_2; }
		
		//feature=MetaclassEAttributeReference
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//MetaclassEAttributeReference
		public RuleCall getFeatureMetaclassEAttributeReferenceParserRuleCall_2_0() { return cFeatureMetaclassEAttributeReferenceParserRuleCall_2_0; }
		
		//('with' precondition=XExpression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }
		
		//precondition=XExpression
		public Assignment getPreconditionAssignment_3_1() { return cPreconditionAssignment_3_1; }
		
		//XExpression
		public RuleCall getPreconditionXExpressionParserRuleCall_3_1_0() { return cPreconditionXExpressionParserRuleCall_3_1_0; }
	}
	public class ArbitraryModelChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ArbitraryModelChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArbitraryModelChangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnychangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPreconditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPreconditionXExpressionParserRuleCall_2_1_0 = (RuleCall)cPreconditionAssignment_2_1.eContents().get(0);
		
		//ArbitraryModelChange:
		//    {ArbitraryModelChange} 'anychange'
		//    ('with' precondition=XExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArbitraryModelChange} 'anychange'
		//('with' precondition=XExpression)?
		public Group getGroup() { return cGroup; }
		
		//{ArbitraryModelChange}
		public Action getArbitraryModelChangeAction_0() { return cArbitraryModelChangeAction_0; }
		
		//'anychange'
		public Keyword getAnychangeKeyword_1() { return cAnychangeKeyword_1; }
		
		//('with' precondition=XExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//precondition=XExpression
		public Assignment getPreconditionAssignment_2_1() { return cPreconditionAssignment_2_1; }
		
		//XExpression
		public RuleCall getPreconditionXExpressionParserRuleCall_2_1_0() { return cPreconditionXExpressionParserRuleCall_2_1_0; }
	}
	public class ElementExistenceChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementExistenceChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementCreationChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementDeletionChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// *********** Atomic element changes ***********
		//ElementExistenceChangeType returns ElementExistenceChangeType:
		//    ElementCreationChangeType | ElementDeletionChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementCreationChangeType | ElementDeletionChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementCreationChangeType
		public RuleCall getElementCreationChangeTypeParserRuleCall_0() { return cElementCreationChangeTypeParserRuleCall_0; }
		
		//ElementDeletionChangeType
		public RuleCall getElementDeletionChangeTypeParserRuleCall_1() { return cElementDeletionChangeTypeParserRuleCall_1; }
	}
	public class ElementUsageChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementUsageChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementInsertionChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementRemovalChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementReplacementChangeTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementUsageChangeType returns ModelElementUsageChangeType:
		//    ElementInsertionChangeType | ElementRemovalChangeType | ElementReplacementChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementInsertionChangeType | ElementRemovalChangeType | ElementReplacementChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementInsertionChangeType
		public RuleCall getElementInsertionChangeTypeParserRuleCall_0() { return cElementInsertionChangeTypeParserRuleCall_0; }
		
		//ElementRemovalChangeType
		public RuleCall getElementRemovalChangeTypeParserRuleCall_1() { return cElementRemovalChangeTypeParserRuleCall_1; }
		
		//ElementReplacementChangeType
		public RuleCall getElementReplacementChangeTypeParserRuleCall_2() { return cElementReplacementChangeTypeParserRuleCall_2; }
	}
	public class ElementCreationChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementCreationChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreatedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cElementCreationChangeTypeAction_1 = (Action)cGroup.eContents().get(1);
		
		//ElementCreationChangeType returns ElementCreationChangeType:
		//    'created' {ElementCreationChangeType};
		@Override public ParserRule getRule() { return rule; }
		
		//'created' {ElementCreationChangeType}
		public Group getGroup() { return cGroup; }
		
		//'created'
		public Keyword getCreatedKeyword_0() { return cCreatedKeyword_0; }
		
		//{ElementCreationChangeType}
		public Action getElementCreationChangeTypeAction_1() { return cElementCreationChangeTypeAction_1; }
	}
	public class ElementDeletionChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementDeletionChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeletedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cElementDeletionChangeTypeAction_1 = (Action)cGroup.eContents().get(1);
		
		//ElementDeletionChangeType returns ElementDeletionChangeType:
		//    'deleted' {ElementDeletionChangeType};
		@Override public ParserRule getRule() { return rule; }
		
		//'deleted' {ElementDeletionChangeType}
		public Group getGroup() { return cGroup; }
		
		//'deleted'
		public Keyword getDeletedKeyword_0() { return cDeletedKeyword_0; }
		
		//{ElementDeletionChangeType}
		public Action getElementDeletionChangeTypeAction_1() { return cElementDeletionChangeTypeAction_1; }
	}
	public class ElementReferenceChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementReferenceChangeType");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFeatureMetaclassEReferenceReferenceParserRuleCall_0 = (RuleCall)cFeatureAssignment.eContents().get(0);
		
		//fragment ElementReferenceChangeType:
		//    feature=MetaclassEReferenceReference;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=MetaclassEReferenceReference
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }
		
		//MetaclassEReferenceReference
		public RuleCall getFeatureMetaclassEReferenceReferenceParserRuleCall_0() { return cFeatureMetaclassEReferenceReferenceParserRuleCall_0; }
	}
	public class ElementRootChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementRootChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementInsertionAsRootChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementRemovalAsRootChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// This is just for a complete type hierarchy
		//ElementRootChangeType returns ElementRootChangeType:
		//    ElementInsertionAsRootChangeType | ElementRemovalAsRootChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementInsertionAsRootChangeType | ElementRemovalAsRootChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementInsertionAsRootChangeType
		public RuleCall getElementInsertionAsRootChangeTypeParserRuleCall_0() { return cElementInsertionAsRootChangeTypeParserRuleCall_0; }
		
		//ElementRemovalAsRootChangeType
		public RuleCall getElementRemovalAsRootChangeTypeParserRuleCall_1() { return cElementRemovalAsRootChangeTypeParserRuleCall_1; }
	}
	public class ElementInsertionChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementInsertionChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementInsertionInListChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementInsertionAsRootChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementInsertionChangeType:
		//    (ElementInsertionInListChangeType | ElementInsertionAsRootChangeType);
		@Override public ParserRule getRule() { return rule; }
		
		//(ElementInsertionInListChangeType | ElementInsertionAsRootChangeType)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementInsertionInListChangeType
		public RuleCall getElementInsertionInListChangeTypeParserRuleCall_0() { return cElementInsertionInListChangeTypeParserRuleCall_0; }
		
		//ElementInsertionAsRootChangeType
		public RuleCall getElementInsertionAsRootChangeTypeParserRuleCall_1() { return cElementInsertionAsRootChangeTypeParserRuleCall_1; }
	}
	public class ElementInsertionInListChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementInsertionInListChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cElementReferenceChangeTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ElementInsertionInListChangeType:
		//    'inserted' 'in' ElementReferenceChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//'inserted' 'in' ElementReferenceChangeType
		public Group getGroup() { return cGroup; }
		
		//'inserted'
		public Keyword getInsertedKeyword_0() { return cInsertedKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//ElementReferenceChangeType
		public RuleCall getElementReferenceChangeTypeParserRuleCall_2() { return cElementReferenceChangeTypeParserRuleCall_2; }
	}
	public class ElementInsertionAsRootChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementInsertionAsRootChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementInsertionAsRootChangeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInsertedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRootKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementInsertionAsRootChangeType:
		//    {ElementInsertionAsRootChangeType} 'inserted' 'as' 'root';
		@Override public ParserRule getRule() { return rule; }
		
		//{ElementInsertionAsRootChangeType} 'inserted' 'as' 'root'
		public Group getGroup() { return cGroup; }
		
		//{ElementInsertionAsRootChangeType}
		public Action getElementInsertionAsRootChangeTypeAction_0() { return cElementInsertionAsRootChangeTypeAction_0; }
		
		//'inserted'
		public Keyword getInsertedKeyword_1() { return cInsertedKeyword_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//'root'
		public Keyword getRootKeyword_3() { return cRootKeyword_3; }
	}
	public class ElementRemovalChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementRemovalChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementRemovalAsRootChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementRemovalFromListChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementRemovalChangeType:
		//    (ElementRemovalAsRootChangeType | ElementRemovalFromListChangeType);
		@Override public ParserRule getRule() { return rule; }
		
		//(ElementRemovalAsRootChangeType | ElementRemovalFromListChangeType)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementRemovalAsRootChangeType
		public RuleCall getElementRemovalAsRootChangeTypeParserRuleCall_0() { return cElementRemovalAsRootChangeTypeParserRuleCall_0; }
		
		//ElementRemovalFromListChangeType
		public RuleCall getElementRemovalFromListChangeTypeParserRuleCall_1() { return cElementRemovalFromListChangeTypeParserRuleCall_1; }
	}
	public class ElementRemovalAsRootChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementRemovalAsRootChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementRemovalAsRootChangeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemovedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRootKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementRemovalAsRootChangeType:
		//    {ElementRemovalAsRootChangeType} 'removed' 'as' 'root';
		@Override public ParserRule getRule() { return rule; }
		
		//{ElementRemovalAsRootChangeType} 'removed' 'as' 'root'
		public Group getGroup() { return cGroup; }
		
		//{ElementRemovalAsRootChangeType}
		public Action getElementRemovalAsRootChangeTypeAction_0() { return cElementRemovalAsRootChangeTypeAction_0; }
		
		//'removed'
		public Keyword getRemovedKeyword_1() { return cRemovedKeyword_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//'root'
		public Keyword getRootKeyword_3() { return cRootKeyword_3; }
	}
	public class ElementRemovalFromListChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementRemovalFromListChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemovedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cElementReferenceChangeTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ElementRemovalFromListChangeType:
		//    'removed' 'from' ElementReferenceChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//'removed' 'from' ElementReferenceChangeType
		public Group getGroup() { return cGroup; }
		
		//'removed'
		public Keyword getRemovedKeyword_0() { return cRemovedKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//ElementReferenceChangeType
		public RuleCall getElementReferenceChangeTypeParserRuleCall_2() { return cElementReferenceChangeTypeParserRuleCall_2; }
	}
	public class ElementReplacementChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementReplacementChangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplacedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cElementReferenceChangeTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ElementReplacementChangeType:
		//    'replaced' 'at' ElementReferenceChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//'replaced' 'at' ElementReferenceChangeType
		public Group getGroup() { return cGroup; }
		
		//'replaced'
		public Keyword getReplacedKeyword_0() { return cReplacedKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//ElementReferenceChangeType
		public RuleCall getElementReferenceChangeTypeParserRuleCall_2() { return cElementReferenceChangeTypeParserRuleCall_2; }
	}
	public class ElementChangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.ElementChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementExistenceChangeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementUsageChangeTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementChangeType returns ElementChangeType:
		//    ElementExistenceChangeType | ElementUsageChangeType;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementExistenceChangeType | ElementUsageChangeType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementExistenceChangeType
		public RuleCall getElementExistenceChangeTypeParserRuleCall_0() { return cElementExistenceChangeTypeParserRuleCall_0; }
		
		//ElementUsageChangeType
		public RuleCall getElementUsageChangeTypeParserRuleCall_1() { return cElementUsageChangeTypeParserRuleCall_1; }
	}
	public class RoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.Routine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cRoutineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOverrideImportPathAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOverrideImportPathRoutineOverrideImportPathParserRuleCall_2_0_0 = (RuleCall)cOverrideImportPathAssignment_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cInputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputRoutineInputParserRuleCall_4_0 = (RuleCall)cInputAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMatchBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMatchBlockMatchBlockParserRuleCall_6_0 = (RuleCall)cMatchBlockAssignment_6.eContents().get(0);
		private final Assignment cCreateBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCreateBlockCreateBlockParserRuleCall_7_0 = (RuleCall)cCreateBlockAssignment_7.eContents().get(0);
		private final Assignment cUpdateBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cUpdateBlockUpdateBlockParserRuleCall_8_0 = (RuleCall)cUpdateBlockAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// ***************************************
		//// *********** REPAIR ROUTINES ***********
		//// ***************************************
		//Routine returns toplevelelements::Routine:
		//    (documentation=ML_COMMENT)?
		//    'routine' (overrideImportPath=RoutineOverrideImportPath '::')? name=ValidID input=RoutineInput '{'
		//    matchBlock=MatchBlock?
		//    createBlock=CreateBlock?
		//    updateBlock=UpdateBlock?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//(documentation=ML_COMMENT)?
		//'routine' (overrideImportPath=RoutineOverrideImportPath '::')? name=ValidID input=RoutineInput '{'
		//matchBlock=MatchBlock?
		//createBlock=CreateBlock?
		//updateBlock=UpdateBlock?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(documentation=ML_COMMENT)?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocumentationML_COMMENTTerminalRuleCall_0_0() { return cDocumentationML_COMMENTTerminalRuleCall_0_0; }
		
		//'routine'
		public Keyword getRoutineKeyword_1() { return cRoutineKeyword_1; }
		
		//(overrideImportPath=RoutineOverrideImportPath '::')?
		public Group getGroup_2() { return cGroup_2; }
		
		//overrideImportPath=RoutineOverrideImportPath
		public Assignment getOverrideImportPathAssignment_2_0() { return cOverrideImportPathAssignment_2_0; }
		
		//RoutineOverrideImportPath
		public RuleCall getOverrideImportPathRoutineOverrideImportPathParserRuleCall_2_0_0() { return cOverrideImportPathRoutineOverrideImportPathParserRuleCall_2_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2_1() { return cColonColonKeyword_2_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//input=RoutineInput
		public Assignment getInputAssignment_4() { return cInputAssignment_4; }
		
		//RoutineInput
		public RuleCall getInputRoutineInputParserRuleCall_4_0() { return cInputRoutineInputParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//matchBlock=MatchBlock?
		public Assignment getMatchBlockAssignment_6() { return cMatchBlockAssignment_6; }
		
		//MatchBlock
		public RuleCall getMatchBlockMatchBlockParserRuleCall_6_0() { return cMatchBlockMatchBlockParserRuleCall_6_0; }
		
		//createBlock=CreateBlock?
		public Assignment getCreateBlockAssignment_7() { return cCreateBlockAssignment_7; }
		
		//CreateBlock
		public RuleCall getCreateBlockCreateBlockParserRuleCall_7_0() { return cCreateBlockCreateBlockParserRuleCall_7_0; }
		
		//updateBlock=UpdateBlock?
		public Assignment getUpdateBlockAssignment_8() { return cUpdateBlockAssignment_8; }
		
		//UpdateBlock
		public RuleCall getUpdateBlockUpdateBlockParserRuleCall_8_0() { return cUpdateBlockUpdateBlockParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class RoutineOverrideImportPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RoutineOverrideImportPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReactionsSegmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReactionsSegmentReactionsSegmentCrossReference_0_0 = (CrossReference)cReactionsSegmentAssignment_0.eContents().get(0);
		private final RuleCall cReactionsSegmentReactionsSegmentIDTerminalRuleCall_0_0_1 = (RuleCall)cReactionsSegmentReactionsSegmentCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRoutineOverrideImportPathParentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cReactionsSegmentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cReactionsSegmentReactionsSegmentCrossReference_1_2_0 = (CrossReference)cReactionsSegmentAssignment_1_2.eContents().get(0);
		private final RuleCall cReactionsSegmentReactionsSegmentIDTerminalRuleCall_1_2_0_1 = (RuleCall)cReactionsSegmentReactionsSegmentCrossReference_1_2_0.eContents().get(1);
		
		//RoutineOverrideImportPath returns toplevelelements::RoutineOverrideImportPath:
		//    reactionsSegment=[toplevelelements::ReactionsSegment] ({toplevelelements::RoutineOverrideImportPath.parent=current}
		//    '.' reactionsSegment=[toplevelelements::ReactionsSegment])*;
		@Override public ParserRule getRule() { return rule; }
		
		//reactionsSegment=[toplevelelements::ReactionsSegment] ({toplevelelements::RoutineOverrideImportPath.parent=current}
		//'.' reactionsSegment=[toplevelelements::ReactionsSegment])*
		public Group getGroup() { return cGroup; }
		
		//reactionsSegment=[toplevelelements::ReactionsSegment]
		public Assignment getReactionsSegmentAssignment_0() { return cReactionsSegmentAssignment_0; }
		
		//[toplevelelements::ReactionsSegment]
		public CrossReference getReactionsSegmentReactionsSegmentCrossReference_0_0() { return cReactionsSegmentReactionsSegmentCrossReference_0_0; }
		
		//ID
		public RuleCall getReactionsSegmentReactionsSegmentIDTerminalRuleCall_0_0_1() { return cReactionsSegmentReactionsSegmentIDTerminalRuleCall_0_0_1; }
		
		//({toplevelelements::RoutineOverrideImportPath.parent=current}
		//   '.' reactionsSegment=[toplevelelements::ReactionsSegment])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{toplevelelements::RoutineOverrideImportPath.parent=current}
		public Action getRoutineOverrideImportPathParentAction_1_0() { return cRoutineOverrideImportPathParentAction_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//reactionsSegment=[toplevelelements::ReactionsSegment]
		public Assignment getReactionsSegmentAssignment_1_2() { return cReactionsSegmentAssignment_1_2; }
		
		//[toplevelelements::ReactionsSegment]
		public CrossReference getReactionsSegmentReactionsSegmentCrossReference_1_2_0() { return cReactionsSegmentReactionsSegmentCrossReference_1_2_0; }
		
		//ID
		public RuleCall getReactionsSegmentReactionsSegmentIDTerminalRuleCall_1_2_0_1() { return cReactionsSegmentReactionsSegmentIDTerminalRuleCall_1_2_0_1; }
	}
	public class RoutineInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RoutineInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cModelInputElementsAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cModelInputElementsNamedMetaclassReferenceParserRuleCall_2_0_0_0 = (RuleCall)cModelInputElementsAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Keyword cPlainKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cJavaInputElementsAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cJavaInputElementsNamedJavaElementReferenceParserRuleCall_2_0_1_1_0 = (RuleCall)cJavaInputElementsAssignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Assignment cModelInputElementsAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cModelInputElementsNamedMetaclassReferenceParserRuleCall_2_1_1_0_0 = (RuleCall)cModelInputElementsAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cAlternatives_2_1_1.eContents().get(1);
		private final Keyword cPlainKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cJavaInputElementsAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cJavaInputElementsNamedJavaElementReferenceParserRuleCall_2_1_1_1_1_0 = (RuleCall)cJavaInputElementsAssignment_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RoutineInput returns toplevelelements::RoutineInput:
		//    {toplevelelements::RoutineInput}
		//    '(' ((modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference)
		//    (',' (modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference))*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{toplevelelements::RoutineInput}
		//'(' ((modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference)
		//(',' (modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference))*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{toplevelelements::RoutineInput}
		public Action getRoutineInputAction_0() { return cRoutineInputAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference)
		//   (',' (modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference))*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//(modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//modelInputElements+=NamedMetaclassReference
		public Assignment getModelInputElementsAssignment_2_0_0() { return cModelInputElementsAssignment_2_0_0; }
		
		//NamedMetaclassReference
		public RuleCall getModelInputElementsNamedMetaclassReferenceParserRuleCall_2_0_0_0() { return cModelInputElementsNamedMetaclassReferenceParserRuleCall_2_0_0_0; }
		
		//"plain" javaInputElements+=NamedJavaElementReference
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//"plain"
		public Keyword getPlainKeyword_2_0_1_0() { return cPlainKeyword_2_0_1_0; }
		
		//javaInputElements+=NamedJavaElementReference
		public Assignment getJavaInputElementsAssignment_2_0_1_1() { return cJavaInputElementsAssignment_2_0_1_1; }
		
		//NamedJavaElementReference
		public RuleCall getJavaInputElementsNamedJavaElementReferenceParserRuleCall_2_0_1_1_0() { return cJavaInputElementsNamedJavaElementReferenceParserRuleCall_2_0_1_1_0; }
		
		//(',' (modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference))*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//(modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference)
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//modelInputElements+=NamedMetaclassReference
		public Assignment getModelInputElementsAssignment_2_1_1_0() { return cModelInputElementsAssignment_2_1_1_0; }
		
		//NamedMetaclassReference
		public RuleCall getModelInputElementsNamedMetaclassReferenceParserRuleCall_2_1_1_0_0() { return cModelInputElementsNamedMetaclassReferenceParserRuleCall_2_1_1_0_0; }
		
		//"plain" javaInputElements+=NamedJavaElementReference
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }
		
		//"plain"
		public Keyword getPlainKeyword_2_1_1_1_0() { return cPlainKeyword_2_1_1_1_0; }
		
		//javaInputElements+=NamedJavaElementReference
		public Assignment getJavaInputElementsAssignment_2_1_1_1_1() { return cJavaInputElementsAssignment_2_1_1_1_1; }
		
		//NamedJavaElementReference
		public RuleCall getJavaInputElementsNamedJavaElementReferenceParserRuleCall_2_1_1_1_1_0() { return cJavaInputElementsNamedJavaElementReferenceParserRuleCall_2_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MatchBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MatchBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMatchBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMatchStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMatchStatementsMatchStatementParserRuleCall_3_0 = (RuleCall)cMatchStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// *********** MATCH ***********
		//MatchBlock returns toplevelelements::MatchBlock:
		//    {toplevelelements::MatchBlock}
		//    'match' '{'
		//    (matchStatements+=MatchStatement)+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{toplevelelements::MatchBlock}
		//'match' '{'
		//(matchStatements+=MatchStatement)+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{toplevelelements::MatchBlock}
		public Action getMatchBlockAction_0() { return cMatchBlockAction_0; }
		
		//'match'
		public Keyword getMatchKeyword_1() { return cMatchKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(matchStatements+=MatchStatement)+
		public Assignment getMatchStatementsAssignment_3() { return cMatchStatementsAssignment_3; }
		
		//MatchStatement
		public RuleCall getMatchStatementsMatchStatementParserRuleCall_3_0() { return cMatchStatementsMatchStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MatchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MatchStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRetrieveOrRequireAbscenceOfModelElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatchCheckStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MatchStatement returns toplevelelements::MatchStatement:
		//    RetrieveOrRequireAbscenceOfModelElement | MatchCheckStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//RetrieveOrRequireAbscenceOfModelElement | MatchCheckStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RetrieveOrRequireAbscenceOfModelElement
		public RuleCall getRetrieveOrRequireAbscenceOfModelElementParserRuleCall_0() { return cRetrieveOrRequireAbscenceOfModelElementParserRuleCall_0; }
		
		//MatchCheckStatement
		public RuleCall getMatchCheckStatementParserRuleCall_1() { return cMatchCheckStatementParserRuleCall_1; }
	}
	public class RetrieveOrRequireAbscenceOfModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RetrieveOrRequireAbscenceOfModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequireAbscenceOfModelElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRetrieveModelElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RetrieveOrRequireAbscenceOfModelElement:
		//    (RequireAbscenceOfModelElement | RetrieveModelElement);
		@Override public ParserRule getRule() { return rule; }
		
		//(RequireAbscenceOfModelElement | RetrieveModelElement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RequireAbscenceOfModelElement
		public RuleCall getRequireAbscenceOfModelElementParserRuleCall_0() { return cRequireAbscenceOfModelElementParserRuleCall_0; }
		
		//RetrieveModelElement
		public RuleCall getRetrieveModelElementParserRuleCall_1() { return cRetrieveModelElementParserRuleCall_1; }
	}
	public class RequireAbscenceOfModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RequireAbscenceOfModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequireAbscenceOfModelElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequireKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAbsenceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementTypeUnnamedMetaclassReferenceParserRuleCall_4_0 = (RuleCall)cElementTypeAssignment_4.eContents().get(0);
		private final Keyword cCorrespondingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCorrespondenceSourceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCorrespondenceSourceXExpressionParserRuleCall_7_0 = (RuleCall)cCorrespondenceSourceAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cTaggedKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTagAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTagXExpressionParserRuleCall_8_1_0 = (RuleCall)cTagAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWithKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cPreconditionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cPreconditionXExpressionParserRuleCall_9_1_0 = (RuleCall)cPreconditionAssignment_9_1.eContents().get(0);
		
		//RequireAbscenceOfModelElement returns RequireAbscenceOfModelElement:
		//    {RequireAbscenceOfModelElement}
		//    'require' 'absence' 'of' elementType=UnnamedMetaclassReference
		//    'corresponding' 'to' correspondenceSource=XExpression ('tagged' tag=XExpression)?
		//    ('with' precondition=XExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RequireAbscenceOfModelElement}
		//'require' 'absence' 'of' elementType=UnnamedMetaclassReference
		//'corresponding' 'to' correspondenceSource=XExpression ('tagged' tag=XExpression)?
		//('with' precondition=XExpression)?
		public Group getGroup() { return cGroup; }
		
		//{RequireAbscenceOfModelElement}
		public Action getRequireAbscenceOfModelElementAction_0() { return cRequireAbscenceOfModelElementAction_0; }
		
		//'require'
		public Keyword getRequireKeyword_1() { return cRequireKeyword_1; }
		
		//'absence'
		public Keyword getAbsenceKeyword_2() { return cAbsenceKeyword_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//elementType=UnnamedMetaclassReference
		public Assignment getElementTypeAssignment_4() { return cElementTypeAssignment_4; }
		
		//UnnamedMetaclassReference
		public RuleCall getElementTypeUnnamedMetaclassReferenceParserRuleCall_4_0() { return cElementTypeUnnamedMetaclassReferenceParserRuleCall_4_0; }
		
		//'corresponding'
		public Keyword getCorrespondingKeyword_5() { return cCorrespondingKeyword_5; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//correspondenceSource=XExpression
		public Assignment getCorrespondenceSourceAssignment_7() { return cCorrespondenceSourceAssignment_7; }
		
		//XExpression
		public RuleCall getCorrespondenceSourceXExpressionParserRuleCall_7_0() { return cCorrespondenceSourceXExpressionParserRuleCall_7_0; }
		
		//('tagged' tag=XExpression)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'tagged'
		public Keyword getTaggedKeyword_8_0() { return cTaggedKeyword_8_0; }
		
		//tag=XExpression
		public Assignment getTagAssignment_8_1() { return cTagAssignment_8_1; }
		
		//XExpression
		public RuleCall getTagXExpressionParserRuleCall_8_1_0() { return cTagXExpressionParserRuleCall_8_1_0; }
		
		//('with' precondition=XExpression)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'with'
		public Keyword getWithKeyword_9_0() { return cWithKeyword_9_0; }
		
		//precondition=XExpression
		public Assignment getPreconditionAssignment_9_1() { return cPreconditionAssignment_9_1; }
		
		//XExpression
		public RuleCall getPreconditionXExpressionParserRuleCall_9_1_0() { return cPreconditionXExpressionParserRuleCall_9_1_0; }
	}
	public class RetrieveModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RetrieveModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRetrieveModelElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cValKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRetrieveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRetrievalTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRetrievalTypeRetrieveModelElementTypeStatementParserRuleCall_3_0 = (RuleCall)cRetrievalTypeAssignment_3.eContents().get(0);
		private final Assignment cElementTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementTypeUnnamedMetaclassReferenceParserRuleCall_4_0 = (RuleCall)cElementTypeAssignment_4.eContents().get(0);
		private final Keyword cCorrespondingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCorrespondenceSourceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCorrespondenceSourceXExpressionParserRuleCall_7_0 = (RuleCall)cCorrespondenceSourceAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cTaggedKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTagAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTagXExpressionParserRuleCall_8_1_0 = (RuleCall)cTagAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWithKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cPreconditionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cPreconditionXExpressionParserRuleCall_9_1_0 = (RuleCall)cPreconditionAssignment_9_1.eContents().get(0);
		
		//RetrieveModelElement:
		//    {RetrieveModelElement}
		//    ('val' name=ValidID '=')?
		//    'retrieve' retrievalType=RetrieveModelElementTypeStatement elementType=UnnamedMetaclassReference
		//    'corresponding' 'to' correspondenceSource=XExpression ('tagged' tag=XExpression)?
		//    ('with' precondition=XExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RetrieveModelElement}
		//('val' name=ValidID '=')?
		//'retrieve' retrievalType=RetrieveModelElementTypeStatement elementType=UnnamedMetaclassReference
		//'corresponding' 'to' correspondenceSource=XExpression ('tagged' tag=XExpression)?
		//('with' precondition=XExpression)?
		public Group getGroup() { return cGroup; }
		
		//{RetrieveModelElement}
		public Action getRetrieveModelElementAction_0() { return cRetrieveModelElementAction_0; }
		
		//('val' name=ValidID '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'val'
		public Keyword getValKeyword_1_0() { return cValKeyword_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0() { return cNameValidIDParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//'retrieve'
		public Keyword getRetrieveKeyword_2() { return cRetrieveKeyword_2; }
		
		//retrievalType=RetrieveModelElementTypeStatement
		public Assignment getRetrievalTypeAssignment_3() { return cRetrievalTypeAssignment_3; }
		
		//RetrieveModelElementTypeStatement
		public RuleCall getRetrievalTypeRetrieveModelElementTypeStatementParserRuleCall_3_0() { return cRetrievalTypeRetrieveModelElementTypeStatementParserRuleCall_3_0; }
		
		//elementType=UnnamedMetaclassReference
		public Assignment getElementTypeAssignment_4() { return cElementTypeAssignment_4; }
		
		//UnnamedMetaclassReference
		public RuleCall getElementTypeUnnamedMetaclassReferenceParserRuleCall_4_0() { return cElementTypeUnnamedMetaclassReferenceParserRuleCall_4_0; }
		
		//'corresponding'
		public Keyword getCorrespondingKeyword_5() { return cCorrespondingKeyword_5; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//correspondenceSource=XExpression
		public Assignment getCorrespondenceSourceAssignment_7() { return cCorrespondenceSourceAssignment_7; }
		
		//XExpression
		public RuleCall getCorrespondenceSourceXExpressionParserRuleCall_7_0() { return cCorrespondenceSourceXExpressionParserRuleCall_7_0; }
		
		//('tagged' tag=XExpression)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'tagged'
		public Keyword getTaggedKeyword_8_0() { return cTaggedKeyword_8_0; }
		
		//tag=XExpression
		public Assignment getTagAssignment_8_1() { return cTagAssignment_8_1; }
		
		//XExpression
		public RuleCall getTagXExpressionParserRuleCall_8_1_0() { return cTagXExpressionParserRuleCall_8_1_0; }
		
		//('with' precondition=XExpression)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'with'
		public Keyword getWithKeyword_9_0() { return cWithKeyword_9_0; }
		
		//precondition=XExpression
		public Assignment getPreconditionAssignment_9_1() { return cPreconditionAssignment_9_1; }
		
		//XExpression
		public RuleCall getPreconditionXExpressionParserRuleCall_9_1_0() { return cPreconditionXExpressionParserRuleCall_9_1_0; }
	}
	public class RetrieveModelElementTypeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.RetrieveModelElementTypeStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRetrieveOneModelElementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cOptionalAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_1_0_0 = (Keyword)cOptionalAssignment_0_1_0.eContents().get(0);
		private final Assignment cAssertedAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final Keyword cAssertedAssertedKeyword_0_1_1_0 = (Keyword)cAssertedAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRetrieveManyModelElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cManyKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//RetrieveModelElementTypeStatement returns RetrieveModelElementType:
		//    {RetrieveOneModelElement} (optional?='optional' | asserted?='asserted')? |
		//    {RetrieveManyModelElements} 'many';
		@Override public ParserRule getRule() { return rule; }
		
		//{RetrieveOneModelElement} (optional?='optional' | asserted?='asserted')? |
		//{RetrieveManyModelElements} 'many'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RetrieveOneModelElement} (optional?='optional' | asserted?='asserted')?
		public Group getGroup_0() { return cGroup_0; }
		
		//{RetrieveOneModelElement}
		public Action getRetrieveOneModelElementAction_0_0() { return cRetrieveOneModelElementAction_0_0; }
		
		//(optional?='optional' | asserted?='asserted')?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//optional?='optional'
		public Assignment getOptionalAssignment_0_1_0() { return cOptionalAssignment_0_1_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_0_1_0_0() { return cOptionalOptionalKeyword_0_1_0_0; }
		
		//asserted?='asserted'
		public Assignment getAssertedAssignment_0_1_1() { return cAssertedAssignment_0_1_1; }
		
		//'asserted'
		public Keyword getAssertedAssertedKeyword_0_1_1_0() { return cAssertedAssertedKeyword_0_1_1_0; }
		
		//{RetrieveManyModelElements} 'many'
		public Group getGroup_1() { return cGroup_1; }
		
		//{RetrieveManyModelElements}
		public Action getRetrieveManyModelElementsAction_1_0() { return cRetrieveManyModelElementsAction_1_0; }
		
		//'many'
		public Keyword getManyKeyword_1_1() { return cManyKeyword_1_1; }
	}
	public class MatchCheckStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MatchCheckStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMatchCheckStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssertedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAssertedAssertedKeyword_2_0 = (Keyword)cAssertedAssignment_2.eContents().get(0);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionXExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		
		//MatchCheckStatement:
		//    {MatchCheckStatement}
		//    'check' (asserted?='asserted')? condition=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{MatchCheckStatement}
		//'check' (asserted?='asserted')? condition=XExpression
		public Group getGroup() { return cGroup; }
		
		//{MatchCheckStatement}
		public Action getMatchCheckStatementAction_0() { return cMatchCheckStatementAction_0; }
		
		//'check'
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }
		
		//(asserted?='asserted')?
		public Assignment getAssertedAssignment_2() { return cAssertedAssignment_2; }
		
		//'asserted'
		public Keyword getAssertedAssertedKeyword_2_0() { return cAssertedAssertedKeyword_2_0; }
		
		//condition=XExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_3_0() { return cConditionXExpressionParserRuleCall_3_0; }
	}
	public class CreateBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.CreateBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCreateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCreateStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCreateStatementsCreateStatementParserRuleCall_3_0 = (RuleCall)cCreateStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// *********** CREATE ***********
		//CreateBlock returns toplevelelements::CreateBlock:
		//    {toplevelelements::CreateBlock}
		//    'create' '{'
		//    createStatements+=CreateStatement*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{toplevelelements::CreateBlock}
		//'create' '{'
		//createStatements+=CreateStatement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{toplevelelements::CreateBlock}
		public Action getCreateBlockAction_0() { return cCreateBlockAction_0; }
		
		//'create'
		public Keyword getCreateKeyword_1() { return cCreateKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//createStatements+=CreateStatement*
		public Assignment getCreateStatementsAssignment_3() { return cCreateStatementsAssignment_3; }
		
		//CreateStatement
		public RuleCall getCreateStatementsCreateStatementParserRuleCall_3_0() { return cCreateStatementsCreateStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CreateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.CreateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNewKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cMetaclassReferenceParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//CreateStatement returns common::NamedMetaclassReference:
		//    'val' name=ValidID '=' 'new' MetaclassReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'val' name=ValidID '=' 'new' MetaclassReference
		public Group getGroup() { return cGroup; }
		
		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'new'
		public Keyword getNewKeyword_3() { return cNewKeyword_3; }
		
		//MetaclassReference
		public RuleCall getMetaclassReferenceParserRuleCall_4() { return cMetaclassReferenceParserRuleCall_4; }
	}
	public class UpdateBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.UpdateBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeXExpressionParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//// *********** UPDATE ***********
		//UpdateBlock returns toplevelelements::UpdateBlock:
		//    'update' code=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'update' code=XExpression
		public Group getGroup() { return cGroup; }
		
		//'update'
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }
		
		//code=XExpression
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//XExpression
		public RuleCall getCodeXExpressionParserRuleCall_1_0() { return cCodeXExpressionParserRuleCall_1_0; }
	}
	public class MetaclassReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MetaclassReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMetamodelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cMetamodelMetamodelImportCrossReference_0_0_0 = (CrossReference)cMetamodelAssignment_0_0.eContents().get(0);
		private final RuleCall cMetamodelMetamodelImportIDTerminalRuleCall_0_0_0_1 = (RuleCall)cMetamodelMetamodelImportCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMetaclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetaclassEClassifierCrossReference_1_0 = (CrossReference)cMetaclassAssignment_1.eContents().get(0);
		private final RuleCall cMetaclassEClassifierQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cMetaclassEClassifierCrossReference_1_0.eContents().get(1);
		
		//// ****** CODE BLOCKS ******
		//fragment MetaclassReference returns common::MetaclassReference:
		//    (metamodel=[common::MetamodelImport] '::')? metaclass=[ecore::EClassifier|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//(metamodel=[common::MetamodelImport] '::')? metaclass=[ecore::EClassifier|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//(metamodel=[common::MetamodelImport] '::')?
		public Group getGroup_0() { return cGroup_0; }
		
		//metamodel=[common::MetamodelImport]
		public Assignment getMetamodelAssignment_0_0() { return cMetamodelAssignment_0_0; }
		
		//[common::MetamodelImport]
		public CrossReference getMetamodelMetamodelImportCrossReference_0_0_0() { return cMetamodelMetamodelImportCrossReference_0_0_0; }
		
		//ID
		public RuleCall getMetamodelMetamodelImportIDTerminalRuleCall_0_0_0_1() { return cMetamodelMetamodelImportIDTerminalRuleCall_0_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//metaclass=[ecore::EClassifier|QualifiedName]
		public Assignment getMetaclassAssignment_1() { return cMetaclassAssignment_1; }
		
		//[ecore::EClassifier|QualifiedName]
		public CrossReference getMetaclassEClassifierCrossReference_1_0() { return cMetaclassEClassifierCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getMetaclassEClassifierQualifiedNameParserRuleCall_1_0_1() { return cMetaclassEClassifierQualifiedNameParserRuleCall_1_0_1; }
	}
	public class UnnamedMetaclassReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.UnnamedMetaclassReference");
		private final RuleCall cMetaclassReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnnamedMetaclassReference returns common::MetaclassReference:
		//    MetaclassReference;
		@Override public ParserRule getRule() { return rule; }
		
		//MetaclassReference
		public RuleCall getMetaclassReferenceParserRuleCall() { return cMetaclassReferenceParserRuleCall; }
	}
	public class NamedMetaclassReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.NamedMetaclassReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMetaclassReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NamedMetaclassReference returns common::NamedMetaclassReference:
		//    MetaclassReference name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//MetaclassReference name=ValidID
		public Group getGroup() { return cGroup; }
		
		//MetaclassReference
		public RuleCall getMetaclassReferenceParserRuleCall_0() { return cMetaclassReferenceParserRuleCall_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class NamedJavaElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.NamedJavaElementReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//NamedJavaElementReference returns toplevelelements::NamedJavaElementReference:
		//    type=JvmTypeReference 'as' name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=JvmTypeReference 'as' name=ValidID
		public Group getGroup() { return cGroup; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}
	public class MetaclassEAttributeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MetaclassEAttributeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMetaclassReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureEAttributeCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureEAttributeValidIDParserRuleCall_2_0_1 = (RuleCall)cFeatureEAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MetaclassEAttributeReference returns common::MetaclassEAttributeReference:
		//    MetaclassReference '[' feature=[ecore::EAttribute|ValidID] ']';
		@Override public ParserRule getRule() { return rule; }
		
		//MetaclassReference '[' feature=[ecore::EAttribute|ValidID] ']'
		public Group getGroup() { return cGroup; }
		
		//MetaclassReference
		public RuleCall getMetaclassReferenceParserRuleCall_0() { return cMetaclassReferenceParserRuleCall_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//feature=[ecore::EAttribute|ValidID]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//[ecore::EAttribute|ValidID]
		public CrossReference getFeatureEAttributeCrossReference_2_0() { return cFeatureEAttributeCrossReference_2_0; }
		
		//ValidID
		public RuleCall getFeatureEAttributeValidIDParserRuleCall_2_0_1() { return cFeatureEAttributeValidIDParserRuleCall_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class MetaclassEReferenceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.reactions.ReactionsLanguage.MetaclassEReferenceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMetaclassReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureEReferenceCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureEReferenceValidIDParserRuleCall_2_0_1 = (RuleCall)cFeatureEReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MetaclassEReferenceReference returns common::MetaclassEReferenceReference:
		//    MetaclassReference '[' feature=[ecore::EReference|ValidID] ']';
		@Override public ParserRule getRule() { return rule; }
		
		//MetaclassReference '[' feature=[ecore::EReference|ValidID] ']'
		public Group getGroup() { return cGroup; }
		
		//MetaclassReference
		public RuleCall getMetaclassReferenceParserRuleCall_0() { return cMetaclassReferenceParserRuleCall_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//feature=[ecore::EReference|ValidID]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//[ecore::EReference|ValidID]
		public CrossReference getFeatureEReferenceCrossReference_2_0() { return cFeatureEReferenceCrossReference_2_0; }
		
		//ValidID
		public RuleCall getFeatureEReferenceValidIDParserRuleCall_2_0_1() { return cFeatureEReferenceValidIDParserRuleCall_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	
	
	private final ReactionsFileElements pReactionsFile;
	private final MetamodelImportElements pMetamodelImport;
	private final ReactionsSegmentElements pReactionsSegment;
	private final ReactionsImportElements pReactionsImport;
	private final ReactionElements pReaction;
	private final RoutineCallElements pRoutineCall;
	private final TriggerElements pTrigger;
	private final ConcreteModelChangeElements pConcreteModelChange;
	private final ModelElementChangeElements pModelElementChange;
	private final ModelAttributeChangeElements pModelAttributeChange;
	private final ArbitraryModelChangeElements pArbitraryModelChange;
	private final ElementExistenceChangeTypeElements pElementExistenceChangeType;
	private final ElementUsageChangeTypeElements pElementUsageChangeType;
	private final ElementCreationChangeTypeElements pElementCreationChangeType;
	private final ElementDeletionChangeTypeElements pElementDeletionChangeType;
	private final ElementReferenceChangeTypeElements pElementReferenceChangeType;
	private final ElementRootChangeTypeElements pElementRootChangeType;
	private final ElementInsertionChangeTypeElements pElementInsertionChangeType;
	private final ElementInsertionInListChangeTypeElements pElementInsertionInListChangeType;
	private final ElementInsertionAsRootChangeTypeElements pElementInsertionAsRootChangeType;
	private final ElementRemovalChangeTypeElements pElementRemovalChangeType;
	private final ElementRemovalAsRootChangeTypeElements pElementRemovalAsRootChangeType;
	private final ElementRemovalFromListChangeTypeElements pElementRemovalFromListChangeType;
	private final ElementReplacementChangeTypeElements pElementReplacementChangeType;
	private final ElementChangeTypeElements pElementChangeType;
	private final RoutineElements pRoutine;
	private final RoutineOverrideImportPathElements pRoutineOverrideImportPath;
	private final RoutineInputElements pRoutineInput;
	private final MatchBlockElements pMatchBlock;
	private final MatchStatementElements pMatchStatement;
	private final RetrieveOrRequireAbscenceOfModelElementElements pRetrieveOrRequireAbscenceOfModelElement;
	private final RequireAbscenceOfModelElementElements pRequireAbscenceOfModelElement;
	private final RetrieveModelElementElements pRetrieveModelElement;
	private final RetrieveModelElementTypeStatementElements pRetrieveModelElementTypeStatement;
	private final MatchCheckStatementElements pMatchCheckStatement;
	private final CreateBlockElements pCreateBlock;
	private final CreateStatementElements pCreateStatement;
	private final UpdateBlockElements pUpdateBlock;
	private final MetaclassReferenceElements pMetaclassReference;
	private final UnnamedMetaclassReferenceElements pUnnamedMetaclassReference;
	private final NamedMetaclassReferenceElements pNamedMetaclassReference;
	private final NamedJavaElementReferenceElements pNamedJavaElementReference;
	private final MetaclassEAttributeReferenceElements pMetaclassEAttributeReference;
	private final MetaclassEReferenceReferenceElements pMetaclassEReferenceReference;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public ReactionsLanguageGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pReactionsFile = new ReactionsFileElements();
		this.pMetamodelImport = new MetamodelImportElements();
		this.pReactionsSegment = new ReactionsSegmentElements();
		this.pReactionsImport = new ReactionsImportElements();
		this.pReaction = new ReactionElements();
		this.pRoutineCall = new RoutineCallElements();
		this.pTrigger = new TriggerElements();
		this.pConcreteModelChange = new ConcreteModelChangeElements();
		this.pModelElementChange = new ModelElementChangeElements();
		this.pModelAttributeChange = new ModelAttributeChangeElements();
		this.pArbitraryModelChange = new ArbitraryModelChangeElements();
		this.pElementExistenceChangeType = new ElementExistenceChangeTypeElements();
		this.pElementUsageChangeType = new ElementUsageChangeTypeElements();
		this.pElementCreationChangeType = new ElementCreationChangeTypeElements();
		this.pElementDeletionChangeType = new ElementDeletionChangeTypeElements();
		this.pElementReferenceChangeType = new ElementReferenceChangeTypeElements();
		this.pElementRootChangeType = new ElementRootChangeTypeElements();
		this.pElementInsertionChangeType = new ElementInsertionChangeTypeElements();
		this.pElementInsertionInListChangeType = new ElementInsertionInListChangeTypeElements();
		this.pElementInsertionAsRootChangeType = new ElementInsertionAsRootChangeTypeElements();
		this.pElementRemovalChangeType = new ElementRemovalChangeTypeElements();
		this.pElementRemovalAsRootChangeType = new ElementRemovalAsRootChangeTypeElements();
		this.pElementRemovalFromListChangeType = new ElementRemovalFromListChangeTypeElements();
		this.pElementReplacementChangeType = new ElementReplacementChangeTypeElements();
		this.pElementChangeType = new ElementChangeTypeElements();
		this.pRoutine = new RoutineElements();
		this.pRoutineOverrideImportPath = new RoutineOverrideImportPathElements();
		this.pRoutineInput = new RoutineInputElements();
		this.pMatchBlock = new MatchBlockElements();
		this.pMatchStatement = new MatchStatementElements();
		this.pRetrieveOrRequireAbscenceOfModelElement = new RetrieveOrRequireAbscenceOfModelElementElements();
		this.pRequireAbscenceOfModelElement = new RequireAbscenceOfModelElementElements();
		this.pRetrieveModelElement = new RetrieveModelElementElements();
		this.pRetrieveModelElementTypeStatement = new RetrieveModelElementTypeStatementElements();
		this.pMatchCheckStatement = new MatchCheckStatementElements();
		this.pCreateBlock = new CreateBlockElements();
		this.pCreateStatement = new CreateStatementElements();
		this.pUpdateBlock = new UpdateBlockElements();
		this.pMetaclassReference = new MetaclassReferenceElements();
		this.pUnnamedMetaclassReference = new UnnamedMetaclassReferenceElements();
		this.pNamedMetaclassReference = new NamedMetaclassReferenceElements();
		this.pNamedJavaElementReference = new NamedJavaElementReferenceElements();
		this.pMetaclassEAttributeReference = new MetaclassEAttributeReferenceElements();
		this.pMetaclassEReferenceReference = new MetaclassEReferenceReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tools.vitruv.dsls.reactions.ReactionsLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//ReactionsFile returns toplevelelements::ReactionsFile:
	//    (namespaceImports=XImportSection)?
	//    (metamodelImports+=MetamodelImport)*
	//    (reactionsSegments+=ReactionsSegment)+;
	public ReactionsFileElements getReactionsFileAccess() {
		return pReactionsFile;
	}
	
	public ParserRule getReactionsFileRule() {
		return getReactionsFileAccess().getRule();
	}
	
	//MetamodelImport returns common::MetamodelImport:
	//    'import' package=[ecore::EPackage|STRING] 'as' name=ValidID (useQualifiedNames?='using' 'qualified' 'names')?;
	public MetamodelImportElements getMetamodelImportAccess() {
		return pMetamodelImport;
	}
	
	public ParserRule getMetamodelImportRule() {
		return getMetamodelImportAccess().getRule();
	}
	
	//ReactionsSegment returns toplevelelements::ReactionsSegment:
	//    'reactions:' name=ValidID
	//    'in' 'reaction' 'to' 'changes' 'in' fromMetamodels+=[common::MetamodelImport] ('and'
	//    fromMetamodels+=[common::MetamodelImport])*
	//    'execute' 'actions' 'in' toMetamodels+=[common::MetamodelImport] ('and' toMetamodels+=[common::MetamodelImport])*
	//    (reactionsImports+=ReactionsImport)*
	//    (reactions+=Reaction |
	//    routines+=Routine)*;
	public ReactionsSegmentElements getReactionsSegmentAccess() {
		return pReactionsSegment;
	}
	
	public ParserRule getReactionsSegmentRule() {
		return getReactionsSegmentAccess().getRule();
	}
	
	//ReactionsImport returns toplevelelements::ReactionsImport:
	//    'import' (routinesOnly?='routines')? importedReactionsSegment=[toplevelelements::ReactionsSegment]
	//    (useQualifiedNames?='using' 'qualified' 'names')?;
	public ReactionsImportElements getReactionsImportAccess() {
		return pReactionsImport;
	}
	
	public ParserRule getReactionsImportRule() {
		return getReactionsImportAccess().getRule();
	}
	
	//// *********************************
	//// *********** REACTIONS ***********
	//// *********************************
	//Reaction returns toplevelelements::Reaction:
	//    (documentation=ML_COMMENT)?
	//    'reaction' (overriddenReactionsSegment=[toplevelelements::ReactionsSegment] '::')? name=ValidID '{'
	//    trigger=Trigger
	//    callRoutine=RoutineCall
	//    '}';
	public ReactionElements getReactionAccess() {
		return pReaction;
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}
	
	//RoutineCall returns toplevelelements::RoutineCall:
	//    {toplevelelements::RoutineCall}
	//    'call' code=XExpression;
	public RoutineCallElements getRoutineCallAccess() {
		return pRoutineCall;
	}
	
	public ParserRule getRoutineCallRule() {
		return getRoutineCallAccess().getRule();
	}
	
	//// *********** TRIGGER ***********
	//Trigger returns toplevelelements::Trigger:
	//    'after' (ArbitraryModelChange | ConcreteModelChange);
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//ConcreteModelChange:
	//    ModelElementChange | ModelAttributeChange;
	public ConcreteModelChangeElements getConcreteModelChangeAccess() {
		return pConcreteModelChange;
	}
	
	public ParserRule getConcreteModelChangeRule() {
		return getConcreteModelChangeAccess().getRule();
	}
	
	//ModelElementChange:
	//    {ModelElementChange}
	//    'element' (elementType=UnnamedMetaclassReference)? changeType=ElementChangeType
	//    ('with' precondition=XExpression)?;
	public ModelElementChangeElements getModelElementChangeAccess() {
		return pModelElementChange;
	}
	
	public ParserRule getModelElementChangeRule() {
		return getModelElementChangeAccess().getRule();
	}
	
	//ModelAttributeChange:
	//    'attribute' ({ModelAttributeInsertedChange} 'inserted' 'in' |
	//    {ModelAttributeRemovedChange} 'removed' 'from' |
	//    {ModelAttributeReplacedChange} 'replaced' 'at')
	//    feature=MetaclassEAttributeReference
	//    ('with' precondition=XExpression)?;
	public ModelAttributeChangeElements getModelAttributeChangeAccess() {
		return pModelAttributeChange;
	}
	
	public ParserRule getModelAttributeChangeRule() {
		return getModelAttributeChangeAccess().getRule();
	}
	
	//ArbitraryModelChange:
	//    {ArbitraryModelChange} 'anychange'
	//    ('with' precondition=XExpression)?;
	public ArbitraryModelChangeElements getArbitraryModelChangeAccess() {
		return pArbitraryModelChange;
	}
	
	public ParserRule getArbitraryModelChangeRule() {
		return getArbitraryModelChangeAccess().getRule();
	}
	
	//// *********** Atomic element changes ***********
	//ElementExistenceChangeType returns ElementExistenceChangeType:
	//    ElementCreationChangeType | ElementDeletionChangeType;
	public ElementExistenceChangeTypeElements getElementExistenceChangeTypeAccess() {
		return pElementExistenceChangeType;
	}
	
	public ParserRule getElementExistenceChangeTypeRule() {
		return getElementExistenceChangeTypeAccess().getRule();
	}
	
	//ElementUsageChangeType returns ModelElementUsageChangeType:
	//    ElementInsertionChangeType | ElementRemovalChangeType | ElementReplacementChangeType;
	public ElementUsageChangeTypeElements getElementUsageChangeTypeAccess() {
		return pElementUsageChangeType;
	}
	
	public ParserRule getElementUsageChangeTypeRule() {
		return getElementUsageChangeTypeAccess().getRule();
	}
	
	//ElementCreationChangeType returns ElementCreationChangeType:
	//    'created' {ElementCreationChangeType};
	public ElementCreationChangeTypeElements getElementCreationChangeTypeAccess() {
		return pElementCreationChangeType;
	}
	
	public ParserRule getElementCreationChangeTypeRule() {
		return getElementCreationChangeTypeAccess().getRule();
	}
	
	//ElementDeletionChangeType returns ElementDeletionChangeType:
	//    'deleted' {ElementDeletionChangeType};
	public ElementDeletionChangeTypeElements getElementDeletionChangeTypeAccess() {
		return pElementDeletionChangeType;
	}
	
	public ParserRule getElementDeletionChangeTypeRule() {
		return getElementDeletionChangeTypeAccess().getRule();
	}
	
	//fragment ElementReferenceChangeType:
	//    feature=MetaclassEReferenceReference;
	public ElementReferenceChangeTypeElements getElementReferenceChangeTypeAccess() {
		return pElementReferenceChangeType;
	}
	
	public ParserRule getElementReferenceChangeTypeRule() {
		return getElementReferenceChangeTypeAccess().getRule();
	}
	
	//// This is just for a complete type hierarchy
	//ElementRootChangeType returns ElementRootChangeType:
	//    ElementInsertionAsRootChangeType | ElementRemovalAsRootChangeType;
	public ElementRootChangeTypeElements getElementRootChangeTypeAccess() {
		return pElementRootChangeType;
	}
	
	public ParserRule getElementRootChangeTypeRule() {
		return getElementRootChangeTypeAccess().getRule();
	}
	
	//ElementInsertionChangeType:
	//    (ElementInsertionInListChangeType | ElementInsertionAsRootChangeType);
	public ElementInsertionChangeTypeElements getElementInsertionChangeTypeAccess() {
		return pElementInsertionChangeType;
	}
	
	public ParserRule getElementInsertionChangeTypeRule() {
		return getElementInsertionChangeTypeAccess().getRule();
	}
	
	//ElementInsertionInListChangeType:
	//    'inserted' 'in' ElementReferenceChangeType;
	public ElementInsertionInListChangeTypeElements getElementInsertionInListChangeTypeAccess() {
		return pElementInsertionInListChangeType;
	}
	
	public ParserRule getElementInsertionInListChangeTypeRule() {
		return getElementInsertionInListChangeTypeAccess().getRule();
	}
	
	//ElementInsertionAsRootChangeType:
	//    {ElementInsertionAsRootChangeType} 'inserted' 'as' 'root';
	public ElementInsertionAsRootChangeTypeElements getElementInsertionAsRootChangeTypeAccess() {
		return pElementInsertionAsRootChangeType;
	}
	
	public ParserRule getElementInsertionAsRootChangeTypeRule() {
		return getElementInsertionAsRootChangeTypeAccess().getRule();
	}
	
	//ElementRemovalChangeType:
	//    (ElementRemovalAsRootChangeType | ElementRemovalFromListChangeType);
	public ElementRemovalChangeTypeElements getElementRemovalChangeTypeAccess() {
		return pElementRemovalChangeType;
	}
	
	public ParserRule getElementRemovalChangeTypeRule() {
		return getElementRemovalChangeTypeAccess().getRule();
	}
	
	//ElementRemovalAsRootChangeType:
	//    {ElementRemovalAsRootChangeType} 'removed' 'as' 'root';
	public ElementRemovalAsRootChangeTypeElements getElementRemovalAsRootChangeTypeAccess() {
		return pElementRemovalAsRootChangeType;
	}
	
	public ParserRule getElementRemovalAsRootChangeTypeRule() {
		return getElementRemovalAsRootChangeTypeAccess().getRule();
	}
	
	//ElementRemovalFromListChangeType:
	//    'removed' 'from' ElementReferenceChangeType;
	public ElementRemovalFromListChangeTypeElements getElementRemovalFromListChangeTypeAccess() {
		return pElementRemovalFromListChangeType;
	}
	
	public ParserRule getElementRemovalFromListChangeTypeRule() {
		return getElementRemovalFromListChangeTypeAccess().getRule();
	}
	
	//ElementReplacementChangeType:
	//    'replaced' 'at' ElementReferenceChangeType;
	public ElementReplacementChangeTypeElements getElementReplacementChangeTypeAccess() {
		return pElementReplacementChangeType;
	}
	
	public ParserRule getElementReplacementChangeTypeRule() {
		return getElementReplacementChangeTypeAccess().getRule();
	}
	
	//ElementChangeType returns ElementChangeType:
	//    ElementExistenceChangeType | ElementUsageChangeType;
	public ElementChangeTypeElements getElementChangeTypeAccess() {
		return pElementChangeType;
	}
	
	public ParserRule getElementChangeTypeRule() {
		return getElementChangeTypeAccess().getRule();
	}
	
	//// ***************************************
	//// *********** REPAIR ROUTINES ***********
	//// ***************************************
	//Routine returns toplevelelements::Routine:
	//    (documentation=ML_COMMENT)?
	//    'routine' (overrideImportPath=RoutineOverrideImportPath '::')? name=ValidID input=RoutineInput '{'
	//    matchBlock=MatchBlock?
	//    createBlock=CreateBlock?
	//    updateBlock=UpdateBlock?
	//    '}';
	public RoutineElements getRoutineAccess() {
		return pRoutine;
	}
	
	public ParserRule getRoutineRule() {
		return getRoutineAccess().getRule();
	}
	
	//RoutineOverrideImportPath returns toplevelelements::RoutineOverrideImportPath:
	//    reactionsSegment=[toplevelelements::ReactionsSegment] ({toplevelelements::RoutineOverrideImportPath.parent=current}
	//    '.' reactionsSegment=[toplevelelements::ReactionsSegment])*;
	public RoutineOverrideImportPathElements getRoutineOverrideImportPathAccess() {
		return pRoutineOverrideImportPath;
	}
	
	public ParserRule getRoutineOverrideImportPathRule() {
		return getRoutineOverrideImportPathAccess().getRule();
	}
	
	//RoutineInput returns toplevelelements::RoutineInput:
	//    {toplevelelements::RoutineInput}
	//    '(' ((modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference)
	//    (',' (modelInputElements+=NamedMetaclassReference | "plain" javaInputElements+=NamedJavaElementReference))*)? ')';
	public RoutineInputElements getRoutineInputAccess() {
		return pRoutineInput;
	}
	
	public ParserRule getRoutineInputRule() {
		return getRoutineInputAccess().getRule();
	}
	
	//// *********** MATCH ***********
	//MatchBlock returns toplevelelements::MatchBlock:
	//    {toplevelelements::MatchBlock}
	//    'match' '{'
	//    (matchStatements+=MatchStatement)+
	//    '}';
	public MatchBlockElements getMatchBlockAccess() {
		return pMatchBlock;
	}
	
	public ParserRule getMatchBlockRule() {
		return getMatchBlockAccess().getRule();
	}
	
	//MatchStatement returns toplevelelements::MatchStatement:
	//    RetrieveOrRequireAbscenceOfModelElement | MatchCheckStatement;
	public MatchStatementElements getMatchStatementAccess() {
		return pMatchStatement;
	}
	
	public ParserRule getMatchStatementRule() {
		return getMatchStatementAccess().getRule();
	}
	
	//RetrieveOrRequireAbscenceOfModelElement:
	//    (RequireAbscenceOfModelElement | RetrieveModelElement);
	public RetrieveOrRequireAbscenceOfModelElementElements getRetrieveOrRequireAbscenceOfModelElementAccess() {
		return pRetrieveOrRequireAbscenceOfModelElement;
	}
	
	public ParserRule getRetrieveOrRequireAbscenceOfModelElementRule() {
		return getRetrieveOrRequireAbscenceOfModelElementAccess().getRule();
	}
	
	//RequireAbscenceOfModelElement returns RequireAbscenceOfModelElement:
	//    {RequireAbscenceOfModelElement}
	//    'require' 'absence' 'of' elementType=UnnamedMetaclassReference
	//    'corresponding' 'to' correspondenceSource=XExpression ('tagged' tag=XExpression)?
	//    ('with' precondition=XExpression)?;
	public RequireAbscenceOfModelElementElements getRequireAbscenceOfModelElementAccess() {
		return pRequireAbscenceOfModelElement;
	}
	
	public ParserRule getRequireAbscenceOfModelElementRule() {
		return getRequireAbscenceOfModelElementAccess().getRule();
	}
	
	//RetrieveModelElement:
	//    {RetrieveModelElement}
	//    ('val' name=ValidID '=')?
	//    'retrieve' retrievalType=RetrieveModelElementTypeStatement elementType=UnnamedMetaclassReference
	//    'corresponding' 'to' correspondenceSource=XExpression ('tagged' tag=XExpression)?
	//    ('with' precondition=XExpression)?;
	public RetrieveModelElementElements getRetrieveModelElementAccess() {
		return pRetrieveModelElement;
	}
	
	public ParserRule getRetrieveModelElementRule() {
		return getRetrieveModelElementAccess().getRule();
	}
	
	//RetrieveModelElementTypeStatement returns RetrieveModelElementType:
	//    {RetrieveOneModelElement} (optional?='optional' | asserted?='asserted')? |
	//    {RetrieveManyModelElements} 'many';
	public RetrieveModelElementTypeStatementElements getRetrieveModelElementTypeStatementAccess() {
		return pRetrieveModelElementTypeStatement;
	}
	
	public ParserRule getRetrieveModelElementTypeStatementRule() {
		return getRetrieveModelElementTypeStatementAccess().getRule();
	}
	
	//MatchCheckStatement:
	//    {MatchCheckStatement}
	//    'check' (asserted?='asserted')? condition=XExpression;
	public MatchCheckStatementElements getMatchCheckStatementAccess() {
		return pMatchCheckStatement;
	}
	
	public ParserRule getMatchCheckStatementRule() {
		return getMatchCheckStatementAccess().getRule();
	}
	
	//// *********** CREATE ***********
	//CreateBlock returns toplevelelements::CreateBlock:
	//    {toplevelelements::CreateBlock}
	//    'create' '{'
	//    createStatements+=CreateStatement*
	//    '}';
	public CreateBlockElements getCreateBlockAccess() {
		return pCreateBlock;
	}
	
	public ParserRule getCreateBlockRule() {
		return getCreateBlockAccess().getRule();
	}
	
	//CreateStatement returns common::NamedMetaclassReference:
	//    'val' name=ValidID '=' 'new' MetaclassReference;
	public CreateStatementElements getCreateStatementAccess() {
		return pCreateStatement;
	}
	
	public ParserRule getCreateStatementRule() {
		return getCreateStatementAccess().getRule();
	}
	
	//// *********** UPDATE ***********
	//UpdateBlock returns toplevelelements::UpdateBlock:
	//    'update' code=XExpression;
	public UpdateBlockElements getUpdateBlockAccess() {
		return pUpdateBlock;
	}
	
	public ParserRule getUpdateBlockRule() {
		return getUpdateBlockAccess().getRule();
	}
	
	//// ****** CODE BLOCKS ******
	//fragment MetaclassReference returns common::MetaclassReference:
	//    (metamodel=[common::MetamodelImport] '::')? metaclass=[ecore::EClassifier|QualifiedName];
	public MetaclassReferenceElements getMetaclassReferenceAccess() {
		return pMetaclassReference;
	}
	
	public ParserRule getMetaclassReferenceRule() {
		return getMetaclassReferenceAccess().getRule();
	}
	
	//UnnamedMetaclassReference returns common::MetaclassReference:
	//    MetaclassReference;
	public UnnamedMetaclassReferenceElements getUnnamedMetaclassReferenceAccess() {
		return pUnnamedMetaclassReference;
	}
	
	public ParserRule getUnnamedMetaclassReferenceRule() {
		return getUnnamedMetaclassReferenceAccess().getRule();
	}
	
	//NamedMetaclassReference returns common::NamedMetaclassReference:
	//    MetaclassReference name=ValidID;
	public NamedMetaclassReferenceElements getNamedMetaclassReferenceAccess() {
		return pNamedMetaclassReference;
	}
	
	public ParserRule getNamedMetaclassReferenceRule() {
		return getNamedMetaclassReferenceAccess().getRule();
	}
	
	//NamedJavaElementReference returns toplevelelements::NamedJavaElementReference:
	//    type=JvmTypeReference 'as' name=ValidID;
	public NamedJavaElementReferenceElements getNamedJavaElementReferenceAccess() {
		return pNamedJavaElementReference;
	}
	
	public ParserRule getNamedJavaElementReferenceRule() {
		return getNamedJavaElementReferenceAccess().getRule();
	}
	
	//MetaclassEAttributeReference returns common::MetaclassEAttributeReference:
	//    MetaclassReference '[' feature=[ecore::EAttribute|ValidID] ']';
	public MetaclassEAttributeReferenceElements getMetaclassEAttributeReferenceAccess() {
		return pMetaclassEAttributeReference;
	}
	
	public ParserRule getMetaclassEAttributeReferenceRule() {
		return getMetaclassEAttributeReferenceAccess().getRule();
	}
	
	//MetaclassEReferenceReference returns common::MetaclassEReferenceReference:
	//    MetaclassReference '[' feature=[ecore::EReference|ValidID] ']';
	public MetaclassEReferenceReferenceElements getMetaclassEReferenceReferenceAccess() {
		return pMetaclassEReferenceReference;
	}
	
	public ParserRule getMetaclassEReferenceReferenceRule() {
		return getMetaclassEReferenceReferenceAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression returns XExpression:
	//    {XBlockExpression}
	//    '{'
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
