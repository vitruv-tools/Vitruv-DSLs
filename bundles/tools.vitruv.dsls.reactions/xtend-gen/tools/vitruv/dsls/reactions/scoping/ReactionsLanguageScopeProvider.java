/**
 * generated by Xtext 2.9.0
 */
package tools.vitruv.dsls.reactions.scoping;

import com.google.inject.Inject;
import java.util.Collections;
import java.util.Map;
import java.util.function.Function;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.MapExtensions;
import tools.vitruv.dsls.common.elements.CommonLanguageElementsScopeProvider;
import tools.vitruv.dsls.common.elements.ElementsPackage;
import tools.vitruv.dsls.common.elements.MetaclassFeatureReference;
import tools.vitruv.dsls.common.elements.MetaclassReference;
import tools.vitruv.dsls.common.elements.MetamodelImport;
import tools.vitruv.dsls.reactions.codegen.helper.ReactionsImportsHelper;
import tools.vitruv.dsls.reactions.language.ElementChangeType;
import tools.vitruv.dsls.reactions.language.ElementReplacementChangeType;
import tools.vitruv.dsls.reactions.language.ModelAttributeChange;
import tools.vitruv.dsls.reactions.language.ModelElementChange;
import tools.vitruv.dsls.reactions.language.RetrieveOrRequireAbscenceOfModelElement;
import tools.vitruv.dsls.reactions.language.inputTypes.InputTypesPackage;
import tools.vitruv.dsls.reactions.language.toplevelelements.CreateBlock;
import tools.vitruv.dsls.reactions.language.toplevelelements.MatchBlock;
import tools.vitruv.dsls.reactions.language.toplevelelements.Reaction;
import tools.vitruv.dsls.reactions.language.toplevelelements.ReactionsImport;
import tools.vitruv.dsls.reactions.language.toplevelelements.ReactionsSegment;
import tools.vitruv.dsls.reactions.language.toplevelelements.Routine;
import tools.vitruv.dsls.reactions.language.toplevelelements.RoutineInput;
import tools.vitruv.dsls.reactions.language.toplevelelements.RoutineOverrideImportPath;
import tools.vitruv.dsls.reactions.language.toplevelelements.TopLevelElementsPackage;
import tools.vitruv.dsls.reactions.runtime.structure.ReactionsImportPath;
import tools.vitruv.dsls.reactions.util.ReactionsLanguageUtil;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ReactionsLanguageScopeProvider extends AbstractReactionsLanguageScopeProvider {
  @Inject
  @Extension
  protected CommonLanguageElementsScopeProvider commonScopeProvider;

  @Inject
  private ReactionsImportScopeHelper reactionsImportScopeHelper;

  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      boolean _equals = reference.equals(ElementsPackage.Literals.METACLASS_FEATURE_REFERENCE__FEATURE);
      if (_equals) {
        return this.createEStructuralFeatureScope(((MetaclassFeatureReference) context));
      } else {
        boolean _equals_1 = reference.equals(ElementsPackage.Literals.METACLASS_REFERENCE__METACLASS);
        if (_equals_1) {
          EObject _xifexpression = null;
          if ((context instanceof MetaclassReference)) {
            _xifexpression = ((MetaclassReference)context).eContainer();
          } else {
            _xifexpression = context;
          }
          final EObject container = _xifexpression;
          MetaclassReference _xifexpression_1 = null;
          if ((context instanceof MetaclassReference)) {
            _xifexpression_1 = ((MetaclassReference)context);
          }
          final MetaclassReference potentialMetaclassReference = _xifexpression_1;
          if ((container instanceof ModelElementChange)) {
            MetamodelImport _metamodel = null;
            if (potentialMetaclassReference!=null) {
              _metamodel=potentialMetaclassReference.getMetamodel();
            }
            return this.commonScopeProvider.createQualifiedEClassScopeWithEObject(_metamodel);
          } else {
            if ((container instanceof CreateBlock)) {
              MetamodelImport _metamodel_1 = null;
              if (potentialMetaclassReference!=null) {
                _metamodel_1=potentialMetaclassReference.getMetamodel();
              }
              return this.commonScopeProvider.createQualifiedEClassScopeWithoutAbstract(_metamodel_1);
            } else {
              if ((container instanceof RoutineInput)) {
                MetamodelImport _metamodel_2 = null;
                if (potentialMetaclassReference!=null) {
                  _metamodel_2=potentialMetaclassReference.getMetamodel();
                }
                return this.createQualifiedEClassScopeWithSpecialInputTypes(_metamodel_2);
              } else {
                if (((container instanceof RetrieveOrRequireAbscenceOfModelElement) || (container instanceof MatchBlock))) {
                  MetamodelImport _metamodel_3 = null;
                  if (potentialMetaclassReference!=null) {
                    _metamodel_3=potentialMetaclassReference.getMetamodel();
                  }
                  return this.commonScopeProvider.createQualifiedEClassScopeWithEObject(_metamodel_3);
                } else {
                  if ((container instanceof MetaclassReference)) {
                    return this.commonScopeProvider.createQualifiedEClassScopeWithEObject(((MetaclassReference)container).getMetamodel());
                  }
                }
              }
            }
          }
        } else {
          boolean _equals_2 = reference.equals(TopLevelElementsPackage.Literals.REACTIONS_IMPORT__IMPORTED_REACTIONS_SEGMENT);
          if (_equals_2) {
            if ((context instanceof ReactionsImport)) {
              final EObject contextContainer = ((ReactionsImport)context).eContainer();
              if ((contextContainer instanceof ReactionsSegment)) {
                return this.createReactionsImportScope(((ReactionsSegment)contextContainer));
              }
            }
          } else {
            boolean _equals_3 = reference.equals(TopLevelElementsPackage.Literals.REACTION__OVERRIDDEN_REACTIONS_SEGMENT);
            if (_equals_3) {
              if ((context instanceof Reaction)) {
                return this.createReactionOverrideScope(((Reaction)context).getReactionsSegment());
              }
            } else {
              boolean _equals_4 = reference.equals(TopLevelElementsPackage.Literals.ROUTINE_OVERRIDE_IMPORT_PATH__REACTIONS_SEGMENT);
              if (_equals_4) {
                if ((context instanceof Routine)) {
                  return this.createRoutineOverrideScope(((Routine)context).getReactionsSegment(), null);
                } else {
                  if ((context instanceof RoutineOverrideImportPath)) {
                    EObject container_1 = ((RoutineOverrideImportPath)context).eContainer();
                    while ((container_1 instanceof RoutineOverrideImportPath)) {
                      container_1 = ((RoutineOverrideImportPath)container_1).eContainer();
                    }
                    if ((container_1 instanceof Routine)) {
                      return this.createRoutineOverrideScope(((Routine)container_1).getReactionsSegment(), ((RoutineOverrideImportPath)context));
                    }
                  }
                }
              }
            }
          }
        }
      }
      IScope _elvis = null;
      IScope _scope = this.commonScopeProvider.getScope(context, reference);
      if (_scope != null) {
        _elvis = _scope;
      } else {
        IScope _scope_1 = super.getScope(context, reference);
        _elvis = _scope_1;
      }
      _xblockexpression = _elvis;
    }
    return _xblockexpression;
  }

  public SimpleScope createReactionsImportScope(final ReactionsSegment reactionsSegment) {
    final Iterable<IEObjectDescription> visibleReactionsSegmentDescriptions = this.reactionsImportScopeHelper.getVisibleReactionsSegmentDescriptions(reactionsSegment);
    return new SimpleScope(visibleReactionsSegmentDescriptions);
  }

  public SimpleScope createReactionOverrideScope(final ReactionsSegment reactionsSegment) {
    final Function2<ReactionsImportPath, ReactionsSegment, Boolean> _function = (ReactionsImportPath k, ReactionsSegment v) -> {
      int _length = k.getLength();
      return Boolean.valueOf((_length > 1));
    };
    final Map<ReactionsImportPath, ReactionsSegment> reactionsImportHierarchyWithoutRoot = MapExtensions.<ReactionsImportPath, ReactionsSegment>filter(ReactionsImportsHelper.getReactionsImportHierarchy(reactionsSegment), _function);
    final Function1<Map.Entry<ReactionsImportPath, ReactionsSegment>, IEObjectDescription> _function_1 = (Map.Entry<ReactionsImportPath, ReactionsSegment> it) -> {
      return EObjectDescription.create(QualifiedName.create(it.getKey().getLastSegment()), it.getValue());
    };
    Iterable<IEObjectDescription> _map = IterableExtensions.<Map.Entry<ReactionsImportPath, ReactionsSegment>, IEObjectDescription>map(reactionsImportHierarchyWithoutRoot.entrySet(), _function_1);
    return new SimpleScope(_map);
  }

  public IScope createRoutineOverrideScope(final ReactionsSegment reactionsSegment, final RoutineOverrideImportPath routineOverrideImportPath) {
    ReactionsSegment importPathLastSegment = reactionsSegment;
    RoutineOverrideImportPath _parent = null;
    if (routineOverrideImportPath!=null) {
      _parent=routineOverrideImportPath.getParent();
    }
    boolean _tripleNotEquals = (_parent != null);
    if (_tripleNotEquals) {
      final ReactionsImportPath parentImportPath = ReactionsLanguageUtil.toReactionsImportPath(routineOverrideImportPath.getParent());
      importPathLastSegment = ReactionsImportsHelper.getReactionsSegment(reactionsSegment, parentImportPath);
      if ((importPathLastSegment == null)) {
        return IScope.NULLSCOPE;
      }
    }
    final Function1<ReactionsImport, Boolean> _function = (ReactionsImport it) -> {
      return Boolean.valueOf(ReactionsImportsHelper.isResolvable(it));
    };
    final Function1<ReactionsImport, ReactionsSegment> _function_1 = (ReactionsImport it) -> {
      return it.getImportedReactionsSegment();
    };
    return Scopes.scopeFor(IterableExtensions.<ReactionsImport, ReactionsSegment>map(IterableExtensions.<ReactionsImport>filter(importPathLastSegment.getReactionsImports(), _function), _function_1));
  }

  public IScope createEStructuralFeatureScope(final MetaclassFeatureReference featureReference) {
    IScope _xifexpression = null;
    EClassifier _metaclass = null;
    if (featureReference!=null) {
      _metaclass=featureReference.getMetaclass();
    }
    boolean _tripleNotEquals = (_metaclass != null);
    if (_tripleNotEquals) {
      IScope _xblockexpression = null;
      {
        final EObject changeType = featureReference.eContainer();
        Function1<EStructuralFeature, Boolean> _xifexpression_1 = null;
        if ((changeType instanceof ElementReplacementChangeType)) {
          final Function1<EStructuralFeature, Boolean> _function = (EStructuralFeature feat) -> {
            boolean _isMany = feat.isMany();
            return Boolean.valueOf((!_isMany));
          };
          _xifexpression_1 = _function;
        } else {
          final Function1<EStructuralFeature, Boolean> _function_1 = (EStructuralFeature feat) -> {
            return Boolean.valueOf(true);
          };
          _xifexpression_1 = _function_1;
        }
        final Function1<EStructuralFeature, Boolean> multiplicityFilterFunction = _xifexpression_1;
        Function1<EStructuralFeature, Boolean> _xifexpression_2 = null;
        if ((changeType instanceof ModelAttributeChange)) {
          final Function1<EStructuralFeature, Boolean> _function_2 = (EStructuralFeature feat) -> {
            return Boolean.valueOf((feat instanceof EAttribute));
          };
          _xifexpression_2 = _function_2;
        } else {
          Function1<EStructuralFeature, Boolean> _xifexpression_3 = null;
          if ((changeType instanceof ElementChangeType)) {
            final Function1<EStructuralFeature, Boolean> _function_3 = (EStructuralFeature feat) -> {
              return Boolean.valueOf((feat instanceof EReference));
            };
            _xifexpression_3 = _function_3;
          } else {
            throw new IllegalStateException();
          }
          _xifexpression_2 = _xifexpression_3;
        }
        final Function1<EStructuralFeature, Boolean> typeFilterFunction = _xifexpression_2;
        EClassifier _metaclass_1 = featureReference.getMetaclass();
        final Function<EStructuralFeature, IEObjectDescription> _function_4 = (EStructuralFeature it) -> {
          return EObjectDescription.create(it.getName(), it);
        };
        _xblockexpression = this.commonScopeProvider.<EStructuralFeature>createScope(IScope.NULLSCOPE, 
          IterableExtensions.<EStructuralFeature>filter(IterableExtensions.<EStructuralFeature>filter(((EClass) _metaclass_1).getEAllStructuralFeatures(), multiplicityFilterFunction), typeFilterFunction).iterator(), _function_4);
      }
      _xifexpression = _xblockexpression;
    } else {
      return IScope.NULLSCOPE;
    }
    return _xifexpression;
  }

  public SimpleScope createQualifiedEClassScopeWithSpecialInputTypes(final MetamodelImport metamodelImport) {
    SimpleScope _xifexpression = null;
    if (((metamodelImport == null) || (metamodelImport.getPackage() == null))) {
      IEObjectDescription _create = EObjectDescription.create(EcorePackage.Literals.EOBJECT.getName(), EcorePackage.Literals.EOBJECT);
      IEObjectDescription _create_1 = EObjectDescription.create(InputTypesPackage.Literals.STRING.getName(), InputTypesPackage.Literals.STRING);
      IEObjectDescription _create_2 = EObjectDescription.create(InputTypesPackage.Literals.INTEGER.getName(), InputTypesPackage.Literals.INTEGER);
      IEObjectDescription _create_3 = EObjectDescription.create(InputTypesPackage.Literals.BOOLEAN.getName(), InputTypesPackage.Literals.BOOLEAN);
      IEObjectDescription _create_4 = EObjectDescription.create(InputTypesPackage.Literals.SHORT.getName(), InputTypesPackage.Literals.SHORT);
      IEObjectDescription _create_5 = EObjectDescription.create(InputTypesPackage.Literals.LONG.getName(), InputTypesPackage.Literals.LONG);
      IEObjectDescription _create_6 = EObjectDescription.create(InputTypesPackage.Literals.BYTE.getName(), InputTypesPackage.Literals.BYTE);
      IEObjectDescription _create_7 = EObjectDescription.create(InputTypesPackage.Literals.CHARACTER.getName(), InputTypesPackage.Literals.CHARACTER);
      IEObjectDescription _create_8 = EObjectDescription.create(InputTypesPackage.Literals.FLOAT.getName(), InputTypesPackage.Literals.FLOAT);
      IEObjectDescription _create_9 = EObjectDescription.create(InputTypesPackage.Literals.DOUBLE.getName(), InputTypesPackage.Literals.DOUBLE);
      _xifexpression = new SimpleScope(IScope.NULLSCOPE, Collections.<IEObjectDescription>unmodifiableList(CollectionLiterals.<IEObjectDescription>newArrayList(_create, _create_1, _create_2, _create_3, _create_4, _create_5, _create_6, _create_7, _create_8, _create_9)));
    } else {
      _xifexpression = this.commonScopeProvider.createQualifiedEClassScopeWithEObject(metamodelImport);
    }
    return _xifexpression;
  }
}
