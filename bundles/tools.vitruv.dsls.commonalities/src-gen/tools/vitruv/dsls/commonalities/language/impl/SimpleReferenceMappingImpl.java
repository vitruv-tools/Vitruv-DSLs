/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.ParticipationAttribute;
import tools.vitruv.dsls.commonalities.language.ParticipationClass;
import tools.vitruv.dsls.commonalities.language.SimpleReferenceMapping;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simple Reference Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.SimpleReferenceMappingImpl#getReference <em>Reference</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.SimpleReferenceMappingImpl#getReferenceTargets <em>Reference Targets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimpleReferenceMappingImpl extends CommonalityReferenceMappingImpl implements SimpleReferenceMapping
{
  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected ParticipationAttribute reference;

  /**
   * The cached value of the '{@link #getReferenceTargets() <em>Reference Targets</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferenceTargets()
   * @generated
   * @ordered
   */
  protected EList<ParticipationClass> referenceTargets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleReferenceMappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.SIMPLE_REFERENCE_MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationAttribute getReference()
  {
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReference(ParticipationAttribute newReference, NotificationChain msgs)
  {
    ParticipationAttribute oldReference = reference;
    reference = newReference;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE, oldReference, newReference);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReference(ParticipationAttribute newReference)
  {
    if (newReference != reference)
    {
      NotificationChain msgs = null;
      if (reference != null)
        msgs = ((InternalEObject)reference).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE, null, msgs);
      if (newReference != null)
        msgs = ((InternalEObject)newReference).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE, null, msgs);
      msgs = basicSetReference(newReference, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE, newReference, newReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParticipationClass> getReferenceTargets()
  {
    if (referenceTargets == null)
    {
      referenceTargets = new EObjectResolvingEList<ParticipationClass>(ParticipationClass.class, this, LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE_TARGETS);
    }
    return referenceTargets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE:
        return basicSetReference(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE:
        return getReference();
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE_TARGETS:
        return getReferenceTargets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE:
        setReference((ParticipationAttribute)newValue);
        return;
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE_TARGETS:
        getReferenceTargets().clear();
        getReferenceTargets().addAll((Collection<? extends ParticipationClass>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE:
        setReference((ParticipationAttribute)null);
        return;
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE_TARGETS:
        getReferenceTargets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE:
        return reference != null;
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING__REFERENCE_TARGETS:
        return referenceTargets != null && !referenceTargets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SimpleReferenceMappingImpl
