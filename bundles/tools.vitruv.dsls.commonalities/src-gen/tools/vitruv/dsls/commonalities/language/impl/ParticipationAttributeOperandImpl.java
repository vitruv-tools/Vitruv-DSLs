/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.ParticipationAttribute;
import tools.vitruv.dsls.commonalities.language.ParticipationAttributeOperand;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Participation Attribute Operand</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationAttributeOperandImpl#getParticipationAttribute <em>Participation Attribute</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParticipationAttributeOperandImpl extends ParticipationConditionOperandImpl implements ParticipationAttributeOperand
{
  /**
   * The cached value of the '{@link #getParticipationAttribute() <em>Participation Attribute</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParticipationAttribute()
   * @generated
   * @ordered
   */
  protected ParticipationAttribute participationAttribute;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParticipationAttributeOperandImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE_OPERAND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationAttribute getParticipationAttribute()
  {
    return participationAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParticipationAttribute(ParticipationAttribute newParticipationAttribute, NotificationChain msgs)
  {
    ParticipationAttribute oldParticipationAttribute = participationAttribute;
    participationAttribute = newParticipationAttribute;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE, oldParticipationAttribute, newParticipationAttribute);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParticipationAttribute(ParticipationAttribute newParticipationAttribute)
  {
    if (newParticipationAttribute != participationAttribute)
    {
      NotificationChain msgs = null;
      if (participationAttribute != null)
        msgs = ((InternalEObject)participationAttribute).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE, null, msgs);
      if (newParticipationAttribute != null)
        msgs = ((InternalEObject)newParticipationAttribute).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE, null, msgs);
      msgs = basicSetParticipationAttribute(newParticipationAttribute, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE, newParticipationAttribute, newParticipationAttribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE:
        return basicSetParticipationAttribute(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE:
        return getParticipationAttribute();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE:
        setParticipationAttribute((ParticipationAttribute)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE:
        setParticipationAttribute((ParticipationAttribute)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE:
        return participationAttribute != null;
    }
    return super.eIsSet(featureID);
  }

} //ParticipationAttributeOperandImpl
