/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import tools.vitruv.dsls.commonalities.language.*;

import tools.vitruv.dsls.commonalities.language.elements.Attribute;
import tools.vitruv.dsls.commonalities.language.elements.ClassLike;
import tools.vitruv.dsls.commonalities.language.elements.Classifier;
import tools.vitruv.dsls.commonalities.language.elements.Domain;
import tools.vitruv.dsls.commonalities.language.elements.MemberLike;
import tools.vitruv.dsls.commonalities.language.elements.Metaclass;
import tools.vitruv.dsls.commonalities.language.elements.MetaclassMember;
import tools.vitruv.dsls.commonalities.language.elements.NamedElement;
import tools.vitruv.dsls.commonalities.language.elements.PackageLike;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see tools.vitruv.dsls.commonalities.language.LanguagePackage
 * @generated
 */
public class LanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = LanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case LanguagePackage.COMMONALITY_FILE:
      {
        CommonalityFile commonalityFile = (CommonalityFile)theEObject;
        T result = caseCommonalityFile(commonalityFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.OPERATOR_IMPORT:
      {
        OperatorImport operatorImport = (OperatorImport)theEObject;
        T result = caseOperatorImport(operatorImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.CONCEPT:
      {
        Concept concept = (Concept)theEObject;
        T result = caseConcept(concept);
        if (result == null) result = caseDomain(concept);
        if (result == null) result = casePackageLike(concept);
        if (result == null) result = caseNamedElement(concept);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.COMMONALITY:
      {
        Commonality commonality = (Commonality)theEObject;
        T result = caseCommonality(commonality);
        if (result == null) result = caseMetaclass(commonality);
        if (result == null) result = caseClassLike(commonality);
        if (result == null) result = caseClassifier(commonality);
        if (result == null) result = caseNamedElement(commonality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION:
      {
        Participation participation = (Participation)theEObject;
        T result = caseParticipation(participation);
        if (result == null) result = casePackageLike(participation);
        if (result == null) result = caseNamedElement(participation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION_CLASS:
      {
        ParticipationClass participationClass = (ParticipationClass)theEObject;
        T result = caseParticipationClass(participationClass);
        if (result == null) result = caseClassLike(participationClass);
        if (result == null) result = caseParticipationPart(participationClass);
        if (result == null) result = caseNamedElement(participationClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION_PART:
      {
        ParticipationPart participationPart = (ParticipationPart)theEObject;
        T result = caseParticipationPart(participationPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION_RELATION:
      {
        ParticipationRelation participationRelation = (ParticipationRelation)theEObject;
        T result = caseParticipationRelation(participationRelation);
        if (result == null) result = caseParticipationPart(participationRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION_CONDITION:
      {
        ParticipationCondition participationCondition = (ParticipationCondition)theEObject;
        T result = caseParticipationCondition(participationCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION_CONDITION_OPERAND:
      {
        ParticipationConditionOperand participationConditionOperand = (ParticipationConditionOperand)theEObject;
        T result = caseParticipationConditionOperand(participationConditionOperand);
        if (result == null) result = caseOperand(participationConditionOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.COMMONALITY_ATTRIBUTE:
      {
        CommonalityAttribute commonalityAttribute = (CommonalityAttribute)theEObject;
        T result = caseCommonalityAttribute(commonalityAttribute);
        if (result == null) result = caseAttribute(commonalityAttribute);
        if (result == null) result = caseMetaclassMember(commonalityAttribute);
        if (result == null) result = caseMemberLike(commonalityAttribute);
        if (result == null) result = caseNamedElement(commonalityAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.COMMONALITY_ATTRIBUTE_MAPPING:
      {
        CommonalityAttributeMapping commonalityAttributeMapping = (CommonalityAttributeMapping)theEObject;
        T result = caseCommonalityAttributeMapping(commonalityAttributeMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.SIMPLE_ATTRIBUTE_MAPPING:
      {
        SimpleAttributeMapping simpleAttributeMapping = (SimpleAttributeMapping)theEObject;
        T result = caseSimpleAttributeMapping(simpleAttributeMapping);
        if (result == null) result = caseCommonalityAttributeMapping(simpleAttributeMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.OPERATOR_ATTRIBUTE_MAPPING:
      {
        OperatorAttributeMapping operatorAttributeMapping = (OperatorAttributeMapping)theEObject;
        T result = caseOperatorAttributeMapping(operatorAttributeMapping);
        if (result == null) result = caseCommonalityAttributeMapping(operatorAttributeMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ATTRIBUTE_MAPPING_OPERAND:
      {
        AttributeMappingOperand attributeMappingOperand = (AttributeMappingOperand)theEObject;
        T result = caseAttributeMappingOperand(attributeMappingOperand);
        if (result == null) result = caseOperand(attributeMappingOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION_ATTRIBUTE:
      {
        ParticipationAttribute participationAttribute = (ParticipationAttribute)theEObject;
        T result = caseParticipationAttribute(participationAttribute);
        if (result == null) result = caseAttribute(participationAttribute);
        if (result == null) result = caseMetaclassMember(participationAttribute);
        if (result == null) result = caseMemberLike(participationAttribute);
        if (result == null) result = caseNamedElement(participationAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.COMMONALITY_ATTRIBUTE_REFERENCE:
      {
        CommonalityAttributeReference commonalityAttributeReference = (CommonalityAttributeReference)theEObject;
        T result = caseCommonalityAttributeReference(commonalityAttributeReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.COMMONALITY_REFERENCE:
      {
        CommonalityReference commonalityReference = (CommonalityReference)theEObject;
        T result = caseCommonalityReference(commonalityReference);
        if (result == null) result = caseAttribute(commonalityReference);
        if (result == null) result = caseMetaclassMember(commonalityReference);
        if (result == null) result = caseMemberLike(commonalityReference);
        if (result == null) result = caseNamedElement(commonalityReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING:
      {
        CommonalityReferenceMapping commonalityReferenceMapping = (CommonalityReferenceMapping)theEObject;
        T result = caseCommonalityReferenceMapping(commonalityReferenceMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING:
      {
        SimpleReferenceMapping simpleReferenceMapping = (SimpleReferenceMapping)theEObject;
        T result = caseSimpleReferenceMapping(simpleReferenceMapping);
        if (result == null) result = caseCommonalityReferenceMapping(simpleReferenceMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING:
      {
        OperatorReferenceMapping operatorReferenceMapping = (OperatorReferenceMapping)theEObject;
        T result = caseOperatorReferenceMapping(operatorReferenceMapping);
        if (result == null) result = caseCommonalityReferenceMapping(operatorReferenceMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.REFERENCE_MAPPING_OPERAND:
      {
        ReferenceMappingOperand referenceMappingOperand = (ReferenceMappingOperand)theEObject;
        T result = caseReferenceMappingOperand(referenceMappingOperand);
        if (result == null) result = caseOperand(referenceMappingOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.REFERENCED_PARTICIPATION_ATTRIBUTE_OPERAND:
      {
        ReferencedParticipationAttributeOperand referencedParticipationAttributeOperand = (ReferencedParticipationAttributeOperand)theEObject;
        T result = caseReferencedParticipationAttributeOperand(referencedParticipationAttributeOperand);
        if (result == null) result = caseReferenceMappingOperand(referencedParticipationAttributeOperand);
        if (result == null) result = caseOperand(referencedParticipationAttributeOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.OPERAND:
      {
        Operand operand = (Operand)theEObject;
        T result = caseOperand(operand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.LITERAL_OPERAND:
      {
        LiteralOperand literalOperand = (LiteralOperand)theEObject;
        T result = caseLiteralOperand(literalOperand);
        if (result == null) result = caseParticipationConditionOperand(literalOperand);
        if (result == null) result = caseAttributeMappingOperand(literalOperand);
        if (result == null) result = caseReferenceMappingOperand(literalOperand);
        if (result == null) result = caseOperand(literalOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION_CLASS_OPERAND:
      {
        ParticipationClassOperand participationClassOperand = (ParticipationClassOperand)theEObject;
        T result = caseParticipationClassOperand(participationClassOperand);
        if (result == null) result = caseParticipationConditionOperand(participationClassOperand);
        if (result == null) result = caseAttributeMappingOperand(participationClassOperand);
        if (result == null) result = caseOperand(participationClassOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND:
      {
        ParticipationAttributeOperand participationAttributeOperand = (ParticipationAttributeOperand)theEObject;
        T result = caseParticipationAttributeOperand(participationAttributeOperand);
        if (result == null) result = caseParticipationConditionOperand(participationAttributeOperand);
        if (result == null) result = caseAttributeMappingOperand(participationAttributeOperand);
        if (result == null) result = caseReferenceMappingOperand(participationAttributeOperand);
        if (result == null) result = caseOperand(participationAttributeOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.COMMONALITY_ATTRIBUTE_OPERAND:
      {
        CommonalityAttributeOperand commonalityAttributeOperand = (CommonalityAttributeOperand)theEObject;
        T result = caseCommonalityAttributeOperand(commonalityAttributeOperand);
        if (result == null) result = caseAttributeMappingOperand(commonalityAttributeOperand);
        if (result == null) result = caseOperand(commonalityAttributeOperand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.BIDIRECTIONAL_PARTICIPATION_CONDITION:
      {
        BidirectionalParticipationCondition bidirectionalParticipationCondition = (BidirectionalParticipationCondition)theEObject;
        T result = caseBidirectionalParticipationCondition(bidirectionalParticipationCondition);
        if (result == null) result = caseParticipationCondition(bidirectionalParticipationCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.ENFORCED_PARTICIPATION_CONDITION:
      {
        EnforcedParticipationCondition enforcedParticipationCondition = (EnforcedParticipationCondition)theEObject;
        T result = caseEnforcedParticipationCondition(enforcedParticipationCondition);
        if (result == null) result = caseParticipationCondition(enforcedParticipationCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LanguagePackage.CHECKED_PARTICIPATION_CONDITION:
      {
        CheckedParticipationCondition checkedParticipationCondition = (CheckedParticipationCondition)theEObject;
        T result = caseCheckedParticipationCondition(checkedParticipationCondition);
        if (result == null) result = caseParticipationCondition(checkedParticipationCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commonality File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commonality File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommonalityFile(CommonalityFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operator Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operator Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperatorImport(OperatorImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concept</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concept</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcept(Concept object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commonality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commonality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommonality(Commonality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipation(Participation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipationClass(ParticipationClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipationPart(ParticipationPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipationRelation(ParticipationRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipationCondition(ParticipationCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation Condition Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation Condition Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipationConditionOperand(ParticipationConditionOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commonality Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commonality Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommonalityAttribute(CommonalityAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commonality Attribute Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commonality Attribute Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommonalityAttributeMapping(CommonalityAttributeMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Attribute Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Attribute Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleAttributeMapping(SimpleAttributeMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operator Attribute Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operator Attribute Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperatorAttributeMapping(OperatorAttributeMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Mapping Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Mapping Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeMappingOperand(AttributeMappingOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipationAttribute(ParticipationAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commonality Attribute Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commonality Attribute Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommonalityAttributeReference(CommonalityAttributeReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commonality Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commonality Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommonalityReference(CommonalityReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commonality Reference Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commonality Reference Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommonalityReferenceMapping(CommonalityReferenceMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Reference Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Reference Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleReferenceMapping(SimpleReferenceMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operator Reference Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operator Reference Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperatorReferenceMapping(OperatorReferenceMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Mapping Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Mapping Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferenceMappingOperand(ReferenceMappingOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Referenced Participation Attribute Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Referenced Participation Attribute Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferencedParticipationAttributeOperand(ReferencedParticipationAttributeOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperand(Operand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralOperand(LiteralOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation Class Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation Class Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipationClassOperand(ParticipationClassOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Participation Attribute Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Participation Attribute Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParticipationAttributeOperand(ParticipationAttributeOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commonality Attribute Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commonality Attribute Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommonalityAttributeOperand(CommonalityAttributeOperand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bidirectional Participation Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bidirectional Participation Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBidirectionalParticipationCondition(BidirectionalParticipationCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enforced Participation Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enforced Participation Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnforcedParticipationCondition(EnforcedParticipationCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Checked Participation Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Checked Participation Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheckedParticipationCondition(CheckedParticipationCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Named Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Named Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamedElement(NamedElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package Like</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package Like</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageLike(PackageLike object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomain(Domain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Like</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Like</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassLike(ClassLike object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Classifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Classifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassifier(Classifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Metaclass</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Metaclass</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMetaclass(Metaclass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Member Like</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Member Like</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemberLike(MemberLike object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Metaclass Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Metaclass Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMetaclassMember(MetaclassMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //LanguageSwitch
