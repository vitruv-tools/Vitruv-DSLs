/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tools.vitruv.dsls.commonalities.language.CommonalityReferenceMapping;
import tools.vitruv.dsls.commonalities.language.LanguagePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Commonality Reference Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityReferenceMappingImpl#isReadAndWrite <em>Read And Write</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityReferenceMappingImpl#isWrite <em>Write</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityReferenceMappingImpl#isRead <em>Read</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommonalityReferenceMappingImpl extends MinimalEObjectImpl.Container implements CommonalityReferenceMapping
{
  /**
   * The default value of the '{@link #isReadAndWrite() <em>Read And Write</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReadAndWrite()
   * @generated
   * @ordered
   */
  protected static final boolean READ_AND_WRITE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isReadAndWrite() <em>Read And Write</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReadAndWrite()
   * @generated
   * @ordered
   */
  protected boolean readAndWrite = READ_AND_WRITE_EDEFAULT;

  /**
   * The default value of the '{@link #isWrite() <em>Write</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWrite()
   * @generated
   * @ordered
   */
  protected static final boolean WRITE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isWrite() <em>Write</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWrite()
   * @generated
   * @ordered
   */
  protected boolean write = WRITE_EDEFAULT;

  /**
   * The default value of the '{@link #isRead() <em>Read</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRead()
   * @generated
   * @ordered
   */
  protected static final boolean READ_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRead() <em>Read</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRead()
   * @generated
   * @ordered
   */
  protected boolean read = READ_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommonalityReferenceMappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.COMMONALITY_REFERENCE_MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isReadAndWrite()
  {
    return readAndWrite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReadAndWrite(boolean newReadAndWrite)
  {
    boolean oldReadAndWrite = readAndWrite;
    readAndWrite = newReadAndWrite;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ_AND_WRITE, oldReadAndWrite, readAndWrite));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isWrite()
  {
    return write;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWrite(boolean newWrite)
  {
    boolean oldWrite = write;
    write = newWrite;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY_REFERENCE_MAPPING__WRITE, oldWrite, write));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRead()
  {
    return read;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRead(boolean newRead)
  {
    boolean oldRead = read;
    read = newRead;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ, oldRead, read));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ_AND_WRITE:
        return isReadAndWrite();
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__WRITE:
        return isWrite();
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ:
        return isRead();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ_AND_WRITE:
        setReadAndWrite((Boolean)newValue);
        return;
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__WRITE:
        setWrite((Boolean)newValue);
        return;
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ:
        setRead((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ_AND_WRITE:
        setReadAndWrite(READ_AND_WRITE_EDEFAULT);
        return;
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__WRITE:
        setWrite(WRITE_EDEFAULT);
        return;
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ:
        setRead(READ_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ_AND_WRITE:
        return readAndWrite != READ_AND_WRITE_EDEFAULT;
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__WRITE:
        return write != WRITE_EDEFAULT;
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING__READ:
        return read != READ_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (readAndWrite: ");
    result.append(readAndWrite);
    result.append(", write: ");
    result.append(write);
    result.append(", read: ");
    result.append(read);
    result.append(')');
    return result.toString();
  }

} //CommonalityReferenceMappingImpl
