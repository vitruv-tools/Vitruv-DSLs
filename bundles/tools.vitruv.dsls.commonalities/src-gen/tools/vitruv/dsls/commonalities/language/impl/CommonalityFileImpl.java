/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import tools.vitruv.dsls.common.elements.MetamodelImport;

import tools.vitruv.dsls.commonalities.language.Commonality;
import tools.vitruv.dsls.commonalities.language.CommonalityFile;
import tools.vitruv.dsls.commonalities.language.Concept;
import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.OperatorImport;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Commonality File</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityFileImpl#getOperatorImports <em>Operator Imports</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityFileImpl#getMetamodelImports <em>Metamodel Imports</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityFileImpl#getConcept <em>Concept</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityFileImpl#getCommonality <em>Commonality</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommonalityFileImpl extends MinimalEObjectImpl.Container implements CommonalityFile
{
  /**
   * The cached value of the '{@link #getOperatorImports() <em>Operator Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatorImports()
   * @generated
   * @ordered
   */
  protected EList<OperatorImport> operatorImports;

  /**
   * The cached value of the '{@link #getMetamodelImports() <em>Metamodel Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetamodelImports()
   * @generated
   * @ordered
   */
  protected EList<MetamodelImport> metamodelImports;

  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected Concept concept;

  /**
   * The cached value of the '{@link #getCommonality() <em>Commonality</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommonality()
   * @generated
   * @ordered
   */
  protected Commonality commonality;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommonalityFileImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.COMMONALITY_FILE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OperatorImport> getOperatorImports()
  {
    if (operatorImports == null)
    {
      operatorImports = new EObjectContainmentEList<OperatorImport>(OperatorImport.class, this, LanguagePackage.COMMONALITY_FILE__OPERATOR_IMPORTS);
    }
    return operatorImports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MetamodelImport> getMetamodelImports()
  {
    if (metamodelImports == null)
    {
      metamodelImports = new EObjectContainmentEList<MetamodelImport>(MetamodelImport.class, this, LanguagePackage.COMMONALITY_FILE__METAMODEL_IMPORTS);
    }
    return metamodelImports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept getConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConcept(Concept newConcept, NotificationChain msgs)
  {
    Concept oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY_FILE__CONCEPT, oldConcept, newConcept);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConcept(Concept newConcept)
  {
    if (newConcept != concept)
    {
      NotificationChain msgs = null;
      if (concept != null)
        msgs = ((InternalEObject)concept).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.COMMONALITY_FILE__CONCEPT, null, msgs);
      if (newConcept != null)
        msgs = ((InternalEObject)newConcept).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.COMMONALITY_FILE__CONCEPT, null, msgs);
      msgs = basicSetConcept(newConcept, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY_FILE__CONCEPT, newConcept, newConcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Commonality getCommonality()
  {
    return commonality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCommonality(Commonality newCommonality, NotificationChain msgs)
  {
    Commonality oldCommonality = commonality;
    commonality = newCommonality;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY_FILE__COMMONALITY, oldCommonality, newCommonality);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCommonality(Commonality newCommonality)
  {
    if (newCommonality != commonality)
    {
      NotificationChain msgs = null;
      if (commonality != null)
        msgs = ((InternalEObject)commonality).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.COMMONALITY_FILE__COMMONALITY, null, msgs);
      if (newCommonality != null)
        msgs = ((InternalEObject)newCommonality).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.COMMONALITY_FILE__COMMONALITY, null, msgs);
      msgs = basicSetCommonality(newCommonality, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY_FILE__COMMONALITY, newCommonality, newCommonality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_FILE__OPERATOR_IMPORTS:
        return ((InternalEList<?>)getOperatorImports()).basicRemove(otherEnd, msgs);
      case LanguagePackage.COMMONALITY_FILE__METAMODEL_IMPORTS:
        return ((InternalEList<?>)getMetamodelImports()).basicRemove(otherEnd, msgs);
      case LanguagePackage.COMMONALITY_FILE__CONCEPT:
        return basicSetConcept(null, msgs);
      case LanguagePackage.COMMONALITY_FILE__COMMONALITY:
        return basicSetCommonality(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_FILE__OPERATOR_IMPORTS:
        return getOperatorImports();
      case LanguagePackage.COMMONALITY_FILE__METAMODEL_IMPORTS:
        return getMetamodelImports();
      case LanguagePackage.COMMONALITY_FILE__CONCEPT:
        return getConcept();
      case LanguagePackage.COMMONALITY_FILE__COMMONALITY:
        return getCommonality();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_FILE__OPERATOR_IMPORTS:
        getOperatorImports().clear();
        getOperatorImports().addAll((Collection<? extends OperatorImport>)newValue);
        return;
      case LanguagePackage.COMMONALITY_FILE__METAMODEL_IMPORTS:
        getMetamodelImports().clear();
        getMetamodelImports().addAll((Collection<? extends MetamodelImport>)newValue);
        return;
      case LanguagePackage.COMMONALITY_FILE__CONCEPT:
        setConcept((Concept)newValue);
        return;
      case LanguagePackage.COMMONALITY_FILE__COMMONALITY:
        setCommonality((Commonality)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_FILE__OPERATOR_IMPORTS:
        getOperatorImports().clear();
        return;
      case LanguagePackage.COMMONALITY_FILE__METAMODEL_IMPORTS:
        getMetamodelImports().clear();
        return;
      case LanguagePackage.COMMONALITY_FILE__CONCEPT:
        setConcept((Concept)null);
        return;
      case LanguagePackage.COMMONALITY_FILE__COMMONALITY:
        setCommonality((Commonality)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY_FILE__OPERATOR_IMPORTS:
        return operatorImports != null && !operatorImports.isEmpty();
      case LanguagePackage.COMMONALITY_FILE__METAMODEL_IMPORTS:
        return metamodelImports != null && !metamodelImports.isEmpty();
      case LanguagePackage.COMMONALITY_FILE__CONCEPT:
        return concept != null;
      case LanguagePackage.COMMONALITY_FILE__COMMONALITY:
        return commonality != null;
    }
    return super.eIsSet(featureID);
  }

} //CommonalityFileImpl
