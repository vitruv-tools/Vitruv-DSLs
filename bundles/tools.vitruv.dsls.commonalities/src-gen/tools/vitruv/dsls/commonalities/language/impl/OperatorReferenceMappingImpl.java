/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.common.types.JvmDeclaredType;

import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.OperatorReferenceMapping;
import tools.vitruv.dsls.commonalities.language.ParticipationClass;
import tools.vitruv.dsls.commonalities.language.ReferenceMappingOperand;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operator Reference Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.OperatorReferenceMappingImpl#getParticipationClass <em>Participation Class</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.OperatorReferenceMappingImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.OperatorReferenceMappingImpl#getOperands <em>Operands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperatorReferenceMappingImpl extends CommonalityReferenceMappingImpl implements OperatorReferenceMapping
{
  /**
   * The cached value of the '{@link #getParticipationClass() <em>Participation Class</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParticipationClass()
   * @generated
   * @ordered
   */
  protected ParticipationClass participationClass;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected JvmDeclaredType operator;

  /**
   * The cached value of the '{@link #getOperands() <em>Operands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperands()
   * @generated
   * @ordered
   */
  protected EList<ReferenceMappingOperand> operands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperatorReferenceMappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.OPERATOR_REFERENCE_MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationClass getParticipationClass()
  {
    if (participationClass != null && participationClass.eIsProxy())
    {
      InternalEObject oldParticipationClass = (InternalEObject)participationClass;
      participationClass = (ParticipationClass)eResolveProxy(oldParticipationClass);
      if (participationClass != oldParticipationClass)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LanguagePackage.OPERATOR_REFERENCE_MAPPING__PARTICIPATION_CLASS, oldParticipationClass, participationClass));
      }
    }
    return participationClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParticipationClass basicGetParticipationClass()
  {
    return participationClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParticipationClass(ParticipationClass newParticipationClass)
  {
    ParticipationClass oldParticipationClass = participationClass;
    participationClass = newParticipationClass;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.OPERATOR_REFERENCE_MAPPING__PARTICIPATION_CLASS, oldParticipationClass, participationClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JvmDeclaredType getOperator()
  {
    if (operator != null && operator.eIsProxy())
    {
      InternalEObject oldOperator = (InternalEObject)operator;
      operator = (JvmDeclaredType)eResolveProxy(oldOperator);
      if (operator != oldOperator)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERATOR, oldOperator, operator));
      }
    }
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmDeclaredType basicGetOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(JvmDeclaredType newOperator)
  {
    JvmDeclaredType oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ReferenceMappingOperand> getOperands()
  {
    if (operands == null)
    {
      operands = new EObjectContainmentEList<ReferenceMappingOperand>(ReferenceMappingOperand.class, this, LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERANDS);
    }
    return operands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERANDS:
        return ((InternalEList<?>)getOperands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__PARTICIPATION_CLASS:
        if (resolve) return getParticipationClass();
        return basicGetParticipationClass();
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERATOR:
        if (resolve) return getOperator();
        return basicGetOperator();
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERANDS:
        return getOperands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__PARTICIPATION_CLASS:
        setParticipationClass((ParticipationClass)newValue);
        return;
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERATOR:
        setOperator((JvmDeclaredType)newValue);
        return;
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERANDS:
        getOperands().clear();
        getOperands().addAll((Collection<? extends ReferenceMappingOperand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__PARTICIPATION_CLASS:
        setParticipationClass((ParticipationClass)null);
        return;
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERATOR:
        setOperator((JvmDeclaredType)null);
        return;
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERANDS:
        getOperands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__PARTICIPATION_CLASS:
        return participationClass != null;
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERATOR:
        return operator != null;
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING__OPERANDS:
        return operands != null && !operands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //OperatorReferenceMappingImpl
