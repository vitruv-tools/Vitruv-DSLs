/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import tools.vitruv.dsls.commonalities.language.Commonality;
import tools.vitruv.dsls.commonalities.language.CommonalityAttribute;
import tools.vitruv.dsls.commonalities.language.CommonalityReference;
import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.Participation;

import tools.vitruv.dsls.commonalities.language.elements.Classifier;
import tools.vitruv.dsls.commonalities.language.elements.Domain;
import tools.vitruv.dsls.commonalities.language.elements.MetaclassMember;
import tools.vitruv.dsls.commonalities.language.elements.PackageLike;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Commonality</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#getPackageLikeContainer <em>Package Like Container</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#getDomain <em>Domain</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#getAllMembers <em>All Members</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#isReferenced <em>Referenced</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#getName <em>Name</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#getParticipations <em>Participations</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.CommonalityImpl#getReferences <em>References</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommonalityImpl extends MinimalEObjectImpl.Container implements Commonality
{
  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The default value of the '{@link #isReferenced() <em>Referenced</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReferenced()
   * @generated
   * @ordered
   */
  protected static final boolean REFERENCED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isReferenced() <em>Referenced</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReferenced()
   * @generated
   * @ordered
   */
  protected boolean referenced = REFERENCED_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParticipations() <em>Participations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParticipations()
   * @generated
   * @ordered
   */
  protected EList<Participation> participations;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<CommonalityAttribute> attributes;

  /**
   * The cached value of the '{@link #getReferences() <em>References</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferences()
   * @generated
   * @ordered
   */
  protected EList<CommonalityReference> references;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommonalityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.COMMONALITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageLike getPackageLikeContainer()
  {
    PackageLike packageLikeContainer = basicGetPackageLikeContainer();
    return packageLikeContainer != null && packageLikeContainer.eIsProxy() ? (PackageLike)eResolveProxy((InternalEObject)packageLikeContainer) : packageLikeContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PackageLike basicGetPackageLikeContainer()
  {
    // TODO: implement this method to return the 'Package Like Container' reference
    // -> do not perform proxy resolution
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Domain getDomain()
  {
    Domain domain = basicGetDomain();
    return domain != null && domain.eIsProxy() ? (Domain)eResolveProxy((InternalEObject)domain) : domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domain basicGetDomain()
  {
    // TODO: implement this method to return the 'Domain' reference
    // -> do not perform proxy resolution
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MetaclassMember> getAllMembers()
  {
    // TODO: implement this method to return the 'All Members' reference list
    // Ensure that you remove @generated or mark it @generated NOT
    // The list is expected to implement org.eclipse.emf.ecore.util.InternalEList and org.eclipse.emf.ecore.EStructuralFeature.Setting
    // so it's likely that an appropriate subclass of org.eclipse.emf.ecore.util.EcoreEList should be used.
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAbstract()
  {
    // TODO: implement this method to return the 'Abstract' attribute
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isReferenced()
  {
    return referenced;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReferenced(boolean newReferenced)
  {
    boolean oldReferenced = referenced;
    referenced = newReferenced;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY__REFERENCED, oldReferenced, referenced));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.COMMONALITY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Participation> getParticipations()
  {
    if (participations == null)
    {
      participations = new EObjectContainmentEList<Participation>(Participation.class, this, LanguagePackage.COMMONALITY__PARTICIPATIONS);
    }
    return participations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CommonalityAttribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<CommonalityAttribute>(CommonalityAttribute.class, this, LanguagePackage.COMMONALITY__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CommonalityReference> getReferences()
  {
    if (references == null)
    {
      references = new EObjectContainmentEList<CommonalityReference>(CommonalityReference.class, this, LanguagePackage.COMMONALITY__REFERENCES);
    }
    return references;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSuperTypeOf(Classifier subType)
  {
    // TODO: implement this method
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY__PARTICIPATIONS:
        return ((InternalEList<?>)getParticipations()).basicRemove(otherEnd, msgs);
      case LanguagePackage.COMMONALITY__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
      case LanguagePackage.COMMONALITY__REFERENCES:
        return ((InternalEList<?>)getReferences()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY__PACKAGE_LIKE_CONTAINER:
        if (resolve) return getPackageLikeContainer();
        return basicGetPackageLikeContainer();
      case LanguagePackage.COMMONALITY__DOMAIN:
        if (resolve) return getDomain();
        return basicGetDomain();
      case LanguagePackage.COMMONALITY__ALL_MEMBERS:
        return getAllMembers();
      case LanguagePackage.COMMONALITY__ABSTRACT:
        return isAbstract();
      case LanguagePackage.COMMONALITY__REFERENCED:
        return isReferenced();
      case LanguagePackage.COMMONALITY__NAME:
        return getName();
      case LanguagePackage.COMMONALITY__PARTICIPATIONS:
        return getParticipations();
      case LanguagePackage.COMMONALITY__ATTRIBUTES:
        return getAttributes();
      case LanguagePackage.COMMONALITY__REFERENCES:
        return getReferences();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY__REFERENCED:
        setReferenced((Boolean)newValue);
        return;
      case LanguagePackage.COMMONALITY__NAME:
        setName((String)newValue);
        return;
      case LanguagePackage.COMMONALITY__PARTICIPATIONS:
        getParticipations().clear();
        getParticipations().addAll((Collection<? extends Participation>)newValue);
        return;
      case LanguagePackage.COMMONALITY__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends CommonalityAttribute>)newValue);
        return;
      case LanguagePackage.COMMONALITY__REFERENCES:
        getReferences().clear();
        getReferences().addAll((Collection<? extends CommonalityReference>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY__REFERENCED:
        setReferenced(REFERENCED_EDEFAULT);
        return;
      case LanguagePackage.COMMONALITY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LanguagePackage.COMMONALITY__PARTICIPATIONS:
        getParticipations().clear();
        return;
      case LanguagePackage.COMMONALITY__ATTRIBUTES:
        getAttributes().clear();
        return;
      case LanguagePackage.COMMONALITY__REFERENCES:
        getReferences().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.COMMONALITY__PACKAGE_LIKE_CONTAINER:
        return basicGetPackageLikeContainer() != null;
      case LanguagePackage.COMMONALITY__DOMAIN:
        return basicGetDomain() != null;
      case LanguagePackage.COMMONALITY__ALL_MEMBERS:
        return !getAllMembers().isEmpty();
      case LanguagePackage.COMMONALITY__ABSTRACT:
        return isAbstract() != ABSTRACT_EDEFAULT;
      case LanguagePackage.COMMONALITY__REFERENCED:
        return referenced != REFERENCED_EDEFAULT;
      case LanguagePackage.COMMONALITY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LanguagePackage.COMMONALITY__PARTICIPATIONS:
        return participations != null && !participations.isEmpty();
      case LanguagePackage.COMMONALITY__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case LanguagePackage.COMMONALITY__REFERENCES:
        return references != null && !references.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (referenced: ");
    result.append(referenced);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //CommonalityImpl
