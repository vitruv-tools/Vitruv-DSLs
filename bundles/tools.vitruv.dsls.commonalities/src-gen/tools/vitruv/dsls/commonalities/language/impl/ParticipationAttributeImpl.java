/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.ParticipationAttribute;
import tools.vitruv.dsls.commonalities.language.ParticipationClass;

import tools.vitruv.dsls.commonalities.language.elements.Attribute;
import tools.vitruv.dsls.commonalities.language.elements.ClassLike;
import tools.vitruv.dsls.commonalities.language.elements.Classifier;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Participation Attribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationAttributeImpl#getClassLikeContainer <em>Class Like Container</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationAttributeImpl#isMultiValued <em>Multi Valued</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationAttributeImpl#getParticipationClass <em>Participation Class</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationAttributeImpl#getAttribute <em>Attribute</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParticipationAttributeImpl extends MinimalEObjectImpl.Container implements ParticipationAttribute
{
  /**
   * The default value of the '{@link #isMultiValued() <em>Multi Valued</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMultiValued()
   * @generated
   * @ordered
   */
  protected static final boolean MULTI_VALUED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #getParticipationClass() <em>Participation Class</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParticipationClass()
   * @generated
   * @ordered
   */
  protected ParticipationClass participationClass;

  /**
   * The cached value of the '{@link #getAttribute() <em>Attribute</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttribute()
   * @generated
   * @ordered
   */
  protected Attribute attribute;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParticipationAttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassLike getClassLikeContainer()
  {
    ClassLike classLikeContainer = basicGetClassLikeContainer();
    return classLikeContainer != null && classLikeContainer.eIsProxy() ? (ClassLike)eResolveProxy((InternalEObject)classLikeContainer) : classLikeContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassLike basicGetClassLikeContainer()
  {
    // TODO: implement this method to return the 'Class Like Container' reference
    // -> do not perform proxy resolution
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMultiValued()
  {
    // TODO: implement this method to return the 'Multi Valued' attribute
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationClass getParticipationClass()
  {
    if (participationClass != null && participationClass.eIsProxy())
    {
      InternalEObject oldParticipationClass = (InternalEObject)participationClass;
      participationClass = (ParticipationClass)eResolveProxy(oldParticipationClass);
      if (participationClass != oldParticipationClass)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LanguagePackage.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS, oldParticipationClass, participationClass));
      }
    }
    return participationClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParticipationClass basicGetParticipationClass()
  {
    return participationClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParticipationClass(ParticipationClass newParticipationClass)
  {
    ParticipationClass oldParticipationClass = participationClass;
    participationClass = newParticipationClass;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS, oldParticipationClass, participationClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute getAttribute()
  {
    if (attribute != null && attribute.eIsProxy())
    {
      InternalEObject oldAttribute = (InternalEObject)attribute;
      attribute = (Attribute)eResolveProxy(oldAttribute);
      if (attribute != oldAttribute)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LanguagePackage.PARTICIPATION_ATTRIBUTE__ATTRIBUTE, oldAttribute, attribute));
      }
    }
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetAttribute()
  {
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttribute(Attribute newAttribute)
  {
    Attribute oldAttribute = attribute;
    attribute = newAttribute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION_ATTRIBUTE__ATTRIBUTE, oldAttribute, attribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Classifier getType()
  {
    // TODO: implement this method
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    // TODO: implement this method
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__CLASS_LIKE_CONTAINER:
        if (resolve) return getClassLikeContainer();
        return basicGetClassLikeContainer();
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__MULTI_VALUED:
        return isMultiValued();
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS:
        if (resolve) return getParticipationClass();
        return basicGetParticipationClass();
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__ATTRIBUTE:
        if (resolve) return getAttribute();
        return basicGetAttribute();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS:
        setParticipationClass((ParticipationClass)newValue);
        return;
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__ATTRIBUTE:
        setAttribute((Attribute)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS:
        setParticipationClass((ParticipationClass)null);
        return;
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__ATTRIBUTE:
        setAttribute((Attribute)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__CLASS_LIKE_CONTAINER:
        return basicGetClassLikeContainer() != null;
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__MULTI_VALUED:
        return isMultiValued() != MULTI_VALUED_EDEFAULT;
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS:
        return participationClass != null;
      case LanguagePackage.PARTICIPATION_ATTRIBUTE__ATTRIBUTE:
        return attribute != null;
    }
    return super.eIsSet(featureID);
  }

} //ParticipationAttributeImpl
