/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import tools.vitruv.dsls.commonalities.language.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LanguageFactoryImpl extends EFactoryImpl implements LanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LanguageFactory init()
  {
    try
    {
      LanguageFactory theLanguageFactory = (LanguageFactory)EPackage.Registry.INSTANCE.getEFactory(LanguagePackage.eNS_URI);
      if (theLanguageFactory != null)
      {
        return theLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LanguagePackage.COMMONALITY_FILE: return createCommonalityFile();
      case LanguagePackage.OPERATOR_IMPORT: return createOperatorImport();
      case LanguagePackage.CONCEPT: return createConcept();
      case LanguagePackage.COMMONALITY: return createCommonality();
      case LanguagePackage.PARTICIPATION: return createParticipation();
      case LanguagePackage.PARTICIPATION_CLASS: return createParticipationClass();
      case LanguagePackage.PARTICIPATION_PART: return createParticipationPart();
      case LanguagePackage.PARTICIPATION_RELATION: return createParticipationRelation();
      case LanguagePackage.PARTICIPATION_CONDITION: return createParticipationCondition();
      case LanguagePackage.PARTICIPATION_CONDITION_OPERAND: return createParticipationConditionOperand();
      case LanguagePackage.COMMONALITY_ATTRIBUTE: return createCommonalityAttribute();
      case LanguagePackage.COMMONALITY_ATTRIBUTE_MAPPING: return createCommonalityAttributeMapping();
      case LanguagePackage.SIMPLE_ATTRIBUTE_MAPPING: return createSimpleAttributeMapping();
      case LanguagePackage.OPERATOR_ATTRIBUTE_MAPPING: return createOperatorAttributeMapping();
      case LanguagePackage.ATTRIBUTE_MAPPING_OPERAND: return createAttributeMappingOperand();
      case LanguagePackage.PARTICIPATION_ATTRIBUTE: return createParticipationAttribute();
      case LanguagePackage.COMMONALITY_ATTRIBUTE_REFERENCE: return createCommonalityAttributeReference();
      case LanguagePackage.COMMONALITY_REFERENCE: return createCommonalityReference();
      case LanguagePackage.COMMONALITY_REFERENCE_MAPPING: return createCommonalityReferenceMapping();
      case LanguagePackage.SIMPLE_REFERENCE_MAPPING: return createSimpleReferenceMapping();
      case LanguagePackage.OPERATOR_REFERENCE_MAPPING: return createOperatorReferenceMapping();
      case LanguagePackage.REFERENCE_MAPPING_OPERAND: return createReferenceMappingOperand();
      case LanguagePackage.REFERENCED_PARTICIPATION_ATTRIBUTE_OPERAND: return createReferencedParticipationAttributeOperand();
      case LanguagePackage.OPERAND: return createOperand();
      case LanguagePackage.LITERAL_OPERAND: return createLiteralOperand();
      case LanguagePackage.PARTICIPATION_CLASS_OPERAND: return createParticipationClassOperand();
      case LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND: return createParticipationAttributeOperand();
      case LanguagePackage.COMMONALITY_ATTRIBUTE_OPERAND: return createCommonalityAttributeOperand();
      case LanguagePackage.BIDIRECTIONAL_PARTICIPATION_CONDITION: return createBidirectionalParticipationCondition();
      case LanguagePackage.ENFORCED_PARTICIPATION_CONDITION: return createEnforcedParticipationCondition();
      case LanguagePackage.CHECKED_PARTICIPATION_CONDITION: return createCheckedParticipationCondition();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommonalityFile createCommonalityFile()
  {
    CommonalityFileImpl commonalityFile = new CommonalityFileImpl();
    return commonalityFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperatorImport createOperatorImport()
  {
    OperatorImportImpl operatorImport = new OperatorImportImpl();
    return operatorImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept createConcept()
  {
    ConceptImpl concept = new ConceptImpl();
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Commonality createCommonality()
  {
    CommonalityImpl commonality = new CommonalityImpl();
    return commonality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Participation createParticipation()
  {
    ParticipationImpl participation = new ParticipationImpl();
    return participation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationClass createParticipationClass()
  {
    ParticipationClassImpl participationClass = new ParticipationClassImpl();
    return participationClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationPart createParticipationPart()
  {
    ParticipationPartImpl participationPart = new ParticipationPartImpl();
    return participationPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationRelation createParticipationRelation()
  {
    ParticipationRelationImpl participationRelation = new ParticipationRelationImpl();
    return participationRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationCondition createParticipationCondition()
  {
    ParticipationConditionImpl participationCondition = new ParticipationConditionImpl();
    return participationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationConditionOperand createParticipationConditionOperand()
  {
    ParticipationConditionOperandImpl participationConditionOperand = new ParticipationConditionOperandImpl();
    return participationConditionOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommonalityAttribute createCommonalityAttribute()
  {
    CommonalityAttributeImpl commonalityAttribute = new CommonalityAttributeImpl();
    return commonalityAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommonalityAttributeMapping createCommonalityAttributeMapping()
  {
    CommonalityAttributeMappingImpl commonalityAttributeMapping = new CommonalityAttributeMappingImpl();
    return commonalityAttributeMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleAttributeMapping createSimpleAttributeMapping()
  {
    SimpleAttributeMappingImpl simpleAttributeMapping = new SimpleAttributeMappingImpl();
    return simpleAttributeMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperatorAttributeMapping createOperatorAttributeMapping()
  {
    OperatorAttributeMappingImpl operatorAttributeMapping = new OperatorAttributeMappingImpl();
    return operatorAttributeMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeMappingOperand createAttributeMappingOperand()
  {
    AttributeMappingOperandImpl attributeMappingOperand = new AttributeMappingOperandImpl();
    return attributeMappingOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationAttribute createParticipationAttribute()
  {
    ParticipationAttributeImpl participationAttribute = new ParticipationAttributeImpl();
    return participationAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommonalityAttributeReference createCommonalityAttributeReference()
  {
    CommonalityAttributeReferenceImpl commonalityAttributeReference = new CommonalityAttributeReferenceImpl();
    return commonalityAttributeReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommonalityReference createCommonalityReference()
  {
    CommonalityReferenceImpl commonalityReference = new CommonalityReferenceImpl();
    return commonalityReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommonalityReferenceMapping createCommonalityReferenceMapping()
  {
    CommonalityReferenceMappingImpl commonalityReferenceMapping = new CommonalityReferenceMappingImpl();
    return commonalityReferenceMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleReferenceMapping createSimpleReferenceMapping()
  {
    SimpleReferenceMappingImpl simpleReferenceMapping = new SimpleReferenceMappingImpl();
    return simpleReferenceMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperatorReferenceMapping createOperatorReferenceMapping()
  {
    OperatorReferenceMappingImpl operatorReferenceMapping = new OperatorReferenceMappingImpl();
    return operatorReferenceMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReferenceMappingOperand createReferenceMappingOperand()
  {
    ReferenceMappingOperandImpl referenceMappingOperand = new ReferenceMappingOperandImpl();
    return referenceMappingOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReferencedParticipationAttributeOperand createReferencedParticipationAttributeOperand()
  {
    ReferencedParticipationAttributeOperandImpl referencedParticipationAttributeOperand = new ReferencedParticipationAttributeOperandImpl();
    return referencedParticipationAttributeOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operand createOperand()
  {
    OperandImpl operand = new OperandImpl();
    return operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralOperand createLiteralOperand()
  {
    LiteralOperandImpl literalOperand = new LiteralOperandImpl();
    return literalOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationClassOperand createParticipationClassOperand()
  {
    ParticipationClassOperandImpl participationClassOperand = new ParticipationClassOperandImpl();
    return participationClassOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationAttributeOperand createParticipationAttributeOperand()
  {
    ParticipationAttributeOperandImpl participationAttributeOperand = new ParticipationAttributeOperandImpl();
    return participationAttributeOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommonalityAttributeOperand createCommonalityAttributeOperand()
  {
    CommonalityAttributeOperandImpl commonalityAttributeOperand = new CommonalityAttributeOperandImpl();
    return commonalityAttributeOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BidirectionalParticipationCondition createBidirectionalParticipationCondition()
  {
    BidirectionalParticipationConditionImpl bidirectionalParticipationCondition = new BidirectionalParticipationConditionImpl();
    return bidirectionalParticipationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnforcedParticipationCondition createEnforcedParticipationCondition()
  {
    EnforcedParticipationConditionImpl enforcedParticipationCondition = new EnforcedParticipationConditionImpl();
    return enforcedParticipationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckedParticipationCondition createCheckedParticipationCondition()
  {
    CheckedParticipationConditionImpl checkedParticipationCondition = new CheckedParticipationConditionImpl();
    return checkedParticipationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LanguagePackage getLanguagePackage()
  {
    return (LanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LanguagePackage getPackage()
  {
    return LanguagePackage.eINSTANCE;
  }

} //LanguageFactoryImpl
