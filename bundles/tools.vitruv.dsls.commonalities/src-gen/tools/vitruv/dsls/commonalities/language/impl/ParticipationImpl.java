/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.Participation;
import tools.vitruv.dsls.commonalities.language.ParticipationCondition;
import tools.vitruv.dsls.commonalities.language.ParticipationPart;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Participation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationImpl#getDomainName <em>Domain Name</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationImpl#getDomainAlias <em>Domain Alias</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationImpl#getParts <em>Parts</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationImpl#getConditions <em>Conditions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParticipationImpl extends MinimalEObjectImpl.Container implements Participation
{
  /**
   * The default value of the '{@link #getDomainName() <em>Domain Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainName()
   * @generated
   * @ordered
   */
  protected static final String DOMAIN_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDomainName() <em>Domain Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainName()
   * @generated
   * @ordered
   */
  protected String domainName = DOMAIN_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDomainAlias() <em>Domain Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainAlias()
   * @generated
   * @ordered
   */
  protected static final String DOMAIN_ALIAS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDomainAlias() <em>Domain Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainAlias()
   * @generated
   * @ordered
   */
  protected String domainAlias = DOMAIN_ALIAS_EDEFAULT;

  /**
   * The cached value of the '{@link #getParts() <em>Parts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParts()
   * @generated
   * @ordered
   */
  protected EList<ParticipationPart> parts;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<ParticipationCondition> conditions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParticipationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.PARTICIPATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDomainName()
  {
    return domainName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDomainName(String newDomainName)
  {
    String oldDomainName = domainName;
    domainName = newDomainName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION__DOMAIN_NAME, oldDomainName, domainName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDomainAlias()
  {
    return domainAlias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDomainAlias(String newDomainAlias)
  {
    String oldDomainAlias = domainAlias;
    domainAlias = newDomainAlias;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION__DOMAIN_ALIAS, oldDomainAlias, domainAlias));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParticipationPart> getParts()
  {
    if (parts == null)
    {
      parts = new EObjectContainmentEList<ParticipationPart>(ParticipationPart.class, this, LanguagePackage.PARTICIPATION__PARTS);
    }
    return parts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParticipationCondition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<ParticipationCondition>(ParticipationCondition.class, this, LanguagePackage.PARTICIPATION__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    // TODO: implement this method
    // Ensure that you remove @generated or mark it @generated NOT
    throw new UnsupportedOperationException();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION__PARTS:
        return ((InternalEList<?>)getParts()).basicRemove(otherEnd, msgs);
      case LanguagePackage.PARTICIPATION__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION__DOMAIN_NAME:
        return getDomainName();
      case LanguagePackage.PARTICIPATION__DOMAIN_ALIAS:
        return getDomainAlias();
      case LanguagePackage.PARTICIPATION__PARTS:
        return getParts();
      case LanguagePackage.PARTICIPATION__CONDITIONS:
        return getConditions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION__DOMAIN_NAME:
        setDomainName((String)newValue);
        return;
      case LanguagePackage.PARTICIPATION__DOMAIN_ALIAS:
        setDomainAlias((String)newValue);
        return;
      case LanguagePackage.PARTICIPATION__PARTS:
        getParts().clear();
        getParts().addAll((Collection<? extends ParticipationPart>)newValue);
        return;
      case LanguagePackage.PARTICIPATION__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends ParticipationCondition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION__DOMAIN_NAME:
        setDomainName(DOMAIN_NAME_EDEFAULT);
        return;
      case LanguagePackage.PARTICIPATION__DOMAIN_ALIAS:
        setDomainAlias(DOMAIN_ALIAS_EDEFAULT);
        return;
      case LanguagePackage.PARTICIPATION__PARTS:
        getParts().clear();
        return;
      case LanguagePackage.PARTICIPATION__CONDITIONS:
        getConditions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION__DOMAIN_NAME:
        return DOMAIN_NAME_EDEFAULT == null ? domainName != null : !DOMAIN_NAME_EDEFAULT.equals(domainName);
      case LanguagePackage.PARTICIPATION__DOMAIN_ALIAS:
        return DOMAIN_ALIAS_EDEFAULT == null ? domainAlias != null : !DOMAIN_ALIAS_EDEFAULT.equals(domainAlias);
      case LanguagePackage.PARTICIPATION__PARTS:
        return parts != null && !parts.isEmpty();
      case LanguagePackage.PARTICIPATION__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (domainName: ");
    result.append(domainName);
    result.append(", domainAlias: ");
    result.append(domainAlias);
    result.append(')');
    return result.toString();
  }

} //ParticipationImpl
