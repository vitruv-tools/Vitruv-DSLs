/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.common.types.JvmDeclaredType;

import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.ParticipationCondition;
import tools.vitruv.dsls.commonalities.language.ParticipationConditionOperand;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Participation Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationConditionImpl#getLeftOperand <em>Left Operand</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationConditionImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationConditionImpl#getRightOperands <em>Right Operands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParticipationConditionImpl extends MinimalEObjectImpl.Container implements ParticipationCondition
{
  /**
   * The cached value of the '{@link #getLeftOperand() <em>Left Operand</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftOperand()
   * @generated
   * @ordered
   */
  protected ParticipationConditionOperand leftOperand;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected JvmDeclaredType operator;

  /**
   * The cached value of the '{@link #getRightOperands() <em>Right Operands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightOperands()
   * @generated
   * @ordered
   */
  protected EList<ParticipationConditionOperand> rightOperands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParticipationConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.PARTICIPATION_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParticipationConditionOperand getLeftOperand()
  {
    return leftOperand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftOperand(ParticipationConditionOperand newLeftOperand, NotificationChain msgs)
  {
    ParticipationConditionOperand oldLeftOperand = leftOperand;
    leftOperand = newLeftOperand;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND, oldLeftOperand, newLeftOperand);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeftOperand(ParticipationConditionOperand newLeftOperand)
  {
    if (newLeftOperand != leftOperand)
    {
      NotificationChain msgs = null;
      if (leftOperand != null)
        msgs = ((InternalEObject)leftOperand).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND, null, msgs);
      if (newLeftOperand != null)
        msgs = ((InternalEObject)newLeftOperand).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND, null, msgs);
      msgs = basicSetLeftOperand(newLeftOperand, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND, newLeftOperand, newLeftOperand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JvmDeclaredType getOperator()
  {
    if (operator != null && operator.eIsProxy())
    {
      InternalEObject oldOperator = (InternalEObject)operator;
      operator = (JvmDeclaredType)eResolveProxy(oldOperator);
      if (operator != oldOperator)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LanguagePackage.PARTICIPATION_CONDITION__OPERATOR, oldOperator, operator));
      }
    }
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmDeclaredType basicGetOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(JvmDeclaredType newOperator)
  {
    JvmDeclaredType oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION_CONDITION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParticipationConditionOperand> getRightOperands()
  {
    if (rightOperands == null)
    {
      rightOperands = new EObjectContainmentEList<ParticipationConditionOperand>(ParticipationConditionOperand.class, this, LanguagePackage.PARTICIPATION_CONDITION__RIGHT_OPERANDS);
    }
    return rightOperands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND:
        return basicSetLeftOperand(null, msgs);
      case LanguagePackage.PARTICIPATION_CONDITION__RIGHT_OPERANDS:
        return ((InternalEList<?>)getRightOperands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND:
        return getLeftOperand();
      case LanguagePackage.PARTICIPATION_CONDITION__OPERATOR:
        if (resolve) return getOperator();
        return basicGetOperator();
      case LanguagePackage.PARTICIPATION_CONDITION__RIGHT_OPERANDS:
        return getRightOperands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND:
        setLeftOperand((ParticipationConditionOperand)newValue);
        return;
      case LanguagePackage.PARTICIPATION_CONDITION__OPERATOR:
        setOperator((JvmDeclaredType)newValue);
        return;
      case LanguagePackage.PARTICIPATION_CONDITION__RIGHT_OPERANDS:
        getRightOperands().clear();
        getRightOperands().addAll((Collection<? extends ParticipationConditionOperand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND:
        setLeftOperand((ParticipationConditionOperand)null);
        return;
      case LanguagePackage.PARTICIPATION_CONDITION__OPERATOR:
        setOperator((JvmDeclaredType)null);
        return;
      case LanguagePackage.PARTICIPATION_CONDITION__RIGHT_OPERANDS:
        getRightOperands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_CONDITION__LEFT_OPERAND:
        return leftOperand != null;
      case LanguagePackage.PARTICIPATION_CONDITION__OPERATOR:
        return operator != null;
      case LanguagePackage.PARTICIPATION_CONDITION__RIGHT_OPERANDS:
        return rightOperands != null && !rightOperands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ParticipationConditionImpl
