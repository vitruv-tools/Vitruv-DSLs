/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import tools.vitruv.dsls.commonalities.language.*;

import tools.vitruv.dsls.commonalities.language.elements.Attribute;
import tools.vitruv.dsls.commonalities.language.elements.ClassLike;
import tools.vitruv.dsls.commonalities.language.elements.Classifier;
import tools.vitruv.dsls.commonalities.language.elements.Domain;
import tools.vitruv.dsls.commonalities.language.elements.MemberLike;
import tools.vitruv.dsls.commonalities.language.elements.Metaclass;
import tools.vitruv.dsls.commonalities.language.elements.MetaclassMember;
import tools.vitruv.dsls.commonalities.language.elements.NamedElement;
import tools.vitruv.dsls.commonalities.language.elements.PackageLike;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see tools.vitruv.dsls.commonalities.language.LanguagePackage
 * @generated
 */
public class LanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LanguageSwitch<Adapter> modelSwitch =
    new LanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseCommonalityFile(CommonalityFile object)
      {
        return createCommonalityFileAdapter();
      }
      @Override
      public Adapter caseOperatorImport(OperatorImport object)
      {
        return createOperatorImportAdapter();
      }
      @Override
      public Adapter caseConcept(Concept object)
      {
        return createConceptAdapter();
      }
      @Override
      public Adapter caseCommonality(Commonality object)
      {
        return createCommonalityAdapter();
      }
      @Override
      public Adapter caseParticipation(Participation object)
      {
        return createParticipationAdapter();
      }
      @Override
      public Adapter caseParticipationClass(ParticipationClass object)
      {
        return createParticipationClassAdapter();
      }
      @Override
      public Adapter caseParticipationPart(ParticipationPart object)
      {
        return createParticipationPartAdapter();
      }
      @Override
      public Adapter caseParticipationRelation(ParticipationRelation object)
      {
        return createParticipationRelationAdapter();
      }
      @Override
      public Adapter caseParticipationCondition(ParticipationCondition object)
      {
        return createParticipationConditionAdapter();
      }
      @Override
      public Adapter caseParticipationConditionOperand(ParticipationConditionOperand object)
      {
        return createParticipationConditionOperandAdapter();
      }
      @Override
      public Adapter caseCommonalityAttribute(CommonalityAttribute object)
      {
        return createCommonalityAttributeAdapter();
      }
      @Override
      public Adapter caseCommonalityAttributeMapping(CommonalityAttributeMapping object)
      {
        return createCommonalityAttributeMappingAdapter();
      }
      @Override
      public Adapter caseSimpleAttributeMapping(SimpleAttributeMapping object)
      {
        return createSimpleAttributeMappingAdapter();
      }
      @Override
      public Adapter caseOperatorAttributeMapping(OperatorAttributeMapping object)
      {
        return createOperatorAttributeMappingAdapter();
      }
      @Override
      public Adapter caseAttributeMappingOperand(AttributeMappingOperand object)
      {
        return createAttributeMappingOperandAdapter();
      }
      @Override
      public Adapter caseParticipationAttribute(ParticipationAttribute object)
      {
        return createParticipationAttributeAdapter();
      }
      @Override
      public Adapter caseCommonalityAttributeReference(CommonalityAttributeReference object)
      {
        return createCommonalityAttributeReferenceAdapter();
      }
      @Override
      public Adapter caseCommonalityReference(CommonalityReference object)
      {
        return createCommonalityReferenceAdapter();
      }
      @Override
      public Adapter caseCommonalityReferenceMapping(CommonalityReferenceMapping object)
      {
        return createCommonalityReferenceMappingAdapter();
      }
      @Override
      public Adapter caseSimpleReferenceMapping(SimpleReferenceMapping object)
      {
        return createSimpleReferenceMappingAdapter();
      }
      @Override
      public Adapter caseOperatorReferenceMapping(OperatorReferenceMapping object)
      {
        return createOperatorReferenceMappingAdapter();
      }
      @Override
      public Adapter caseReferenceMappingOperand(ReferenceMappingOperand object)
      {
        return createReferenceMappingOperandAdapter();
      }
      @Override
      public Adapter caseReferencedParticipationAttributeOperand(ReferencedParticipationAttributeOperand object)
      {
        return createReferencedParticipationAttributeOperandAdapter();
      }
      @Override
      public Adapter caseOperand(Operand object)
      {
        return createOperandAdapter();
      }
      @Override
      public Adapter caseLiteralOperand(LiteralOperand object)
      {
        return createLiteralOperandAdapter();
      }
      @Override
      public Adapter caseParticipationClassOperand(ParticipationClassOperand object)
      {
        return createParticipationClassOperandAdapter();
      }
      @Override
      public Adapter caseParticipationAttributeOperand(ParticipationAttributeOperand object)
      {
        return createParticipationAttributeOperandAdapter();
      }
      @Override
      public Adapter caseCommonalityAttributeOperand(CommonalityAttributeOperand object)
      {
        return createCommonalityAttributeOperandAdapter();
      }
      @Override
      public Adapter caseBidirectionalParticipationCondition(BidirectionalParticipationCondition object)
      {
        return createBidirectionalParticipationConditionAdapter();
      }
      @Override
      public Adapter caseEnforcedParticipationCondition(EnforcedParticipationCondition object)
      {
        return createEnforcedParticipationConditionAdapter();
      }
      @Override
      public Adapter caseCheckedParticipationCondition(CheckedParticipationCondition object)
      {
        return createCheckedParticipationConditionAdapter();
      }
      @Override
      public Adapter caseNamedElement(NamedElement object)
      {
        return createNamedElementAdapter();
      }
      @Override
      public Adapter casePackageLike(PackageLike object)
      {
        return createPackageLikeAdapter();
      }
      @Override
      public Adapter caseDomain(Domain object)
      {
        return createDomainAdapter();
      }
      @Override
      public Adapter caseClassLike(ClassLike object)
      {
        return createClassLikeAdapter();
      }
      @Override
      public Adapter caseClassifier(Classifier object)
      {
        return createClassifierAdapter();
      }
      @Override
      public Adapter caseMetaclass(Metaclass object)
      {
        return createMetaclassAdapter();
      }
      @Override
      public Adapter caseMemberLike(MemberLike object)
      {
        return createMemberLikeAdapter();
      }
      @Override
      public Adapter caseMetaclassMember(MetaclassMember object)
      {
        return createMetaclassMemberAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.CommonalityFile <em>Commonality File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.CommonalityFile
   * @generated
   */
  public Adapter createCommonalityFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.OperatorImport <em>Operator Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.OperatorImport
   * @generated
   */
  public Adapter createOperatorImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.Concept <em>Concept</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.Concept
   * @generated
   */
  public Adapter createConceptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.Commonality <em>Commonality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.Commonality
   * @generated
   */
  public Adapter createCommonalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.Participation <em>Participation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.Participation
   * @generated
   */
  public Adapter createParticipationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ParticipationClass <em>Participation Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ParticipationClass
   * @generated
   */
  public Adapter createParticipationClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ParticipationPart <em>Participation Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ParticipationPart
   * @generated
   */
  public Adapter createParticipationPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ParticipationRelation <em>Participation Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ParticipationRelation
   * @generated
   */
  public Adapter createParticipationRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ParticipationCondition <em>Participation Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ParticipationCondition
   * @generated
   */
  public Adapter createParticipationConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ParticipationConditionOperand <em>Participation Condition Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ParticipationConditionOperand
   * @generated
   */
  public Adapter createParticipationConditionOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.CommonalityAttribute <em>Commonality Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.CommonalityAttribute
   * @generated
   */
  public Adapter createCommonalityAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.CommonalityAttributeMapping <em>Commonality Attribute Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.CommonalityAttributeMapping
   * @generated
   */
  public Adapter createCommonalityAttributeMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.SimpleAttributeMapping <em>Simple Attribute Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.SimpleAttributeMapping
   * @generated
   */
  public Adapter createSimpleAttributeMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.OperatorAttributeMapping <em>Operator Attribute Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.OperatorAttributeMapping
   * @generated
   */
  public Adapter createOperatorAttributeMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.AttributeMappingOperand <em>Attribute Mapping Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.AttributeMappingOperand
   * @generated
   */
  public Adapter createAttributeMappingOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ParticipationAttribute <em>Participation Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ParticipationAttribute
   * @generated
   */
  public Adapter createParticipationAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.CommonalityAttributeReference <em>Commonality Attribute Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.CommonalityAttributeReference
   * @generated
   */
  public Adapter createCommonalityAttributeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.CommonalityReference <em>Commonality Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.CommonalityReference
   * @generated
   */
  public Adapter createCommonalityReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.CommonalityReferenceMapping <em>Commonality Reference Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.CommonalityReferenceMapping
   * @generated
   */
  public Adapter createCommonalityReferenceMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.SimpleReferenceMapping <em>Simple Reference Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.SimpleReferenceMapping
   * @generated
   */
  public Adapter createSimpleReferenceMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.OperatorReferenceMapping <em>Operator Reference Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.OperatorReferenceMapping
   * @generated
   */
  public Adapter createOperatorReferenceMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ReferenceMappingOperand <em>Reference Mapping Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ReferenceMappingOperand
   * @generated
   */
  public Adapter createReferenceMappingOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ReferencedParticipationAttributeOperand <em>Referenced Participation Attribute Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ReferencedParticipationAttributeOperand
   * @generated
   */
  public Adapter createReferencedParticipationAttributeOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.Operand <em>Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.Operand
   * @generated
   */
  public Adapter createOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.LiteralOperand <em>Literal Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.LiteralOperand
   * @generated
   */
  public Adapter createLiteralOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ParticipationClassOperand <em>Participation Class Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ParticipationClassOperand
   * @generated
   */
  public Adapter createParticipationClassOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.ParticipationAttributeOperand <em>Participation Attribute Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.ParticipationAttributeOperand
   * @generated
   */
  public Adapter createParticipationAttributeOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.CommonalityAttributeOperand <em>Commonality Attribute Operand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.CommonalityAttributeOperand
   * @generated
   */
  public Adapter createCommonalityAttributeOperandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.BidirectionalParticipationCondition <em>Bidirectional Participation Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.BidirectionalParticipationCondition
   * @generated
   */
  public Adapter createBidirectionalParticipationConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.EnforcedParticipationCondition <em>Enforced Participation Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.EnforcedParticipationCondition
   * @generated
   */
  public Adapter createEnforcedParticipationConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.CheckedParticipationCondition <em>Checked Participation Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.CheckedParticipationCondition
   * @generated
   */
  public Adapter createCheckedParticipationConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.NamedElement <em>Named Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.NamedElement
   * @generated
   */
  public Adapter createNamedElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.PackageLike <em>Package Like</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.PackageLike
   * @generated
   */
  public Adapter createPackageLikeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.Domain <em>Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.Domain
   * @generated
   */
  public Adapter createDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.ClassLike <em>Class Like</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.ClassLike
   * @generated
   */
  public Adapter createClassLikeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.Classifier <em>Classifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.Classifier
   * @generated
   */
  public Adapter createClassifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.Metaclass <em>Metaclass</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.Metaclass
   * @generated
   */
  public Adapter createMetaclassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.MemberLike <em>Member Like</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.MemberLike
   * @generated
   */
  public Adapter createMemberLikeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.MetaclassMember <em>Metaclass Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.MetaclassMember
   * @generated
   */
  public Adapter createMetaclassMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link tools.vitruv.dsls.commonalities.language.elements.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see tools.vitruv.dsls.commonalities.language.elements.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LanguageAdapterFactory
