/**
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.language.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.common.types.JvmDeclaredType;

import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.ParticipationPart;
import tools.vitruv.dsls.commonalities.language.ParticipationRelation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Participation Relation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationRelationImpl#getLeftParts <em>Left Parts</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationRelationImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link tools.vitruv.dsls.commonalities.language.impl.ParticipationRelationImpl#getRightParts <em>Right Parts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParticipationRelationImpl extends ParticipationPartImpl implements ParticipationRelation
{
  /**
   * The cached value of the '{@link #getLeftParts() <em>Left Parts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftParts()
   * @generated
   * @ordered
   */
  protected EList<ParticipationPart> leftParts;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected JvmDeclaredType operator;

  /**
   * The cached value of the '{@link #getRightParts() <em>Right Parts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightParts()
   * @generated
   * @ordered
   */
  protected EList<ParticipationPart> rightParts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParticipationRelationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.PARTICIPATION_RELATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParticipationPart> getLeftParts()
  {
    if (leftParts == null)
    {
      leftParts = new EObjectContainmentEList<ParticipationPart>(ParticipationPart.class, this, LanguagePackage.PARTICIPATION_RELATION__LEFT_PARTS);
    }
    return leftParts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JvmDeclaredType getOperator()
  {
    if (operator != null && operator.eIsProxy())
    {
      InternalEObject oldOperator = (InternalEObject)operator;
      operator = (JvmDeclaredType)eResolveProxy(oldOperator);
      if (operator != oldOperator)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LanguagePackage.PARTICIPATION_RELATION__OPERATOR, oldOperator, operator));
      }
    }
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmDeclaredType basicGetOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(JvmDeclaredType newOperator)
  {
    JvmDeclaredType oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.PARTICIPATION_RELATION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParticipationPart> getRightParts()
  {
    if (rightParts == null)
    {
      rightParts = new EObjectContainmentEList<ParticipationPart>(ParticipationPart.class, this, LanguagePackage.PARTICIPATION_RELATION__RIGHT_PARTS);
    }
    return rightParts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_RELATION__LEFT_PARTS:
        return ((InternalEList<?>)getLeftParts()).basicRemove(otherEnd, msgs);
      case LanguagePackage.PARTICIPATION_RELATION__RIGHT_PARTS:
        return ((InternalEList<?>)getRightParts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_RELATION__LEFT_PARTS:
        return getLeftParts();
      case LanguagePackage.PARTICIPATION_RELATION__OPERATOR:
        if (resolve) return getOperator();
        return basicGetOperator();
      case LanguagePackage.PARTICIPATION_RELATION__RIGHT_PARTS:
        return getRightParts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_RELATION__LEFT_PARTS:
        getLeftParts().clear();
        getLeftParts().addAll((Collection<? extends ParticipationPart>)newValue);
        return;
      case LanguagePackage.PARTICIPATION_RELATION__OPERATOR:
        setOperator((JvmDeclaredType)newValue);
        return;
      case LanguagePackage.PARTICIPATION_RELATION__RIGHT_PARTS:
        getRightParts().clear();
        getRightParts().addAll((Collection<? extends ParticipationPart>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_RELATION__LEFT_PARTS:
        getLeftParts().clear();
        return;
      case LanguagePackage.PARTICIPATION_RELATION__OPERATOR:
        setOperator((JvmDeclaredType)null);
        return;
      case LanguagePackage.PARTICIPATION_RELATION__RIGHT_PARTS:
        getRightParts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.PARTICIPATION_RELATION__LEFT_PARTS:
        return leftParts != null && !leftParts.isEmpty();
      case LanguagePackage.PARTICIPATION_RELATION__OPERATOR:
        return operator != null;
      case LanguagePackage.PARTICIPATION_RELATION__RIGHT_PARTS:
        return rightParts != null && !rightParts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ParticipationRelationImpl
