/*
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CommonalitiesLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CommonalityFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.CommonalityFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorImportsOperatorImportParserRuleCall_0_0 = (RuleCall)cOperatorImportsAssignment_0.eContents().get(0);
		private final Assignment cMetamodelImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetamodelImportsMetamodelImportParserRuleCall_1_0 = (RuleCall)cMetamodelImportsAssignment_1.eContents().get(0);
		private final Assignment cConceptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConceptConceptParserRuleCall_2_0 = (RuleCall)cConceptAssignment_2.eContents().get(0);
		private final Assignment cCommonalityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommonalityCommonalityParserRuleCall_3_0 = (RuleCall)cCommonalityAssignment_3.eContents().get(0);
		
		//CommonalityFile:
		//    (operatorImports+=OperatorImport)*
		//    (metamodelImports+=MetamodelImport)*
		//    concept=Concept
		//    commonality=Commonality
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(operatorImports+=OperatorImport)*
		//(metamodelImports+=MetamodelImport)*
		//concept=Concept
		//commonality=Commonality
		public Group getGroup() { return cGroup; }
		
		//(operatorImports+=OperatorImport)*
		public Assignment getOperatorImportsAssignment_0() { return cOperatorImportsAssignment_0; }
		
		//OperatorImport
		public RuleCall getOperatorImportsOperatorImportParserRuleCall_0_0() { return cOperatorImportsOperatorImportParserRuleCall_0_0; }
		
		//(metamodelImports+=MetamodelImport)*
		public Assignment getMetamodelImportsAssignment_1() { return cMetamodelImportsAssignment_1; }
		
		//MetamodelImport
		public RuleCall getMetamodelImportsMetamodelImportParserRuleCall_1_0() { return cMetamodelImportsMetamodelImportParserRuleCall_1_0; }
		
		//concept=Concept
		public Assignment getConceptAssignment_2() { return cConceptAssignment_2; }
		
		//Concept
		public RuleCall getConceptConceptParserRuleCall_2_0() { return cConceptConceptParserRuleCall_2_0; }
		
		//commonality=Commonality
		public Assignment getCommonalityAssignment_3() { return cCommonalityAssignment_3; }
		
		//Commonality
		public RuleCall getCommonalityCommonalityParserRuleCall_3_0() { return cCommonalityCommonalityParserRuleCall_3_0; }
	}
	public class OperatorImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.OperatorImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportedNamespaceQualifiedOperatorNameParserRuleCall_1_0_0 = (RuleCall)cImportedNamespaceAssignment_1_0.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedOperatorWildCardParserRuleCall_1_1_0 = (RuleCall)cImportedNamespaceAssignment_1_1.eContents().get(0);
		
		//OperatorImport:
		//    'import' (importedNamespace=QualifiedOperatorName | importedNamespace=QualifiedOperatorWildCard)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (importedNamespace=QualifiedOperatorName | importedNamespace=QualifiedOperatorWildCard)
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(importedNamespace=QualifiedOperatorName | importedNamespace=QualifiedOperatorWildCard)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//importedNamespace=QualifiedOperatorName
		public Assignment getImportedNamespaceAssignment_1_0() { return cImportedNamespaceAssignment_1_0; }
		
		//QualifiedOperatorName
		public RuleCall getImportedNamespaceQualifiedOperatorNameParserRuleCall_1_0_0() { return cImportedNamespaceQualifiedOperatorNameParserRuleCall_1_0_0; }
		
		//importedNamespace=QualifiedOperatorWildCard
		public Assignment getImportedNamespaceAssignment_1_1() { return cImportedNamespaceAssignment_1_1; }
		
		//QualifiedOperatorWildCard
		public RuleCall getImportedNamespaceQualifiedOperatorWildCardParserRuleCall_1_1_0() { return cImportedNamespaceQualifiedOperatorWildCardParserRuleCall_1_1_0; }
	}
	public class MetamodelImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.MetamodelImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageEPackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cUseQualifiedNamesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cUseQualifiedNamesUsingKeyword_4_0_0 = (Keyword)cUseQualifiedNamesAssignment_4_0.eContents().get(0);
		private final Keyword cQualifiedKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cNamesKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//MetamodelImport returns common::MetamodelImport:
		//    'import' package=[ecore::EPackage|STRING] 'as' name=ValidID (useQualifiedNames?='using' 'qualified' 'names')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' package=[ecore::EPackage|STRING] 'as' name=ValidID (useQualifiedNames?='using' 'qualified' 'names')?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_1_0() { return cPackageEPackageCrossReference_1_0; }
		
		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//(useQualifiedNames?='using' 'qualified' 'names')?
		public Group getGroup_4() { return cGroup_4; }
		
		//useQualifiedNames?='using'
		public Assignment getUseQualifiedNamesAssignment_4_0() { return cUseQualifiedNamesAssignment_4_0; }
		
		//'using'
		public Keyword getUseQualifiedNamesUsingKeyword_4_0_0() { return cUseQualifiedNamesUsingKeyword_4_0_0; }
		
		//'qualified'
		public Keyword getQualifiedKeyword_4_1() { return cQualifiedKeyword_4_1; }
		
		//'names'
		public Keyword getNamesKeyword_4_2() { return cNamesKeyword_4_2; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.Domain");
		private final RuleCall cConceptParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Domain:
		//    Concept
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Concept
		public RuleCall getConceptParserRuleCall() { return cConceptParserRuleCall; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Concept:
		//    'concept' name=ValidID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'concept' name=ValidID
		public Group getGroup() { return cGroup; }
		
		//'concept'
		public Keyword getConceptKeyword_0() { return cConceptKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class MetaclassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.Metaclass");
		private final RuleCall cCommonalityParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Metaclass:
		//    Commonality
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Commonality
		public RuleCall getCommonalityParserRuleCall() { return cCommonalityParserRuleCall; }
	}
	public class CommonalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.Commonality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReferencedReferencedKeyword_0_0 = (Keyword)cReferencedAssignment_0.eContents().get(0);
		private final Keyword cCommonalityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParticipationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParticipationsParticipationParserRuleCall_4_0 = (RuleCall)cParticipationsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cAttributesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cAttributesCommonalityAttributeParserRuleCall_5_0_0 = (RuleCall)cAttributesAssignment_5_0.eContents().get(0);
		private final Assignment cReferencesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cReferencesCommonalityReferenceParserRuleCall_5_1_0 = (RuleCall)cReferencesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Commonality:
		//    (referenced?='referenced')? 'commonality' name=ValidID '{'
		//        participations+=Participation*
		//        (attributes+=CommonalityAttribute|references+=CommonalityReference)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(referenced?='referenced')? 'commonality' name=ValidID '{'
		//    participations+=Participation*
		//    (attributes+=CommonalityAttribute|references+=CommonalityReference)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(referenced?='referenced')?
		public Assignment getReferencedAssignment_0() { return cReferencedAssignment_0; }
		
		//'referenced'
		public Keyword getReferencedReferencedKeyword_0_0() { return cReferencedReferencedKeyword_0_0; }
		
		//'commonality'
		public Keyword getCommonalityKeyword_1() { return cCommonalityKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//participations+=Participation*
		public Assignment getParticipationsAssignment_4() { return cParticipationsAssignment_4; }
		
		//Participation
		public RuleCall getParticipationsParticipationParserRuleCall_4_0() { return cParticipationsParticipationParserRuleCall_4_0; }
		
		//(attributes+=CommonalityAttribute|references+=CommonalityReference)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//attributes+=CommonalityAttribute
		public Assignment getAttributesAssignment_5_0() { return cAttributesAssignment_5_0; }
		
		//CommonalityAttribute
		public RuleCall getAttributesCommonalityAttributeParserRuleCall_5_0_0() { return cAttributesCommonalityAttributeParserRuleCall_5_0_0; }
		
		//references+=CommonalityReference
		public Assignment getReferencesAssignment_5_1() { return cReferencesAssignment_5_1; }
		
		//CommonalityReference
		public RuleCall getReferencesCommonalityReferenceParserRuleCall_5_1_0() { return cReferencesCommonalityReferenceParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PackageLikeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.PackageLike");
		private final RuleCall cParticipationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///******************
		// * Participations *
		// ******************/
		//PackageLike:
		//    Participation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Participation
		public RuleCall getParticipationParserRuleCall() { return cParticipationParserRuleCall; }
	}
	public class ParticipationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.Participation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDomainNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDomainNameDomainNameParserRuleCall_1_0_0 = (RuleCall)cDomainNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDomainNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDomainNameDomainNameParserRuleCall_1_1_1_0 = (RuleCall)cDomainNameAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cAsKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cDomainAliasAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cDomainAliasValidIDParserRuleCall_1_1_2_1_0 = (RuleCall)cDomainAliasAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPartsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPartsSimpleParticipationClassParserRuleCall_3_0_0 = (RuleCall)cPartsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPartsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPartsParticipationPartParserRuleCall_3_1_1_0 = (RuleCall)cPartsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cPartsAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cPartsParticipationPartParserRuleCall_3_1_2_1_0 = (RuleCall)cPartsAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereatKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cConditionsAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cConditionsParticipationConditionParserRuleCall_4_2_0_0 = (RuleCall)cConditionsAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cCommaKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cConditionsAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cConditionsParticipationConditionParserRuleCall_4_2_1_1_0 = (RuleCall)cConditionsAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Participation:
		//    'with' (domainName=DomainName | '(' domainName=DomainName ('as' domainAlias=ValidID)? ')')
		//    ':' (parts += SimpleParticipationClass | '(' parts += ParticipationPart (',' parts+=ParticipationPart)* ')')
		//    ('whereat' '{'
		//        (conditions+=ParticipationCondition (',' conditions+=ParticipationCondition)*)?
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' (domainName=DomainName | '(' domainName=DomainName ('as' domainAlias=ValidID)? ')')
		//':' (parts += SimpleParticipationClass | '(' parts += ParticipationPart (',' parts+=ParticipationPart)* ')')
		//('whereat' '{'
		//    (conditions+=ParticipationCondition (',' conditions+=ParticipationCondition)*)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//(domainName=DomainName | '(' domainName=DomainName ('as' domainAlias=ValidID)? ')')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//domainName=DomainName
		public Assignment getDomainNameAssignment_1_0() { return cDomainNameAssignment_1_0; }
		
		//DomainName
		public RuleCall getDomainNameDomainNameParserRuleCall_1_0_0() { return cDomainNameDomainNameParserRuleCall_1_0_0; }
		
		//'(' domainName=DomainName ('as' domainAlias=ValidID)? ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//domainName=DomainName
		public Assignment getDomainNameAssignment_1_1_1() { return cDomainNameAssignment_1_1_1; }
		
		//DomainName
		public RuleCall getDomainNameDomainNameParserRuleCall_1_1_1_0() { return cDomainNameDomainNameParserRuleCall_1_1_1_0; }
		
		//('as' domainAlias=ValidID)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'as'
		public Keyword getAsKeyword_1_1_2_0() { return cAsKeyword_1_1_2_0; }
		
		//domainAlias=ValidID
		public Assignment getDomainAliasAssignment_1_1_2_1() { return cDomainAliasAssignment_1_1_2_1; }
		
		//ValidID
		public RuleCall getDomainAliasValidIDParserRuleCall_1_1_2_1_0() { return cDomainAliasValidIDParserRuleCall_1_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(parts += SimpleParticipationClass | '(' parts += ParticipationPart (',' parts+=ParticipationPart)* ')')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//parts += SimpleParticipationClass
		public Assignment getPartsAssignment_3_0() { return cPartsAssignment_3_0; }
		
		//SimpleParticipationClass
		public RuleCall getPartsSimpleParticipationClassParserRuleCall_3_0_0() { return cPartsSimpleParticipationClassParserRuleCall_3_0_0; }
		
		//'(' parts += ParticipationPart (',' parts+=ParticipationPart)* ')'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_0() { return cLeftParenthesisKeyword_3_1_0; }
		
		//parts += ParticipationPart
		public Assignment getPartsAssignment_3_1_1() { return cPartsAssignment_3_1_1; }
		
		//ParticipationPart
		public RuleCall getPartsParticipationPartParserRuleCall_3_1_1_0() { return cPartsParticipationPartParserRuleCall_3_1_1_0; }
		
		//(',' parts+=ParticipationPart)*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//','
		public Keyword getCommaKeyword_3_1_2_0() { return cCommaKeyword_3_1_2_0; }
		
		//parts+=ParticipationPart
		public Assignment getPartsAssignment_3_1_2_1() { return cPartsAssignment_3_1_2_1; }
		
		//ParticipationPart
		public RuleCall getPartsParticipationPartParserRuleCall_3_1_2_1_0() { return cPartsParticipationPartParserRuleCall_3_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_3() { return cRightParenthesisKeyword_3_1_3; }
		
		//('whereat' '{'
		//    (conditions+=ParticipationCondition (',' conditions+=ParticipationCondition)*)?
		//'}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'whereat'
		public Keyword getWhereatKeyword_4_0() { return cWhereatKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//(conditions+=ParticipationCondition (',' conditions+=ParticipationCondition)*)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//conditions+=ParticipationCondition
		public Assignment getConditionsAssignment_4_2_0() { return cConditionsAssignment_4_2_0; }
		
		//ParticipationCondition
		public RuleCall getConditionsParticipationConditionParserRuleCall_4_2_0_0() { return cConditionsParticipationConditionParserRuleCall_4_2_0_0; }
		
		//(',' conditions+=ParticipationCondition)*
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//','
		public Keyword getCommaKeyword_4_2_1_0() { return cCommaKeyword_4_2_1_0; }
		
		//conditions+=ParticipationCondition
		public Assignment getConditionsAssignment_4_2_1_1() { return cConditionsAssignment_4_2_1_1; }
		
		//ParticipationCondition
		public RuleCall getConditionsParticipationConditionParserRuleCall_4_2_1_1_0() { return cConditionsParticipationConditionParserRuleCall_4_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class ClassLikeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ClassLike");
		private final RuleCall cParticipationClassParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassLike:
		//    ParticipationClass
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ParticipationClass
		public RuleCall getParticipationClassParserRuleCall() { return cParticipationClassParserRuleCall; }
	}
	public class ParticipationClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ParticipationClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleParticipationClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFullParticipationClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParticipationClass: // never used as a parser rule, only establishes the inheritance hierarchy
		//    ->SimpleParticipationClass | FullParticipationClass
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// never used as a parser rule, only establishes the inheritance hierarchy
		//   ->SimpleParticipationClass | FullParticipationClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// never used as a parser rule, only establishes the inheritance hierarchy
		//   ->SimpleParticipationClass
		public RuleCall getSimpleParticipationClassParserRuleCall_0() { return cSimpleParticipationClassParserRuleCall_0; }
		
		//FullParticipationClass
		public RuleCall getFullParticipationClassParserRuleCall_1() { return cFullParticipationClassParserRuleCall_1; }
	}
	public class SimpleParticipationClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.SimpleParticipationClass");
		private final Assignment cSuperMetaclassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSuperMetaclassMetaclassCrossReference_0 = (CrossReference)cSuperMetaclassAssignment.eContents().get(0);
		private final RuleCall cSuperMetaclassMetaclassUnqualifiedClassParserRuleCall_0_1 = (RuleCall)cSuperMetaclassMetaclassCrossReference_0.eContents().get(1);
		
		//SimpleParticipationClass returns ParticipationClass:
		//    superMetaclass=[Metaclass|UnqualifiedClass]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//superMetaclass=[Metaclass|UnqualifiedClass]
		public Assignment getSuperMetaclassAssignment() { return cSuperMetaclassAssignment; }
		
		//[Metaclass|UnqualifiedClass]
		public CrossReference getSuperMetaclassMetaclassCrossReference_0() { return cSuperMetaclassMetaclassCrossReference_0; }
		
		//UnqualifiedClass
		public RuleCall getSuperMetaclassMetaclassUnqualifiedClassParserRuleCall_0_1() { return cSuperMetaclassMetaclassUnqualifiedClassParserRuleCall_0_1; }
	}
	public class FullParticipationClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.FullParticipationClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParticipationClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSingletonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSingletonSingleKeyword_1_0 = (Keyword)cSingletonAssignment_1.eContents().get(0);
		private final Assignment cSuperMetaclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSuperMetaclassMetaclassCrossReference_2_0 = (CrossReference)cSuperMetaclassAssignment_2.eContents().get(0);
		private final RuleCall cSuperMetaclassMetaclassUnqualifiedClassParserRuleCall_2_0_1 = (RuleCall)cSuperMetaclassMetaclassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassAliasValidIDParserRuleCall_3_1_0 = (RuleCall)cClassAliasAssignment_3_1.eContents().get(0);
		
		//FullParticipationClass returns ParticipationClass:
		//    {ParticipationClass} (singleton?='single')? superMetaclass=[Metaclass|UnqualifiedClass] ('as' classAlias=ValidID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParticipationClass} (singleton?='single')? superMetaclass=[Metaclass|UnqualifiedClass] ('as' classAlias=ValidID)?
		public Group getGroup() { return cGroup; }
		
		//{ParticipationClass}
		public Action getParticipationClassAction_0() { return cParticipationClassAction_0; }
		
		//(singleton?='single')?
		public Assignment getSingletonAssignment_1() { return cSingletonAssignment_1; }
		
		//'single'
		public Keyword getSingletonSingleKeyword_1_0() { return cSingletonSingleKeyword_1_0; }
		
		//superMetaclass=[Metaclass|UnqualifiedClass]
		public Assignment getSuperMetaclassAssignment_2() { return cSuperMetaclassAssignment_2; }
		
		//[Metaclass|UnqualifiedClass]
		public CrossReference getSuperMetaclassMetaclassCrossReference_2_0() { return cSuperMetaclassMetaclassCrossReference_2_0; }
		
		//UnqualifiedClass
		public RuleCall getSuperMetaclassMetaclassUnqualifiedClassParserRuleCall_2_0_1() { return cSuperMetaclassMetaclassUnqualifiedClassParserRuleCall_2_0_1; }
		
		//('as' classAlias=ValidID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//classAlias=ValidID
		public Assignment getClassAliasAssignment_3_1() { return cClassAliasAssignment_3_1; }
		
		//ValidID
		public RuleCall getClassAliasValidIDParserRuleCall_3_1_0() { return cClassAliasValidIDParserRuleCall_3_1_0; }
	}
	public class ParticipationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ParticipationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullParticipationClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cFullParticipationClassParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cParticipationRelationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParticipationPart:
		//    FullParticipationClass | '(' FullParticipationClass ')' | ParticipationRelation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FullParticipationClass | '(' FullParticipationClass ')' | ParticipationRelation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FullParticipationClass
		public RuleCall getFullParticipationClassParserRuleCall_0() { return cFullParticipationClassParserRuleCall_0; }
		
		//'(' FullParticipationClass ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//FullParticipationClass
		public RuleCall getFullParticipationClassParserRuleCall_1_1() { return cFullParticipationClassParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//ParticipationRelation
		public RuleCall getParticipationRelationParserRuleCall_2() { return cParticipationRelationParserRuleCall_2; }
	}
	public class ParticipationRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ParticipationRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cLeftPartsAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cLeftPartsSimpleParticipationClassParserRuleCall_0_0_0 = (RuleCall)cLeftPartsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cLeftPartsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cLeftPartsParticipationPartParserRuleCall_0_1_1_0 = (RuleCall)cLeftPartsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cLeftPartsAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cLeftPartsParticipationPartParserRuleCall_0_1_2_1_0 = (RuleCall)cLeftPartsAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOperatorJvmDeclaredTypeCrossReference_1_0 = (CrossReference)cOperatorAssignment_1.eContents().get(0);
		private final RuleCall cOperatorJvmDeclaredTypeOperatorNameParserRuleCall_1_0_1 = (RuleCall)cOperatorJvmDeclaredTypeCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRightPartsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRightPartsSimpleParticipationClassParserRuleCall_2_0_0 = (RuleCall)cRightPartsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRightPartsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRightPartsParticipationPartParserRuleCall_2_1_1_0 = (RuleCall)cRightPartsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cRightPartsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cRightPartsParticipationPartParserRuleCall_2_1_2_1_0 = (RuleCall)cRightPartsAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//ParticipationRelation:
		//    (leftParts += SimpleParticipationClass | '(' leftParts += ParticipationPart (',' leftParts+=ParticipationPart)* ')')
		//    operator=[jvmTypes::JvmDeclaredType|OperatorName]
		//    (rightParts += SimpleParticipationClass | '(' rightParts += ParticipationPart (',' rightParts+=ParticipationPart)* ')')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(leftParts += SimpleParticipationClass | '(' leftParts += ParticipationPart (',' leftParts+=ParticipationPart)* ')')
		//operator=[jvmTypes::JvmDeclaredType|OperatorName]
		//(rightParts += SimpleParticipationClass | '(' rightParts += ParticipationPart (',' rightParts+=ParticipationPart)* ')')
		public Group getGroup() { return cGroup; }
		
		//(leftParts += SimpleParticipationClass | '(' leftParts += ParticipationPart (',' leftParts+=ParticipationPart)* ')')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//leftParts += SimpleParticipationClass
		public Assignment getLeftPartsAssignment_0_0() { return cLeftPartsAssignment_0_0; }
		
		//SimpleParticipationClass
		public RuleCall getLeftPartsSimpleParticipationClassParserRuleCall_0_0_0() { return cLeftPartsSimpleParticipationClassParserRuleCall_0_0_0; }
		
		//'(' leftParts += ParticipationPart (',' leftParts+=ParticipationPart)* ')'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//leftParts += ParticipationPart
		public Assignment getLeftPartsAssignment_0_1_1() { return cLeftPartsAssignment_0_1_1; }
		
		//ParticipationPart
		public RuleCall getLeftPartsParticipationPartParserRuleCall_0_1_1_0() { return cLeftPartsParticipationPartParserRuleCall_0_1_1_0; }
		
		//(',' leftParts+=ParticipationPart)*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//','
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }
		
		//leftParts+=ParticipationPart
		public Assignment getLeftPartsAssignment_0_1_2_1() { return cLeftPartsAssignment_0_1_2_1; }
		
		//ParticipationPart
		public RuleCall getLeftPartsParticipationPartParserRuleCall_0_1_2_1_0() { return cLeftPartsParticipationPartParserRuleCall_0_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }
		
		//operator=[jvmTypes::JvmDeclaredType|OperatorName]
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//[jvmTypes::JvmDeclaredType|OperatorName]
		public CrossReference getOperatorJvmDeclaredTypeCrossReference_1_0() { return cOperatorJvmDeclaredTypeCrossReference_1_0; }
		
		//OperatorName
		public RuleCall getOperatorJvmDeclaredTypeOperatorNameParserRuleCall_1_0_1() { return cOperatorJvmDeclaredTypeOperatorNameParserRuleCall_1_0_1; }
		
		//(rightParts += SimpleParticipationClass | '(' rightParts += ParticipationPart (',' rightParts+=ParticipationPart)* ')')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//rightParts += SimpleParticipationClass
		public Assignment getRightPartsAssignment_2_0() { return cRightPartsAssignment_2_0; }
		
		//SimpleParticipationClass
		public RuleCall getRightPartsSimpleParticipationClassParserRuleCall_2_0_0() { return cRightPartsSimpleParticipationClassParserRuleCall_2_0_0; }
		
		//'(' rightParts += ParticipationPart (',' rightParts+=ParticipationPart)* ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//rightParts += ParticipationPart
		public Assignment getRightPartsAssignment_2_1_1() { return cRightPartsAssignment_2_1_1; }
		
		//ParticipationPart
		public RuleCall getRightPartsParticipationPartParserRuleCall_2_1_1_0() { return cRightPartsParticipationPartParserRuleCall_2_1_1_0; }
		
		//(',' rightParts+=ParticipationPart)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//rightParts+=ParticipationPart
		public Assignment getRightPartsAssignment_2_1_2_1() { return cRightPartsAssignment_2_1_2_1; }
		
		//ParticipationPart
		public RuleCall getRightPartsParticipationPartParserRuleCall_2_1_2_1_0() { return cRightPartsParticipationPartParserRuleCall_2_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
	}
	public class ParticipationConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ParticipationCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Action cBidirectionalParticipationConditionAction_0_0 = (Action)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Action cEnforcedParticipationConditionAction_0_1_1 = (Action)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Action cCheckedParticipationConditionAction_0_2_1 = (Action)cGroup_0_2.eContents().get(1);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandParticipationConditionLeftOperandParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperatorJvmDeclaredTypeCrossReference_2_0 = (CrossReference)cOperatorAssignment_2.eContents().get(0);
		private final RuleCall cOperatorJvmDeclaredTypeOperatorNameParserRuleCall_2_0_1 = (RuleCall)cOperatorJvmDeclaredTypeCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cRightOperandsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cRightOperandsParticipationConditionRightOperandParserRuleCall_3_0_0 = (RuleCall)cRightOperandsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Assignment cRightOperandsAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cRightOperandsParticipationConditionRightOperandParserRuleCall_3_1_1_0_0 = (RuleCall)cRightOperandsAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cGroup_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_1_0 = (Keyword)cGroup_3_1_1_1.eContents().get(0);
		private final Assignment cRightOperandsAssignment_3_1_1_1_1 = (Assignment)cGroup_3_1_1_1.eContents().get(1);
		private final RuleCall cRightOperandsParticipationConditionRightOperandParserRuleCall_3_1_1_1_1_0 = (RuleCall)cRightOperandsAssignment_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//ParticipationCondition:
		//    ({BidirectionalParticipationCondition} | '->' {EnforcedParticipationCondition} | '<-' {CheckedParticipationCondition})
		//    leftOperand=ParticipationConditionLeftOperand
		//    operator=[jvmTypes::JvmDeclaredType|OperatorName]
		//    ((rightOperands+=ParticipationConditionRightOperand) | ('(' (rightOperands+=ParticipationConditionRightOperand (',' rightOperands+=ParticipationConditionRightOperand)*)? ')'))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//({BidirectionalParticipationCondition} | '->' {EnforcedParticipationCondition} | '<-' {CheckedParticipationCondition})
		//leftOperand=ParticipationConditionLeftOperand
		//operator=[jvmTypes::JvmDeclaredType|OperatorName]
		//((rightOperands+=ParticipationConditionRightOperand) | ('(' (rightOperands+=ParticipationConditionRightOperand (',' rightOperands+=ParticipationConditionRightOperand)*)? ')'))?
		public Group getGroup() { return cGroup; }
		
		//({BidirectionalParticipationCondition} | '->' {EnforcedParticipationCondition} | '<-' {CheckedParticipationCondition})
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//{BidirectionalParticipationCondition}
		public Action getBidirectionalParticipationConditionAction_0_0() { return cBidirectionalParticipationConditionAction_0_0; }
		
		//'->' {EnforcedParticipationCondition}
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1_0() { return cHyphenMinusGreaterThanSignKeyword_0_1_0; }
		
		//{EnforcedParticipationCondition}
		public Action getEnforcedParticipationConditionAction_0_1_1() { return cEnforcedParticipationConditionAction_0_1_1; }
		
		//'<-' {CheckedParticipationCondition}
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0_2_0() { return cLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//{CheckedParticipationCondition}
		public Action getCheckedParticipationConditionAction_0_2_1() { return cCheckedParticipationConditionAction_0_2_1; }
		
		//leftOperand=ParticipationConditionLeftOperand
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }
		
		//ParticipationConditionLeftOperand
		public RuleCall getLeftOperandParticipationConditionLeftOperandParserRuleCall_1_0() { return cLeftOperandParticipationConditionLeftOperandParserRuleCall_1_0; }
		
		//operator=[jvmTypes::JvmDeclaredType|OperatorName]
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//[jvmTypes::JvmDeclaredType|OperatorName]
		public CrossReference getOperatorJvmDeclaredTypeCrossReference_2_0() { return cOperatorJvmDeclaredTypeCrossReference_2_0; }
		
		//OperatorName
		public RuleCall getOperatorJvmDeclaredTypeOperatorNameParserRuleCall_2_0_1() { return cOperatorJvmDeclaredTypeOperatorNameParserRuleCall_2_0_1; }
		
		//((rightOperands+=ParticipationConditionRightOperand) | ('(' (rightOperands+=ParticipationConditionRightOperand (',' rightOperands+=ParticipationConditionRightOperand)*)? ')'))?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//(rightOperands+=ParticipationConditionRightOperand)
		public Assignment getRightOperandsAssignment_3_0() { return cRightOperandsAssignment_3_0; }
		
		//ParticipationConditionRightOperand
		public RuleCall getRightOperandsParticipationConditionRightOperandParserRuleCall_3_0_0() { return cRightOperandsParticipationConditionRightOperandParserRuleCall_3_0_0; }
		
		//('(' (rightOperands+=ParticipationConditionRightOperand (',' rightOperands+=ParticipationConditionRightOperand)*)? ')')
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_0() { return cLeftParenthesisKeyword_3_1_0; }
		
		//(rightOperands+=ParticipationConditionRightOperand (',' rightOperands+=ParticipationConditionRightOperand)*)?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//rightOperands+=ParticipationConditionRightOperand
		public Assignment getRightOperandsAssignment_3_1_1_0() { return cRightOperandsAssignment_3_1_1_0; }
		
		//ParticipationConditionRightOperand
		public RuleCall getRightOperandsParticipationConditionRightOperandParserRuleCall_3_1_1_0_0() { return cRightOperandsParticipationConditionRightOperandParserRuleCall_3_1_1_0_0; }
		
		//(',' rightOperands+=ParticipationConditionRightOperand)*
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_1_0() { return cCommaKeyword_3_1_1_1_0; }
		
		//rightOperands+=ParticipationConditionRightOperand
		public Assignment getRightOperandsAssignment_3_1_1_1_1() { return cRightOperandsAssignment_3_1_1_1_1; }
		
		//ParticipationConditionRightOperand
		public RuleCall getRightOperandsParticipationConditionRightOperandParserRuleCall_3_1_1_1_1_0() { return cRightOperandsParticipationConditionRightOperandParserRuleCall_3_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }
	}
	public class ParticipationConditionLeftOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ParticipationConditionLeftOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnqualifiedParticipationClassOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnqualifiedParticipationAttributeOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParticipationConditionLeftOperand returns ParticipationConditionOperand:
		//    UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnqualifiedParticipationClassOperand
		public RuleCall getUnqualifiedParticipationClassOperandParserRuleCall_0() { return cUnqualifiedParticipationClassOperandParserRuleCall_0; }
		
		//UnqualifiedParticipationAttributeOperand
		public RuleCall getUnqualifiedParticipationAttributeOperandParserRuleCall_1() { return cUnqualifiedParticipationAttributeOperandParserRuleCall_1; }
	}
	public class ParticipationConditionRightOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ParticipationConditionRightOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnqualifiedParticipationClassOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnqualifiedParticipationAttributeOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralOperandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParticipationConditionRightOperand returns ParticipationConditionOperand:
		//    UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnqualifiedParticipationClassOperand
		public RuleCall getUnqualifiedParticipationClassOperandParserRuleCall_0() { return cUnqualifiedParticipationClassOperandParserRuleCall_0; }
		
		//UnqualifiedParticipationAttributeOperand
		public RuleCall getUnqualifiedParticipationAttributeOperandParserRuleCall_1() { return cUnqualifiedParticipationAttributeOperandParserRuleCall_1; }
		
		//LiteralOperand
		public RuleCall getLiteralOperandParserRuleCall_2() { return cLiteralOperandParserRuleCall_2; }
	}
	public class ParticipationConditionOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ParticipationConditionOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnqualifiedParticipationClassOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnqualifiedParticipationAttributeOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralOperandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParticipationConditionOperand:
		//    UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnqualifiedParticipationClassOperand
		public RuleCall getUnqualifiedParticipationClassOperandParserRuleCall_0() { return cUnqualifiedParticipationClassOperandParserRuleCall_0; }
		
		//UnqualifiedParticipationAttributeOperand
		public RuleCall getUnqualifiedParticipationAttributeOperandParserRuleCall_1() { return cUnqualifiedParticipationAttributeOperandParserRuleCall_1; }
		
		//LiteralOperand
		public RuleCall getLiteralOperandParserRuleCall_2() { return cLiteralOperandParserRuleCall_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommonalityAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParticipationAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommonalityReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///**************
		// * Attributes *
		// **************/
		//Attribute:
		//    CommonalityAttribute | ParticipationAttribute | CommonalityReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CommonalityAttribute | ParticipationAttribute | CommonalityReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CommonalityAttribute
		public RuleCall getCommonalityAttributeParserRuleCall_0() { return cCommonalityAttributeParserRuleCall_0; }
		
		//ParticipationAttribute
		public RuleCall getParticipationAttributeParserRuleCall_1() { return cParticipationAttributeParserRuleCall_1; }
		
		//CommonalityReference
		public RuleCall getCommonalityReferenceParserRuleCall_2() { return cCommonalityReferenceParserRuleCall_2; }
	}
	public class CommonalityAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.CommonalityAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingsCommonalityAttributeMappingParserRuleCall_3_0 = (RuleCall)cMappingsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CommonalityAttribute:
		//    'has' name=ValidID '{'
		//        mappings+=CommonalityAttributeMapping*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'has' name=ValidID '{'
		//    mappings+=CommonalityAttributeMapping*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'has'
		public Keyword getHasKeyword_0() { return cHasKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//mappings+=CommonalityAttributeMapping*
		public Assignment getMappingsAssignment_3() { return cMappingsAssignment_3; }
		
		//CommonalityAttributeMapping
		public RuleCall getMappingsCommonalityAttributeMappingParserRuleCall_3_0() { return cMappingsCommonalityAttributeMappingParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommonalityAttributeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.CommonalityAttributeMapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleAttributeMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperatorAttributeMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CommonalityAttributeMapping:
		//    SimpleAttributeMapping | OperatorAttributeMapping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleAttributeMapping | OperatorAttributeMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleAttributeMapping
		public RuleCall getSimpleAttributeMappingParserRuleCall_0() { return cSimpleAttributeMappingParserRuleCall_0; }
		
		//OperatorAttributeMapping
		public RuleCall getOperatorAttributeMappingParserRuleCall_1() { return cOperatorAttributeMappingParserRuleCall_1; }
	}
	public class SimpleAttributeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.SimpleAttributeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cReadAndWriteAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cReadAndWriteEqualsSignKeyword_0_0_0 = (Keyword)cReadAndWriteAssignment_0_0.eContents().get(0);
		private final Assignment cWriteAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cWriteHyphenMinusGreaterThanSignKeyword_0_1_0 = (Keyword)cWriteAssignment_0_1.eContents().get(0);
		private final Assignment cReadAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cReadLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cReadAssignment_0_2.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeQualifiedParticipationAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		
		//SimpleAttributeMapping:
		//    (readAndWrite?='=' | write?='->' | read?='<-')
		//    attribute=QualifiedParticipationAttribute
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(readAndWrite?='=' | write?='->' | read?='<-')
		//attribute=QualifiedParticipationAttribute
		public Group getGroup() { return cGroup; }
		
		//(readAndWrite?='=' | write?='->' | read?='<-')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//readAndWrite?='='
		public Assignment getReadAndWriteAssignment_0_0() { return cReadAndWriteAssignment_0_0; }
		
		//'='
		public Keyword getReadAndWriteEqualsSignKeyword_0_0_0() { return cReadAndWriteEqualsSignKeyword_0_0_0; }
		
		//write?='->'
		public Assignment getWriteAssignment_0_1() { return cWriteAssignment_0_1; }
		
		//'->'
		public Keyword getWriteHyphenMinusGreaterThanSignKeyword_0_1_0() { return cWriteHyphenMinusGreaterThanSignKeyword_0_1_0; }
		
		//read?='<-'
		public Assignment getReadAssignment_0_2() { return cReadAssignment_0_2; }
		
		//'<-'
		public Keyword getReadLessThanSignHyphenMinusKeyword_0_2_0() { return cReadLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//attribute=QualifiedParticipationAttribute
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//QualifiedParticipationAttribute
		public RuleCall getAttributeQualifiedParticipationAttributeParserRuleCall_1_0() { return cAttributeQualifiedParticipationAttributeParserRuleCall_1_0; }
	}
	public class OperatorAttributeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.OperatorAttributeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cReadAndWriteAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cReadAndWriteEqualsSignKeyword_0_0_0 = (Keyword)cReadAndWriteAssignment_0_0.eContents().get(0);
		private final Assignment cWriteAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cWriteHyphenMinusGreaterThanSignKeyword_0_1_0 = (Keyword)cWriteAssignment_0_1.eContents().get(0);
		private final Assignment cReadAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cReadLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cReadAssignment_0_2.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOperatorJvmDeclaredTypeCrossReference_1_0 = (CrossReference)cOperatorAssignment_1.eContents().get(0);
		private final RuleCall cOperatorJvmDeclaredTypeOperatorNameParserRuleCall_1_0_1 = (RuleCall)cOperatorJvmDeclaredTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOperandsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOperandsAttributeMappingOperandParserRuleCall_3_0_0 = (RuleCall)cOperandsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOperandsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOperandsAttributeMappingOperandParserRuleCall_3_1_1_0 = (RuleCall)cOperandsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperatorAttributeMapping:
		//    (readAndWrite?='=' | write?='->' | read?='<-')
		//    operator=[jvmTypes::JvmDeclaredType|OperatorName]
		//    '(' (operands+=AttributeMappingOperand (',' operands+=AttributeMappingOperand)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(readAndWrite?='=' | write?='->' | read?='<-')
		//operator=[jvmTypes::JvmDeclaredType|OperatorName]
		//'(' (operands+=AttributeMappingOperand (',' operands+=AttributeMappingOperand)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//(readAndWrite?='=' | write?='->' | read?='<-')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//readAndWrite?='='
		public Assignment getReadAndWriteAssignment_0_0() { return cReadAndWriteAssignment_0_0; }
		
		//'='
		public Keyword getReadAndWriteEqualsSignKeyword_0_0_0() { return cReadAndWriteEqualsSignKeyword_0_0_0; }
		
		//write?='->'
		public Assignment getWriteAssignment_0_1() { return cWriteAssignment_0_1; }
		
		//'->'
		public Keyword getWriteHyphenMinusGreaterThanSignKeyword_0_1_0() { return cWriteHyphenMinusGreaterThanSignKeyword_0_1_0; }
		
		//read?='<-'
		public Assignment getReadAssignment_0_2() { return cReadAssignment_0_2; }
		
		//'<-'
		public Keyword getReadLessThanSignHyphenMinusKeyword_0_2_0() { return cReadLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//operator=[jvmTypes::JvmDeclaredType|OperatorName]
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//[jvmTypes::JvmDeclaredType|OperatorName]
		public CrossReference getOperatorJvmDeclaredTypeCrossReference_1_0() { return cOperatorJvmDeclaredTypeCrossReference_1_0; }
		
		//OperatorName
		public RuleCall getOperatorJvmDeclaredTypeOperatorNameParserRuleCall_1_0_1() { return cOperatorJvmDeclaredTypeOperatorNameParserRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(operands+=AttributeMappingOperand (',' operands+=AttributeMappingOperand)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//operands+=AttributeMappingOperand
		public Assignment getOperandsAssignment_3_0() { return cOperandsAssignment_3_0; }
		
		//AttributeMappingOperand
		public RuleCall getOperandsAttributeMappingOperandParserRuleCall_3_0_0() { return cOperandsAttributeMappingOperandParserRuleCall_3_0_0; }
		
		//(',' operands+=AttributeMappingOperand)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//operands+=AttributeMappingOperand
		public Assignment getOperandsAssignment_3_1_1() { return cOperandsAssignment_3_1_1; }
		
		//AttributeMappingOperand
		public RuleCall getOperandsAttributeMappingOperandParserRuleCall_3_1_1_0() { return cOperandsAttributeMappingOperandParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AttributeMappingOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.AttributeMappingOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalUnqualifiedCommonalityAttributeOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedParticipationAttributeOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiedParticipationClassOperandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralOperandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AttributeMappingOperand:
		//    LocalUnqualifiedCommonalityAttributeOperand | QualifiedParticipationAttributeOperand | QualifiedParticipationClassOperand | LiteralOperand
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalUnqualifiedCommonalityAttributeOperand | QualifiedParticipationAttributeOperand | QualifiedParticipationClassOperand | LiteralOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalUnqualifiedCommonalityAttributeOperand
		public RuleCall getLocalUnqualifiedCommonalityAttributeOperandParserRuleCall_0() { return cLocalUnqualifiedCommonalityAttributeOperandParserRuleCall_0; }
		
		//QualifiedParticipationAttributeOperand
		public RuleCall getQualifiedParticipationAttributeOperandParserRuleCall_1() { return cQualifiedParticipationAttributeOperandParserRuleCall_1; }
		
		//QualifiedParticipationClassOperand
		public RuleCall getQualifiedParticipationClassOperandParserRuleCall_2() { return cQualifiedParticipationClassOperandParserRuleCall_2; }
		
		//LiteralOperand
		public RuleCall getLiteralOperandParserRuleCall_3() { return cLiteralOperandParserRuleCall_3; }
	}
	public class ParticipationAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ParticipationAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedParticipationAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnqualifiedParticipationAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParticipationAttribute:
		//    QualifiedParticipationAttribute | UnqualifiedParticipationAttribute
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedParticipationAttribute | UnqualifiedParticipationAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QualifiedParticipationAttribute
		public RuleCall getQualifiedParticipationAttributeParserRuleCall_0() { return cQualifiedParticipationAttributeParserRuleCall_0; }
		
		//UnqualifiedParticipationAttribute
		public RuleCall getUnqualifiedParticipationAttributeParserRuleCall_1() { return cUnqualifiedParticipationAttributeParserRuleCall_1; }
	}
	public class QualifiedParticipationAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.QualifiedParticipationAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParticipationClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParticipationClassParticipationClassCrossReference_0_0 = (CrossReference)cParticipationClassAssignment_0.eContents().get(0);
		private final RuleCall cParticipationClassParticipationClassQualifiedClassParserRuleCall_0_0_1 = (RuleCall)cParticipationClassParticipationClassCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeUnqualifiedAttributeParserRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		
		//QualifiedParticipationAttribute returns ParticipationAttribute:
		//    participationClass=[ParticipationClass|QualifiedClass] '.' attribute=[Attribute|UnqualifiedAttribute]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//participationClass=[ParticipationClass|QualifiedClass] '.' attribute=[Attribute|UnqualifiedAttribute]
		public Group getGroup() { return cGroup; }
		
		//participationClass=[ParticipationClass|QualifiedClass]
		public Assignment getParticipationClassAssignment_0() { return cParticipationClassAssignment_0; }
		
		//[ParticipationClass|QualifiedClass]
		public CrossReference getParticipationClassParticipationClassCrossReference_0_0() { return cParticipationClassParticipationClassCrossReference_0_0; }
		
		//QualifiedClass
		public RuleCall getParticipationClassParticipationClassQualifiedClassParserRuleCall_0_0_1() { return cParticipationClassParticipationClassQualifiedClassParserRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[Attribute|UnqualifiedAttribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[Attribute|UnqualifiedAttribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }
		
		//UnqualifiedAttribute
		public RuleCall getAttributeAttributeUnqualifiedAttributeParserRuleCall_2_0_1() { return cAttributeAttributeUnqualifiedAttributeParserRuleCall_2_0_1; }
	}
	public class UnqualifiedParticipationAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.UnqualifiedParticipationAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParticipationClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParticipationClassParticipationClassCrossReference_0_0 = (CrossReference)cParticipationClassAssignment_0.eContents().get(0);
		private final RuleCall cParticipationClassParticipationClassUnqualifiedClassParserRuleCall_0_0_1 = (RuleCall)cParticipationClassParticipationClassCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeUnqualifiedAttributeParserRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		
		//UnqualifiedParticipationAttribute returns ParticipationAttribute:
		//    participationClass=[ParticipationClass|UnqualifiedClass] '.' attribute=[Attribute|UnqualifiedAttribute]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//participationClass=[ParticipationClass|UnqualifiedClass] '.' attribute=[Attribute|UnqualifiedAttribute]
		public Group getGroup() { return cGroup; }
		
		//participationClass=[ParticipationClass|UnqualifiedClass]
		public Assignment getParticipationClassAssignment_0() { return cParticipationClassAssignment_0; }
		
		//[ParticipationClass|UnqualifiedClass]
		public CrossReference getParticipationClassParticipationClassCrossReference_0_0() { return cParticipationClassParticipationClassCrossReference_0_0; }
		
		//UnqualifiedClass
		public RuleCall getParticipationClassParticipationClassUnqualifiedClassParserRuleCall_0_0_1() { return cParticipationClassParticipationClassUnqualifiedClassParserRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[Attribute|UnqualifiedAttribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[Attribute|UnqualifiedAttribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }
		
		//UnqualifiedAttribute
		public RuleCall getAttributeAttributeUnqualifiedAttributeParserRuleCall_2_0_1() { return cAttributeAttributeUnqualifiedAttributeParserRuleCall_2_0_1; }
	}
	public class CommonalityAttributeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.CommonalityAttributeReference");
		private final RuleCall cLocalUnqualifiedCommonalityAttributeReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CommonalityAttributeReference:
		//    LocalUnqualifiedCommonalityAttributeReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalUnqualifiedCommonalityAttributeReference
		public RuleCall getLocalUnqualifiedCommonalityAttributeReferenceParserRuleCall() { return cLocalUnqualifiedCommonalityAttributeReferenceParserRuleCall; }
	}
	public class LocalUnqualifiedCommonalityAttributeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.LocalUnqualifiedCommonalityAttributeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommonalityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCommonalityCommonalityCrossReference_0_0 = (CrossReference)cCommonalityAssignment_0.eContents().get(0);
		private final RuleCall cCommonalityCommonalityUnqualifiedClassParserRuleCall_0_0_1 = (RuleCall)cCommonalityCommonalityCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeCommonalityAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeCommonalityAttributeUnqualifiedAttributeParserRuleCall_2_0_1 = (RuleCall)cAttributeCommonalityAttributeCrossReference_2_0.eContents().get(1);
		
		//// Local: Can only refer to the (single) local commonality.
		//LocalUnqualifiedCommonalityAttributeReference returns CommonalityAttributeReference:
		//    commonality=[Commonality|UnqualifiedClass] '.' attribute=[CommonalityAttribute|UnqualifiedAttribute]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//commonality=[Commonality|UnqualifiedClass] '.' attribute=[CommonalityAttribute|UnqualifiedAttribute]
		public Group getGroup() { return cGroup; }
		
		//commonality=[Commonality|UnqualifiedClass]
		public Assignment getCommonalityAssignment_0() { return cCommonalityAssignment_0; }
		
		//[Commonality|UnqualifiedClass]
		public CrossReference getCommonalityCommonalityCrossReference_0_0() { return cCommonalityCommonalityCrossReference_0_0; }
		
		//UnqualifiedClass
		public RuleCall getCommonalityCommonalityUnqualifiedClassParserRuleCall_0_0_1() { return cCommonalityCommonalityUnqualifiedClassParserRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[CommonalityAttribute|UnqualifiedAttribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[CommonalityAttribute|UnqualifiedAttribute]
		public CrossReference getAttributeCommonalityAttributeCrossReference_2_0() { return cAttributeCommonalityAttributeCrossReference_2_0; }
		
		//UnqualifiedAttribute
		public RuleCall getAttributeCommonalityAttributeUnqualifiedAttributeParserRuleCall_2_0_1() { return cAttributeCommonalityAttributeUnqualifiedAttributeParserRuleCall_2_0_1; }
	}
	public class CommonalityReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.CommonalityReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cReferencingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferenceTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferenceTypeCommonalityCrossReference_3_0 = (CrossReference)cReferenceTypeAssignment_3.eContents().get(0);
		private final RuleCall cReferenceTypeCommonalityQualifiedClassParserRuleCall_3_0_1 = (RuleCall)cReferenceTypeCommonalityCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMappingsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMappingsCommonalityReferenceMappingParserRuleCall_5_0 = (RuleCall)cMappingsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///**************
		// * References *
		// **************/
		//CommonalityReference:
		//    'has' name=ValidID 'referencing' referenceType=[Commonality|QualifiedClass] '{'
		//        mappings+=CommonalityReferenceMapping*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'has' name=ValidID 'referencing' referenceType=[Commonality|QualifiedClass] '{'
		//    mappings+=CommonalityReferenceMapping*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'has'
		public Keyword getHasKeyword_0() { return cHasKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'referencing'
		public Keyword getReferencingKeyword_2() { return cReferencingKeyword_2; }
		
		//referenceType=[Commonality|QualifiedClass]
		public Assignment getReferenceTypeAssignment_3() { return cReferenceTypeAssignment_3; }
		
		//[Commonality|QualifiedClass]
		public CrossReference getReferenceTypeCommonalityCrossReference_3_0() { return cReferenceTypeCommonalityCrossReference_3_0; }
		
		//QualifiedClass
		public RuleCall getReferenceTypeCommonalityQualifiedClassParserRuleCall_3_0_1() { return cReferenceTypeCommonalityQualifiedClassParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//mappings+=CommonalityReferenceMapping*
		public Assignment getMappingsAssignment_5() { return cMappingsAssignment_5; }
		
		//CommonalityReferenceMapping
		public RuleCall getMappingsCommonalityReferenceMappingParserRuleCall_5_0() { return cMappingsCommonalityReferenceMappingParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CommonalityReferenceMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.CommonalityReferenceMapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleReferenceMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperatorReferenceMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CommonalityReferenceMapping:
		//    SimpleReferenceMapping | OperatorReferenceMapping
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleReferenceMapping | OperatorReferenceMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleReferenceMapping
		public RuleCall getSimpleReferenceMappingParserRuleCall_0() { return cSimpleReferenceMappingParserRuleCall_0; }
		
		//OperatorReferenceMapping
		public RuleCall getOperatorReferenceMappingParserRuleCall_1() { return cOperatorReferenceMappingParserRuleCall_1; }
	}
	public class SimpleReferenceMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.SimpleReferenceMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cReadAndWriteAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cReadAndWriteEqualsSignKeyword_0_0_0 = (Keyword)cReadAndWriteAssignment_0_0.eContents().get(0);
		private final Assignment cWriteAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cWriteHyphenMinusGreaterThanSignKeyword_0_1_0 = (Keyword)cWriteAssignment_0_1.eContents().get(0);
		private final Assignment cReadAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cReadLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cReadAssignment_0_2.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceQualifiedParticipationAttributeParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cViaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferenceTargetsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cReferenceTargetsParticipationClassCrossReference_2_1_0 = (CrossReference)cReferenceTargetsAssignment_2_1.eContents().get(0);
		private final RuleCall cReferenceTargetsParticipationClassQualifiedClassParserRuleCall_2_1_0_1 = (RuleCall)cReferenceTargetsParticipationClassCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cReferenceTargetsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cReferenceTargetsParticipationClassCrossReference_2_2_1_0 = (CrossReference)cReferenceTargetsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cReferenceTargetsParticipationClassQualifiedClassParserRuleCall_2_2_1_0_1 = (RuleCall)cReferenceTargetsParticipationClassCrossReference_2_2_1_0.eContents().get(1);
		
		//SimpleReferenceMapping:
		//    (readAndWrite?='=' | write?='->' | read?='<-')
		//    reference=QualifiedParticipationAttribute
		//    // TODO not used right now
		//    ('via' referenceTargets+=[ParticipationClass|QualifiedClass] (',' referenceTargets+=[ParticipationClass|QualifiedClass])*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(readAndWrite?='=' | write?='->' | read?='<-')
		//reference=QualifiedParticipationAttribute
		//// TODO not used right now
		//('via' referenceTargets+=[ParticipationClass|QualifiedClass] (',' referenceTargets+=[ParticipationClass|QualifiedClass])*)?
		public Group getGroup() { return cGroup; }
		
		//(readAndWrite?='=' | write?='->' | read?='<-')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//readAndWrite?='='
		public Assignment getReadAndWriteAssignment_0_0() { return cReadAndWriteAssignment_0_0; }
		
		//'='
		public Keyword getReadAndWriteEqualsSignKeyword_0_0_0() { return cReadAndWriteEqualsSignKeyword_0_0_0; }
		
		//write?='->'
		public Assignment getWriteAssignment_0_1() { return cWriteAssignment_0_1; }
		
		//'->'
		public Keyword getWriteHyphenMinusGreaterThanSignKeyword_0_1_0() { return cWriteHyphenMinusGreaterThanSignKeyword_0_1_0; }
		
		//read?='<-'
		public Assignment getReadAssignment_0_2() { return cReadAssignment_0_2; }
		
		//'<-'
		public Keyword getReadLessThanSignHyphenMinusKeyword_0_2_0() { return cReadLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//reference=QualifiedParticipationAttribute
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//QualifiedParticipationAttribute
		public RuleCall getReferenceQualifiedParticipationAttributeParserRuleCall_1_0() { return cReferenceQualifiedParticipationAttributeParserRuleCall_1_0; }
		
		//// TODO not used right now
		//('via' referenceTargets+=[ParticipationClass|QualifiedClass] (',' referenceTargets+=[ParticipationClass|QualifiedClass])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'via'
		public Keyword getViaKeyword_2_0() { return cViaKeyword_2_0; }
		
		//referenceTargets+=[ParticipationClass|QualifiedClass]
		public Assignment getReferenceTargetsAssignment_2_1() { return cReferenceTargetsAssignment_2_1; }
		
		//[ParticipationClass|QualifiedClass]
		public CrossReference getReferenceTargetsParticipationClassCrossReference_2_1_0() { return cReferenceTargetsParticipationClassCrossReference_2_1_0; }
		
		//QualifiedClass
		public RuleCall getReferenceTargetsParticipationClassQualifiedClassParserRuleCall_2_1_0_1() { return cReferenceTargetsParticipationClassQualifiedClassParserRuleCall_2_1_0_1; }
		
		//(',' referenceTargets+=[ParticipationClass|QualifiedClass])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//referenceTargets+=[ParticipationClass|QualifiedClass]
		public Assignment getReferenceTargetsAssignment_2_2_1() { return cReferenceTargetsAssignment_2_2_1; }
		
		//[ParticipationClass|QualifiedClass]
		public CrossReference getReferenceTargetsParticipationClassCrossReference_2_2_1_0() { return cReferenceTargetsParticipationClassCrossReference_2_2_1_0; }
		
		//QualifiedClass
		public RuleCall getReferenceTargetsParticipationClassQualifiedClassParserRuleCall_2_2_1_0_1() { return cReferenceTargetsParticipationClassQualifiedClassParserRuleCall_2_2_1_0_1; }
	}
	public class OperatorReferenceMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.OperatorReferenceMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cReadAndWriteAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cReadAndWriteEqualsSignKeyword_0_0_0 = (Keyword)cReadAndWriteAssignment_0_0.eContents().get(0);
		private final Assignment cWriteAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cWriteHyphenMinusGreaterThanSignKeyword_0_1_0 = (Keyword)cWriteAssignment_0_1.eContents().get(0);
		private final Assignment cReadAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cReadLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cReadAssignment_0_2.eContents().get(0);
		private final Assignment cParticipationClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParticipationClassParticipationClassCrossReference_1_0 = (CrossReference)cParticipationClassAssignment_1.eContents().get(0);
		private final RuleCall cParticipationClassParticipationClassQualifiedClassParserRuleCall_1_0_1 = (RuleCall)cParticipationClassParticipationClassCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOperatorJvmDeclaredTypeCrossReference_3_0 = (CrossReference)cOperatorAssignment_3.eContents().get(0);
		private final RuleCall cOperatorJvmDeclaredTypeOperatorNameParserRuleCall_3_0_1 = (RuleCall)cOperatorJvmDeclaredTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOperandsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOperandsReferenceMappingOperandParserRuleCall_5_0_0 = (RuleCall)cOperandsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOperandsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOperandsReferenceMappingOperandParserRuleCall_5_1_1_0 = (RuleCall)cOperandsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//OperatorReferenceMapping:
		//    (readAndWrite?='=' | write?='->' | read?='<-')
		//    participationClass=[ParticipationClass|QualifiedClass] '.' operator=[jvmTypes::JvmDeclaredType|OperatorName]
		//    '(' (operands+=ReferenceMappingOperand (',' operands+=ReferenceMappingOperand)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(readAndWrite?='=' | write?='->' | read?='<-')
		//participationClass=[ParticipationClass|QualifiedClass] '.' operator=[jvmTypes::JvmDeclaredType|OperatorName]
		//'(' (operands+=ReferenceMappingOperand (',' operands+=ReferenceMappingOperand)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//(readAndWrite?='=' | write?='->' | read?='<-')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//readAndWrite?='='
		public Assignment getReadAndWriteAssignment_0_0() { return cReadAndWriteAssignment_0_0; }
		
		//'='
		public Keyword getReadAndWriteEqualsSignKeyword_0_0_0() { return cReadAndWriteEqualsSignKeyword_0_0_0; }
		
		//write?='->'
		public Assignment getWriteAssignment_0_1() { return cWriteAssignment_0_1; }
		
		//'->'
		public Keyword getWriteHyphenMinusGreaterThanSignKeyword_0_1_0() { return cWriteHyphenMinusGreaterThanSignKeyword_0_1_0; }
		
		//read?='<-'
		public Assignment getReadAssignment_0_2() { return cReadAssignment_0_2; }
		
		//'<-'
		public Keyword getReadLessThanSignHyphenMinusKeyword_0_2_0() { return cReadLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//participationClass=[ParticipationClass|QualifiedClass]
		public Assignment getParticipationClassAssignment_1() { return cParticipationClassAssignment_1; }
		
		//[ParticipationClass|QualifiedClass]
		public CrossReference getParticipationClassParticipationClassCrossReference_1_0() { return cParticipationClassParticipationClassCrossReference_1_0; }
		
		//QualifiedClass
		public RuleCall getParticipationClassParticipationClassQualifiedClassParserRuleCall_1_0_1() { return cParticipationClassParticipationClassQualifiedClassParserRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//operator=[jvmTypes::JvmDeclaredType|OperatorName]
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//[jvmTypes::JvmDeclaredType|OperatorName]
		public CrossReference getOperatorJvmDeclaredTypeCrossReference_3_0() { return cOperatorJvmDeclaredTypeCrossReference_3_0; }
		
		//OperatorName
		public RuleCall getOperatorJvmDeclaredTypeOperatorNameParserRuleCall_3_0_1() { return cOperatorJvmDeclaredTypeOperatorNameParserRuleCall_3_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(operands+=ReferenceMappingOperand (',' operands+=ReferenceMappingOperand)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//operands+=ReferenceMappingOperand
		public Assignment getOperandsAssignment_5_0() { return cOperandsAssignment_5_0; }
		
		//ReferenceMappingOperand
		public RuleCall getOperandsReferenceMappingOperandParserRuleCall_5_0_0() { return cOperandsReferenceMappingOperandParserRuleCall_5_0_0; }
		
		//(',' operands+=ReferenceMappingOperand)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//operands+=ReferenceMappingOperand
		public Assignment getOperandsAssignment_5_1_1() { return cOperandsAssignment_5_1_1; }
		
		//ReferenceMappingOperand
		public RuleCall getOperandsReferenceMappingOperandParserRuleCall_5_1_1_0() { return cOperandsReferenceMappingOperandParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ReferenceMappingOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ReferenceMappingOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferencedParticipationAttributeOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnqualifiedParticipationAttributeOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralOperandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ReferenceMappingOperand:
		//    ReferencedParticipationAttributeOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferencedParticipationAttributeOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReferencedParticipationAttributeOperand
		public RuleCall getReferencedParticipationAttributeOperandParserRuleCall_0() { return cReferencedParticipationAttributeOperandParserRuleCall_0; }
		
		//UnqualifiedParticipationAttributeOperand
		public RuleCall getUnqualifiedParticipationAttributeOperandParserRuleCall_1() { return cUnqualifiedParticipationAttributeOperandParserRuleCall_1; }
		
		//LiteralOperand
		public RuleCall getLiteralOperandParserRuleCall_2() { return cLiteralOperandParserRuleCall_2; }
	}
	public class ReferencedParticipationAttributeOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.ReferencedParticipationAttributeOperand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParticipationAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParticipationAttributeUnqualifiedParticipationAttributeParserRuleCall_1_0 = (RuleCall)cParticipationAttributeAssignment_1.eContents().get(0);
		
		//ReferencedParticipationAttributeOperand:
		//    'ref' participationAttribute=UnqualifiedParticipationAttribute
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' participationAttribute=UnqualifiedParticipationAttribute
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//participationAttribute=UnqualifiedParticipationAttribute
		public Assignment getParticipationAttributeAssignment_1() { return cParticipationAttributeAssignment_1; }
		
		//UnqualifiedParticipationAttribute
		public RuleCall getParticipationAttributeUnqualifiedParticipationAttributeParserRuleCall_1_0() { return cParticipationAttributeUnqualifiedParticipationAttributeParserRuleCall_1_0; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParticipationConditionOperandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeMappingOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceMappingOperandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///************
		// * Operands *
		// ************/
		//Operand:
		//    ParticipationConditionOperand | AttributeMappingOperand | ReferenceMappingOperand
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ParticipationConditionOperand | AttributeMappingOperand | ReferenceMappingOperand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParticipationConditionOperand
		public RuleCall getParticipationConditionOperandParserRuleCall_0() { return cParticipationConditionOperandParserRuleCall_0; }
		
		//AttributeMappingOperand
		public RuleCall getAttributeMappingOperandParserRuleCall_1() { return cAttributeMappingOperandParserRuleCall_1; }
		
		//ReferenceMappingOperand
		public RuleCall getReferenceMappingOperandParserRuleCall_2() { return cReferenceMappingOperandParserRuleCall_2; }
	}
	public class LiteralOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.LiteralOperand");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cExpressionAlternatives_0 = (Alternatives)cExpressionAssignment.eContents().get(0);
		private final RuleCall cExpressionXBooleanLiteralParserRuleCall_0_0 = (RuleCall)cExpressionAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionXNumberLiteralParserRuleCall_0_1 = (RuleCall)cExpressionAlternatives_0.eContents().get(1);
		private final RuleCall cExpressionXNullLiteralParserRuleCall_0_2 = (RuleCall)cExpressionAlternatives_0.eContents().get(2);
		private final RuleCall cExpressionXStringLiteralParserRuleCall_0_3 = (RuleCall)cExpressionAlternatives_0.eContents().get(3);
		
		//LiteralOperand:
		//    expression=(XBooleanLiteral |
		//        XNumberLiteral |
		//        XNullLiteral |
		//        XStringLiteral)
		//    // TODO List literal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=(XBooleanLiteral |
		//    XNumberLiteral |
		//    XNullLiteral |
		//    XStringLiteral)
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//(XBooleanLiteral |
		//        XNumberLiteral |
		//        XNullLiteral |
		//        XStringLiteral)
		public Alternatives getExpressionAlternatives_0() { return cExpressionAlternatives_0; }
		
		//XBooleanLiteral
		public RuleCall getExpressionXBooleanLiteralParserRuleCall_0_0() { return cExpressionXBooleanLiteralParserRuleCall_0_0; }
		
		//XNumberLiteral
		public RuleCall getExpressionXNumberLiteralParserRuleCall_0_1() { return cExpressionXNumberLiteralParserRuleCall_0_1; }
		
		//XNullLiteral
		public RuleCall getExpressionXNullLiteralParserRuleCall_0_2() { return cExpressionXNullLiteralParserRuleCall_0_2; }
		
		//XStringLiteral
		public RuleCall getExpressionXStringLiteralParserRuleCall_0_3() { return cExpressionXStringLiteralParserRuleCall_0_3; }
	}
	public class QualifiedParticipationClassOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.QualifiedParticipationClassOperand");
		private final Assignment cParticipationClassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParticipationClassParticipationClassCrossReference_0 = (CrossReference)cParticipationClassAssignment.eContents().get(0);
		private final RuleCall cParticipationClassParticipationClassQualifiedClassParserRuleCall_0_1 = (RuleCall)cParticipationClassParticipationClassCrossReference_0.eContents().get(1);
		
		//QualifiedParticipationClassOperand returns ParticipationClassOperand:
		//    participationClass=[ParticipationClass|QualifiedClass]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//participationClass=[ParticipationClass|QualifiedClass]
		public Assignment getParticipationClassAssignment() { return cParticipationClassAssignment; }
		
		//[ParticipationClass|QualifiedClass]
		public CrossReference getParticipationClassParticipationClassCrossReference_0() { return cParticipationClassParticipationClassCrossReference_0; }
		
		//QualifiedClass
		public RuleCall getParticipationClassParticipationClassQualifiedClassParserRuleCall_0_1() { return cParticipationClassParticipationClassQualifiedClassParserRuleCall_0_1; }
	}
	public class UnqualifiedParticipationClassOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.UnqualifiedParticipationClassOperand");
		private final Assignment cParticipationClassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParticipationClassParticipationClassCrossReference_0 = (CrossReference)cParticipationClassAssignment.eContents().get(0);
		private final RuleCall cParticipationClassParticipationClassUnqualifiedClassParserRuleCall_0_1 = (RuleCall)cParticipationClassParticipationClassCrossReference_0.eContents().get(1);
		
		//UnqualifiedParticipationClassOperand returns ParticipationClassOperand:
		//    participationClass=[ParticipationClass|UnqualifiedClass]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//participationClass=[ParticipationClass|UnqualifiedClass]
		public Assignment getParticipationClassAssignment() { return cParticipationClassAssignment; }
		
		//[ParticipationClass|UnqualifiedClass]
		public CrossReference getParticipationClassParticipationClassCrossReference_0() { return cParticipationClassParticipationClassCrossReference_0; }
		
		//UnqualifiedClass
		public RuleCall getParticipationClassParticipationClassUnqualifiedClassParserRuleCall_0_1() { return cParticipationClassParticipationClassUnqualifiedClassParserRuleCall_0_1; }
	}
	public class QualifiedParticipationAttributeOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.QualifiedParticipationAttributeOperand");
		private final Assignment cParticipationAttributeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParticipationAttributeQualifiedParticipationAttributeParserRuleCall_0 = (RuleCall)cParticipationAttributeAssignment.eContents().get(0);
		
		//QualifiedParticipationAttributeOperand returns ParticipationAttributeOperand:
		//    participationAttribute=QualifiedParticipationAttribute
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//participationAttribute=QualifiedParticipationAttribute
		public Assignment getParticipationAttributeAssignment() { return cParticipationAttributeAssignment; }
		
		//QualifiedParticipationAttribute
		public RuleCall getParticipationAttributeQualifiedParticipationAttributeParserRuleCall_0() { return cParticipationAttributeQualifiedParticipationAttributeParserRuleCall_0; }
	}
	public class UnqualifiedParticipationAttributeOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.UnqualifiedParticipationAttributeOperand");
		private final Assignment cParticipationAttributeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParticipationAttributeUnqualifiedParticipationAttributeParserRuleCall_0 = (RuleCall)cParticipationAttributeAssignment.eContents().get(0);
		
		//UnqualifiedParticipationAttributeOperand returns ParticipationAttributeOperand:
		//    participationAttribute=UnqualifiedParticipationAttribute
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//participationAttribute=UnqualifiedParticipationAttribute
		public Assignment getParticipationAttributeAssignment() { return cParticipationAttributeAssignment; }
		
		//UnqualifiedParticipationAttribute
		public RuleCall getParticipationAttributeUnqualifiedParticipationAttributeParserRuleCall_0() { return cParticipationAttributeUnqualifiedParticipationAttributeParserRuleCall_0; }
	}
	public class LocalUnqualifiedCommonalityAttributeOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.LocalUnqualifiedCommonalityAttributeOperand");
		private final Assignment cAttributeReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAttributeReferenceLocalUnqualifiedCommonalityAttributeReferenceParserRuleCall_0 = (RuleCall)cAttributeReferenceAssignment.eContents().get(0);
		
		//LocalUnqualifiedCommonalityAttributeOperand returns CommonalityAttributeOperand:
		//    attributeReference=LocalUnqualifiedCommonalityAttributeReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attributeReference=LocalUnqualifiedCommonalityAttributeReference
		public Assignment getAttributeReferenceAssignment() { return cAttributeReferenceAssignment; }
		
		//LocalUnqualifiedCommonalityAttributeReference
		public RuleCall getAttributeReferenceLocalUnqualifiedCommonalityAttributeReferenceParserRuleCall_0() { return cAttributeReferenceLocalUnqualifiedCommonalityAttributeReferenceParserRuleCall_0; }
	}
	public class DomainNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.DomainName");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///******************
		// * Datatype Rules *
		// ******************/
		//DomainName:
		//    ValidID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}
	public class UnqualifiedClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.UnqualifiedClass");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnqualifiedClass:
		//    ValidID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}
	public class QualifiedClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.QualifiedClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDomainNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cUnqualifiedClassParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedClass:
		//    DomainName ':' UnqualifiedClass
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DomainName ':' UnqualifiedClass
		public Group getGroup() { return cGroup; }
		
		//DomainName
		public RuleCall getDomainNameParserRuleCall_0() { return cDomainNameParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//UnqualifiedClass
		public RuleCall getUnqualifiedClassParserRuleCall_2() { return cUnqualifiedClassParserRuleCall_2; }
	}
	public class UnqualifiedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.UnqualifiedAttribute");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnqualifiedAttribute:
		//    ValidID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}
	public class OperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.OperatorName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cLessThanSignEqualsSignKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Keyword cVerticalLineVerticalLineKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cAmpersandAmpersandKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cEqualsSignEqualsSignKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_10 = (Keyword)cAlternatives_1.eContents().get(10);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_1_11 = (Keyword)cAlternatives_1.eContents().get(11);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_1_12 = (Keyword)cAlternatives_1.eContents().get(12);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_13 = (Keyword)cAlternatives_1.eContents().get(13);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1_14 = (Keyword)cAlternatives_1.eContents().get(14);
		private final Keyword cQuestionMarkColonKeyword_1_15 = (Keyword)cAlternatives_1.eContents().get(15);
		private final Keyword cAsteriskAsteriskKeyword_1_16 = (Keyword)cAlternatives_1.eContents().get(16);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_17 = (Keyword)cAlternatives_1.eContents().get(17);
		private final Keyword cPlusSignPlusSignKeyword_1_18 = (Keyword)cAlternatives_1.eContents().get(18);
		private final Keyword cColonColonKeyword_1_19 = (Keyword)cAlternatives_1.eContents().get(19);
		private final Keyword cEqualsSignKeyword_1_20 = (Keyword)cAlternatives_1.eContents().get(20);
		private final Keyword cExclamationMarkKeyword_1_21 = (Keyword)cAlternatives_1.eContents().get(21);
		private final Keyword cPercentSignKeyword_1_22 = (Keyword)cAlternatives_1.eContents().get(22);
		private final Keyword cAmpersandKeyword_1_23 = (Keyword)cAlternatives_1.eContents().get(23);
		private final Keyword cAsteriskKeyword_1_24 = (Keyword)cAlternatives_1.eContents().get(24);
		private final Keyword cPlusSignKeyword_1_25 = (Keyword)cAlternatives_1.eContents().get(25);
		private final Keyword cHyphenMinusKeyword_1_26 = (Keyword)cAlternatives_1.eContents().get(26);
		private final Keyword cSolidusKeyword_1_27 = (Keyword)cAlternatives_1.eContents().get(27);
		private final Keyword cLessThanSignKeyword_1_28 = (Keyword)cAlternatives_1.eContents().get(28);
		private final Keyword cGreaterThanSignKeyword_1_29 = (Keyword)cAlternatives_1.eContents().get(29);
		private final Keyword cCircumflexAccentKeyword_1_30 = (Keyword)cAlternatives_1.eContents().get(30);
		private final Keyword cTildeKeyword_1_31 = (Keyword)cAlternatives_1.eContents().get(31);
		private final Keyword cColonKeyword_1_32 = (Keyword)cAlternatives_1.eContents().get(32);
		private final Keyword cQuestionMarkKeyword_1_33 = (Keyword)cAlternatives_1.eContents().get(33);
		
		//// To correctly parse character combinations, we need to copy all tokens that
		//// already occurred in the parent grammars (i.e. Xbase).
		//// Must be in sync with CommonalitiesOperatorConventions.TYPE_NAME_TO_LANGUAGE_IDENTIFIER!
		//// Excluded are:
		////   * '->' and '<-': Ambiguous since the next participation condition may start with this as well
		////   * '_' because it is used for a wildcard import
		//OperatorName:
		//    ID |
		//    ( '+=' | '-=' | '*=' | '/=' | '%=' | '>=' | '<=' | '||' | '&&' | '==' | '!=' | '===' | '!=='
		//    | '=>' | '<>' | '?:' | '**' | '--' | '++' | '::'
		//    | '=' | '!' | '%' | '&' | '*' | '+' | '-' | '/' | '<' | '>' | '^' | '~' | ':' | '?')+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID |
		//( '+=' | '-=' | '*=' | '/=' | '%=' | '>=' | '<=' | '||' | '&&' | '==' | '!=' | '===' | '!=='
		//| '=>' | '<>' | '?:' | '**' | '--' | '++' | '::'
		//| '=' | '!' | '%' | '&' | '*' | '+' | '-' | '/' | '<' | '>' | '^' | '~' | ':' | '?')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//( '+=' | '-=' | '*=' | '/=' | '%=' | '>=' | '<=' | '||' | '&&' | '==' | '!=' | '===' | '!=='
		//| '=>' | '<>' | '?:' | '**' | '--' | '++' | '::'
		//| '=' | '!' | '%' | '&' | '*' | '+' | '-' | '/' | '<' | '>' | '^' | '~' | ':' | '?')+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_1_0() { return cPlusSignEqualsSignKeyword_1_0; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_1_1() { return cHyphenMinusEqualsSignKeyword_1_1; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_1_2() { return cAsteriskEqualsSignKeyword_1_2; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_1_3() { return cSolidusEqualsSignKeyword_1_3; }
		
		//'%='
		public Keyword getPercentSignEqualsSignKeyword_1_4() { return cPercentSignEqualsSignKeyword_1_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_5() { return cGreaterThanSignEqualsSignKeyword_1_5; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_6() { return cLessThanSignEqualsSignKeyword_1_6; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_7() { return cVerticalLineVerticalLineKeyword_1_7; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_8() { return cAmpersandAmpersandKeyword_1_8; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_9() { return cEqualsSignEqualsSignKeyword_1_9; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_10() { return cExclamationMarkEqualsSignKeyword_1_10; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_1_11() { return cEqualsSignEqualsSignEqualsSignKeyword_1_11; }
		
		//'!=='
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_1_12() { return cExclamationMarkEqualsSignEqualsSignKeyword_1_12; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_13() { return cEqualsSignGreaterThanSignKeyword_1_13; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1_14() { return cLessThanSignGreaterThanSignKeyword_1_14; }
		
		//'?:'
		public Keyword getQuestionMarkColonKeyword_1_15() { return cQuestionMarkColonKeyword_1_15; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1_16() { return cAsteriskAsteriskKeyword_1_16; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1_17() { return cHyphenMinusHyphenMinusKeyword_1_17; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_18() { return cPlusSignPlusSignKeyword_1_18; }
		
		//'::'
		public Keyword getColonColonKeyword_1_19() { return cColonColonKeyword_1_19; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_20() { return cEqualsSignKeyword_1_20; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_21() { return cExclamationMarkKeyword_1_21; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_22() { return cPercentSignKeyword_1_22; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_23() { return cAmpersandKeyword_1_23; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_24() { return cAsteriskKeyword_1_24; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_25() { return cPlusSignKeyword_1_25; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_26() { return cHyphenMinusKeyword_1_26; }
		
		//'/'
		public Keyword getSolidusKeyword_1_27() { return cSolidusKeyword_1_27; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_28() { return cLessThanSignKeyword_1_28; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_29() { return cGreaterThanSignKeyword_1_29; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_30() { return cCircumflexAccentKeyword_1_30; }
		
		//'~'
		public Keyword getTildeKeyword_1_31() { return cTildeKeyword_1_31; }
		
		//':'
		public Keyword getColonKeyword_1_32() { return cColonKeyword_1_32; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_33() { return cQuestionMarkKeyword_1_33; }
	}
	public class QualifiedOperatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.QualifiedOperatorName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cOperatorNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//QualifiedOperatorName:
		//    ValidID ('.' ValidID)* '.' OperatorName
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID ('.' ValidID)* '.' OperatorName
		public Group getGroup() { return cGroup; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }
		
		//('.' ValidID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//OperatorName
		public RuleCall getOperatorNameParserRuleCall_3() { return cOperatorNameParserRuleCall_3; }
	}
	public class QualifiedOperatorWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.commonalities.CommonalitiesLanguage.QualifiedOperatorWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword c_Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//QualifiedOperatorWildCard:
		//    ValidID ('.' ValidID)* '.' '_'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID ('.' ValidID)* '.' '_'
		public Group getGroup() { return cGroup; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }
		
		//('.' ValidID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//'_'
		public Keyword get_Keyword_3() { return c_Keyword_3; }
	}
	
	
	private final CommonalityFileElements pCommonalityFile;
	private final OperatorImportElements pOperatorImport;
	private final MetamodelImportElements pMetamodelImport;
	private final DomainElements pDomain;
	private final ConceptElements pConcept;
	private final MetaclassElements pMetaclass;
	private final CommonalityElements pCommonality;
	private final PackageLikeElements pPackageLike;
	private final ParticipationElements pParticipation;
	private final ClassLikeElements pClassLike;
	private final ParticipationClassElements pParticipationClass;
	private final SimpleParticipationClassElements pSimpleParticipationClass;
	private final FullParticipationClassElements pFullParticipationClass;
	private final ParticipationPartElements pParticipationPart;
	private final ParticipationRelationElements pParticipationRelation;
	private final ParticipationConditionElements pParticipationCondition;
	private final ParticipationConditionLeftOperandElements pParticipationConditionLeftOperand;
	private final ParticipationConditionRightOperandElements pParticipationConditionRightOperand;
	private final ParticipationConditionOperandElements pParticipationConditionOperand;
	private final AttributeElements pAttribute;
	private final CommonalityAttributeElements pCommonalityAttribute;
	private final CommonalityAttributeMappingElements pCommonalityAttributeMapping;
	private final SimpleAttributeMappingElements pSimpleAttributeMapping;
	private final OperatorAttributeMappingElements pOperatorAttributeMapping;
	private final AttributeMappingOperandElements pAttributeMappingOperand;
	private final ParticipationAttributeElements pParticipationAttribute;
	private final QualifiedParticipationAttributeElements pQualifiedParticipationAttribute;
	private final UnqualifiedParticipationAttributeElements pUnqualifiedParticipationAttribute;
	private final CommonalityAttributeReferenceElements pCommonalityAttributeReference;
	private final LocalUnqualifiedCommonalityAttributeReferenceElements pLocalUnqualifiedCommonalityAttributeReference;
	private final CommonalityReferenceElements pCommonalityReference;
	private final CommonalityReferenceMappingElements pCommonalityReferenceMapping;
	private final SimpleReferenceMappingElements pSimpleReferenceMapping;
	private final OperatorReferenceMappingElements pOperatorReferenceMapping;
	private final ReferenceMappingOperandElements pReferenceMappingOperand;
	private final ReferencedParticipationAttributeOperandElements pReferencedParticipationAttributeOperand;
	private final OperandElements pOperand;
	private final LiteralOperandElements pLiteralOperand;
	private final QualifiedParticipationClassOperandElements pQualifiedParticipationClassOperand;
	private final UnqualifiedParticipationClassOperandElements pUnqualifiedParticipationClassOperand;
	private final QualifiedParticipationAttributeOperandElements pQualifiedParticipationAttributeOperand;
	private final UnqualifiedParticipationAttributeOperandElements pUnqualifiedParticipationAttributeOperand;
	private final LocalUnqualifiedCommonalityAttributeOperandElements pLocalUnqualifiedCommonalityAttributeOperand;
	private final DomainNameElements pDomainName;
	private final UnqualifiedClassElements pUnqualifiedClass;
	private final QualifiedClassElements pQualifiedClass;
	private final UnqualifiedAttributeElements pUnqualifiedAttribute;
	private final OperatorNameElements pOperatorName;
	private final QualifiedOperatorNameElements pQualifiedOperatorName;
	private final QualifiedOperatorWildCardElements pQualifiedOperatorWildCard;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public CommonalitiesLanguageGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pCommonalityFile = new CommonalityFileElements();
		this.pOperatorImport = new OperatorImportElements();
		this.pMetamodelImport = new MetamodelImportElements();
		this.pDomain = new DomainElements();
		this.pConcept = new ConceptElements();
		this.pMetaclass = new MetaclassElements();
		this.pCommonality = new CommonalityElements();
		this.pPackageLike = new PackageLikeElements();
		this.pParticipation = new ParticipationElements();
		this.pClassLike = new ClassLikeElements();
		this.pParticipationClass = new ParticipationClassElements();
		this.pSimpleParticipationClass = new SimpleParticipationClassElements();
		this.pFullParticipationClass = new FullParticipationClassElements();
		this.pParticipationPart = new ParticipationPartElements();
		this.pParticipationRelation = new ParticipationRelationElements();
		this.pParticipationCondition = new ParticipationConditionElements();
		this.pParticipationConditionLeftOperand = new ParticipationConditionLeftOperandElements();
		this.pParticipationConditionRightOperand = new ParticipationConditionRightOperandElements();
		this.pParticipationConditionOperand = new ParticipationConditionOperandElements();
		this.pAttribute = new AttributeElements();
		this.pCommonalityAttribute = new CommonalityAttributeElements();
		this.pCommonalityAttributeMapping = new CommonalityAttributeMappingElements();
		this.pSimpleAttributeMapping = new SimpleAttributeMappingElements();
		this.pOperatorAttributeMapping = new OperatorAttributeMappingElements();
		this.pAttributeMappingOperand = new AttributeMappingOperandElements();
		this.pParticipationAttribute = new ParticipationAttributeElements();
		this.pQualifiedParticipationAttribute = new QualifiedParticipationAttributeElements();
		this.pUnqualifiedParticipationAttribute = new UnqualifiedParticipationAttributeElements();
		this.pCommonalityAttributeReference = new CommonalityAttributeReferenceElements();
		this.pLocalUnqualifiedCommonalityAttributeReference = new LocalUnqualifiedCommonalityAttributeReferenceElements();
		this.pCommonalityReference = new CommonalityReferenceElements();
		this.pCommonalityReferenceMapping = new CommonalityReferenceMappingElements();
		this.pSimpleReferenceMapping = new SimpleReferenceMappingElements();
		this.pOperatorReferenceMapping = new OperatorReferenceMappingElements();
		this.pReferenceMappingOperand = new ReferenceMappingOperandElements();
		this.pReferencedParticipationAttributeOperand = new ReferencedParticipationAttributeOperandElements();
		this.pOperand = new OperandElements();
		this.pLiteralOperand = new LiteralOperandElements();
		this.pQualifiedParticipationClassOperand = new QualifiedParticipationClassOperandElements();
		this.pUnqualifiedParticipationClassOperand = new UnqualifiedParticipationClassOperandElements();
		this.pQualifiedParticipationAttributeOperand = new QualifiedParticipationAttributeOperandElements();
		this.pUnqualifiedParticipationAttributeOperand = new UnqualifiedParticipationAttributeOperandElements();
		this.pLocalUnqualifiedCommonalityAttributeOperand = new LocalUnqualifiedCommonalityAttributeOperandElements();
		this.pDomainName = new DomainNameElements();
		this.pUnqualifiedClass = new UnqualifiedClassElements();
		this.pQualifiedClass = new QualifiedClassElements();
		this.pUnqualifiedAttribute = new UnqualifiedAttributeElements();
		this.pOperatorName = new OperatorNameElements();
		this.pQualifiedOperatorName = new QualifiedOperatorNameElements();
		this.pQualifiedOperatorWildCard = new QualifiedOperatorWildCardElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tools.vitruv.dsls.commonalities.CommonalitiesLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//CommonalityFile:
	//    (operatorImports+=OperatorImport)*
	//    (metamodelImports+=MetamodelImport)*
	//    concept=Concept
	//    commonality=Commonality
	//;
	public CommonalityFileElements getCommonalityFileAccess() {
		return pCommonalityFile;
	}
	
	public ParserRule getCommonalityFileRule() {
		return getCommonalityFileAccess().getRule();
	}
	
	//OperatorImport:
	//    'import' (importedNamespace=QualifiedOperatorName | importedNamespace=QualifiedOperatorWildCard)
	//;
	public OperatorImportElements getOperatorImportAccess() {
		return pOperatorImport;
	}
	
	public ParserRule getOperatorImportRule() {
		return getOperatorImportAccess().getRule();
	}
	
	//MetamodelImport returns common::MetamodelImport:
	//    'import' package=[ecore::EPackage|STRING] 'as' name=ValidID (useQualifiedNames?='using' 'qualified' 'names')?
	//;
	public MetamodelImportElements getMetamodelImportAccess() {
		return pMetamodelImport;
	}
	
	public ParserRule getMetamodelImportRule() {
		return getMetamodelImportAccess().getRule();
	}
	
	//Domain:
	//    Concept
	//;
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//Concept:
	//    'concept' name=ValidID
	//;
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Metaclass:
	//    Commonality
	//;
	public MetaclassElements getMetaclassAccess() {
		return pMetaclass;
	}
	
	public ParserRule getMetaclassRule() {
		return getMetaclassAccess().getRule();
	}
	
	//Commonality:
	//    (referenced?='referenced')? 'commonality' name=ValidID '{'
	//        participations+=Participation*
	//        (attributes+=CommonalityAttribute|references+=CommonalityReference)*
	//    '}'
	//;
	public CommonalityElements getCommonalityAccess() {
		return pCommonality;
	}
	
	public ParserRule getCommonalityRule() {
		return getCommonalityAccess().getRule();
	}
	
	///******************
	// * Participations *
	// ******************/
	//PackageLike:
	//    Participation
	//;
	public PackageLikeElements getPackageLikeAccess() {
		return pPackageLike;
	}
	
	public ParserRule getPackageLikeRule() {
		return getPackageLikeAccess().getRule();
	}
	
	//Participation:
	//    'with' (domainName=DomainName | '(' domainName=DomainName ('as' domainAlias=ValidID)? ')')
	//    ':' (parts += SimpleParticipationClass | '(' parts += ParticipationPart (',' parts+=ParticipationPart)* ')')
	//    ('whereat' '{'
	//        (conditions+=ParticipationCondition (',' conditions+=ParticipationCondition)*)?
	//    '}')?
	//;
	public ParticipationElements getParticipationAccess() {
		return pParticipation;
	}
	
	public ParserRule getParticipationRule() {
		return getParticipationAccess().getRule();
	}
	
	//ClassLike:
	//    ParticipationClass
	//;
	public ClassLikeElements getClassLikeAccess() {
		return pClassLike;
	}
	
	public ParserRule getClassLikeRule() {
		return getClassLikeAccess().getRule();
	}
	
	//ParticipationClass: // never used as a parser rule, only establishes the inheritance hierarchy
	//    ->SimpleParticipationClass | FullParticipationClass
	//;
	public ParticipationClassElements getParticipationClassAccess() {
		return pParticipationClass;
	}
	
	public ParserRule getParticipationClassRule() {
		return getParticipationClassAccess().getRule();
	}
	
	//SimpleParticipationClass returns ParticipationClass:
	//    superMetaclass=[Metaclass|UnqualifiedClass]
	//;
	public SimpleParticipationClassElements getSimpleParticipationClassAccess() {
		return pSimpleParticipationClass;
	}
	
	public ParserRule getSimpleParticipationClassRule() {
		return getSimpleParticipationClassAccess().getRule();
	}
	
	//FullParticipationClass returns ParticipationClass:
	//    {ParticipationClass} (singleton?='single')? superMetaclass=[Metaclass|UnqualifiedClass] ('as' classAlias=ValidID)?
	//;
	public FullParticipationClassElements getFullParticipationClassAccess() {
		return pFullParticipationClass;
	}
	
	public ParserRule getFullParticipationClassRule() {
		return getFullParticipationClassAccess().getRule();
	}
	
	//ParticipationPart:
	//    FullParticipationClass | '(' FullParticipationClass ')' | ParticipationRelation
	//;
	public ParticipationPartElements getParticipationPartAccess() {
		return pParticipationPart;
	}
	
	public ParserRule getParticipationPartRule() {
		return getParticipationPartAccess().getRule();
	}
	
	//ParticipationRelation:
	//    (leftParts += SimpleParticipationClass | '(' leftParts += ParticipationPart (',' leftParts+=ParticipationPart)* ')')
	//    operator=[jvmTypes::JvmDeclaredType|OperatorName]
	//    (rightParts += SimpleParticipationClass | '(' rightParts += ParticipationPart (',' rightParts+=ParticipationPart)* ')')
	//;
	public ParticipationRelationElements getParticipationRelationAccess() {
		return pParticipationRelation;
	}
	
	public ParserRule getParticipationRelationRule() {
		return getParticipationRelationAccess().getRule();
	}
	
	//ParticipationCondition:
	//    ({BidirectionalParticipationCondition} | '->' {EnforcedParticipationCondition} | '<-' {CheckedParticipationCondition})
	//    leftOperand=ParticipationConditionLeftOperand
	//    operator=[jvmTypes::JvmDeclaredType|OperatorName]
	//    ((rightOperands+=ParticipationConditionRightOperand) | ('(' (rightOperands+=ParticipationConditionRightOperand (',' rightOperands+=ParticipationConditionRightOperand)*)? ')'))?
	//;
	public ParticipationConditionElements getParticipationConditionAccess() {
		return pParticipationCondition;
	}
	
	public ParserRule getParticipationConditionRule() {
		return getParticipationConditionAccess().getRule();
	}
	
	//ParticipationConditionLeftOperand returns ParticipationConditionOperand:
	//    UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand
	//;
	public ParticipationConditionLeftOperandElements getParticipationConditionLeftOperandAccess() {
		return pParticipationConditionLeftOperand;
	}
	
	public ParserRule getParticipationConditionLeftOperandRule() {
		return getParticipationConditionLeftOperandAccess().getRule();
	}
	
	//ParticipationConditionRightOperand returns ParticipationConditionOperand:
	//    UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
	//;
	public ParticipationConditionRightOperandElements getParticipationConditionRightOperandAccess() {
		return pParticipationConditionRightOperand;
	}
	
	public ParserRule getParticipationConditionRightOperandRule() {
		return getParticipationConditionRightOperandAccess().getRule();
	}
	
	//ParticipationConditionOperand:
	//    UnqualifiedParticipationClassOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
	//;
	public ParticipationConditionOperandElements getParticipationConditionOperandAccess() {
		return pParticipationConditionOperand;
	}
	
	public ParserRule getParticipationConditionOperandRule() {
		return getParticipationConditionOperandAccess().getRule();
	}
	
	///**************
	// * Attributes *
	// **************/
	//Attribute:
	//    CommonalityAttribute | ParticipationAttribute | CommonalityReference
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//CommonalityAttribute:
	//    'has' name=ValidID '{'
	//        mappings+=CommonalityAttributeMapping*
	//    '}'
	//;
	public CommonalityAttributeElements getCommonalityAttributeAccess() {
		return pCommonalityAttribute;
	}
	
	public ParserRule getCommonalityAttributeRule() {
		return getCommonalityAttributeAccess().getRule();
	}
	
	//CommonalityAttributeMapping:
	//    SimpleAttributeMapping | OperatorAttributeMapping
	//;
	public CommonalityAttributeMappingElements getCommonalityAttributeMappingAccess() {
		return pCommonalityAttributeMapping;
	}
	
	public ParserRule getCommonalityAttributeMappingRule() {
		return getCommonalityAttributeMappingAccess().getRule();
	}
	
	//SimpleAttributeMapping:
	//    (readAndWrite?='=' | write?='->' | read?='<-')
	//    attribute=QualifiedParticipationAttribute
	//;
	public SimpleAttributeMappingElements getSimpleAttributeMappingAccess() {
		return pSimpleAttributeMapping;
	}
	
	public ParserRule getSimpleAttributeMappingRule() {
		return getSimpleAttributeMappingAccess().getRule();
	}
	
	//OperatorAttributeMapping:
	//    (readAndWrite?='=' | write?='->' | read?='<-')
	//    operator=[jvmTypes::JvmDeclaredType|OperatorName]
	//    '(' (operands+=AttributeMappingOperand (',' operands+=AttributeMappingOperand)*)? ')'
	//;
	public OperatorAttributeMappingElements getOperatorAttributeMappingAccess() {
		return pOperatorAttributeMapping;
	}
	
	public ParserRule getOperatorAttributeMappingRule() {
		return getOperatorAttributeMappingAccess().getRule();
	}
	
	//AttributeMappingOperand:
	//    LocalUnqualifiedCommonalityAttributeOperand | QualifiedParticipationAttributeOperand | QualifiedParticipationClassOperand | LiteralOperand
	//;
	public AttributeMappingOperandElements getAttributeMappingOperandAccess() {
		return pAttributeMappingOperand;
	}
	
	public ParserRule getAttributeMappingOperandRule() {
		return getAttributeMappingOperandAccess().getRule();
	}
	
	//ParticipationAttribute:
	//    QualifiedParticipationAttribute | UnqualifiedParticipationAttribute
	//;
	public ParticipationAttributeElements getParticipationAttributeAccess() {
		return pParticipationAttribute;
	}
	
	public ParserRule getParticipationAttributeRule() {
		return getParticipationAttributeAccess().getRule();
	}
	
	//QualifiedParticipationAttribute returns ParticipationAttribute:
	//    participationClass=[ParticipationClass|QualifiedClass] '.' attribute=[Attribute|UnqualifiedAttribute]
	//;
	public QualifiedParticipationAttributeElements getQualifiedParticipationAttributeAccess() {
		return pQualifiedParticipationAttribute;
	}
	
	public ParserRule getQualifiedParticipationAttributeRule() {
		return getQualifiedParticipationAttributeAccess().getRule();
	}
	
	//UnqualifiedParticipationAttribute returns ParticipationAttribute:
	//    participationClass=[ParticipationClass|UnqualifiedClass] '.' attribute=[Attribute|UnqualifiedAttribute]
	//;
	public UnqualifiedParticipationAttributeElements getUnqualifiedParticipationAttributeAccess() {
		return pUnqualifiedParticipationAttribute;
	}
	
	public ParserRule getUnqualifiedParticipationAttributeRule() {
		return getUnqualifiedParticipationAttributeAccess().getRule();
	}
	
	//CommonalityAttributeReference:
	//    LocalUnqualifiedCommonalityAttributeReference
	//;
	public CommonalityAttributeReferenceElements getCommonalityAttributeReferenceAccess() {
		return pCommonalityAttributeReference;
	}
	
	public ParserRule getCommonalityAttributeReferenceRule() {
		return getCommonalityAttributeReferenceAccess().getRule();
	}
	
	//// Local: Can only refer to the (single) local commonality.
	//LocalUnqualifiedCommonalityAttributeReference returns CommonalityAttributeReference:
	//    commonality=[Commonality|UnqualifiedClass] '.' attribute=[CommonalityAttribute|UnqualifiedAttribute]
	//;
	public LocalUnqualifiedCommonalityAttributeReferenceElements getLocalUnqualifiedCommonalityAttributeReferenceAccess() {
		return pLocalUnqualifiedCommonalityAttributeReference;
	}
	
	public ParserRule getLocalUnqualifiedCommonalityAttributeReferenceRule() {
		return getLocalUnqualifiedCommonalityAttributeReferenceAccess().getRule();
	}
	
	///**************
	// * References *
	// **************/
	//CommonalityReference:
	//    'has' name=ValidID 'referencing' referenceType=[Commonality|QualifiedClass] '{'
	//        mappings+=CommonalityReferenceMapping*
	//    '}'
	//;
	public CommonalityReferenceElements getCommonalityReferenceAccess() {
		return pCommonalityReference;
	}
	
	public ParserRule getCommonalityReferenceRule() {
		return getCommonalityReferenceAccess().getRule();
	}
	
	//CommonalityReferenceMapping:
	//    SimpleReferenceMapping | OperatorReferenceMapping
	//;
	public CommonalityReferenceMappingElements getCommonalityReferenceMappingAccess() {
		return pCommonalityReferenceMapping;
	}
	
	public ParserRule getCommonalityReferenceMappingRule() {
		return getCommonalityReferenceMappingAccess().getRule();
	}
	
	//SimpleReferenceMapping:
	//    (readAndWrite?='=' | write?='->' | read?='<-')
	//    reference=QualifiedParticipationAttribute
	//    // TODO not used right now
	//    ('via' referenceTargets+=[ParticipationClass|QualifiedClass] (',' referenceTargets+=[ParticipationClass|QualifiedClass])*)?
	//;
	public SimpleReferenceMappingElements getSimpleReferenceMappingAccess() {
		return pSimpleReferenceMapping;
	}
	
	public ParserRule getSimpleReferenceMappingRule() {
		return getSimpleReferenceMappingAccess().getRule();
	}
	
	//OperatorReferenceMapping:
	//    (readAndWrite?='=' | write?='->' | read?='<-')
	//    participationClass=[ParticipationClass|QualifiedClass] '.' operator=[jvmTypes::JvmDeclaredType|OperatorName]
	//    '(' (operands+=ReferenceMappingOperand (',' operands+=ReferenceMappingOperand)*)? ')'
	//;
	public OperatorReferenceMappingElements getOperatorReferenceMappingAccess() {
		return pOperatorReferenceMapping;
	}
	
	public ParserRule getOperatorReferenceMappingRule() {
		return getOperatorReferenceMappingAccess().getRule();
	}
	
	//ReferenceMappingOperand:
	//    ReferencedParticipationAttributeOperand | UnqualifiedParticipationAttributeOperand | LiteralOperand
	//;
	public ReferenceMappingOperandElements getReferenceMappingOperandAccess() {
		return pReferenceMappingOperand;
	}
	
	public ParserRule getReferenceMappingOperandRule() {
		return getReferenceMappingOperandAccess().getRule();
	}
	
	//ReferencedParticipationAttributeOperand:
	//    'ref' participationAttribute=UnqualifiedParticipationAttribute
	//;
	public ReferencedParticipationAttributeOperandElements getReferencedParticipationAttributeOperandAccess() {
		return pReferencedParticipationAttributeOperand;
	}
	
	public ParserRule getReferencedParticipationAttributeOperandRule() {
		return getReferencedParticipationAttributeOperandAccess().getRule();
	}
	
	///************
	// * Operands *
	// ************/
	//Operand:
	//    ParticipationConditionOperand | AttributeMappingOperand | ReferenceMappingOperand
	//;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//LiteralOperand:
	//    expression=(XBooleanLiteral |
	//        XNumberLiteral |
	//        XNullLiteral |
	//        XStringLiteral)
	//    // TODO List literal
	//;
	public LiteralOperandElements getLiteralOperandAccess() {
		return pLiteralOperand;
	}
	
	public ParserRule getLiteralOperandRule() {
		return getLiteralOperandAccess().getRule();
	}
	
	//QualifiedParticipationClassOperand returns ParticipationClassOperand:
	//    participationClass=[ParticipationClass|QualifiedClass]
	//;
	public QualifiedParticipationClassOperandElements getQualifiedParticipationClassOperandAccess() {
		return pQualifiedParticipationClassOperand;
	}
	
	public ParserRule getQualifiedParticipationClassOperandRule() {
		return getQualifiedParticipationClassOperandAccess().getRule();
	}
	
	//UnqualifiedParticipationClassOperand returns ParticipationClassOperand:
	//    participationClass=[ParticipationClass|UnqualifiedClass]
	//;
	public UnqualifiedParticipationClassOperandElements getUnqualifiedParticipationClassOperandAccess() {
		return pUnqualifiedParticipationClassOperand;
	}
	
	public ParserRule getUnqualifiedParticipationClassOperandRule() {
		return getUnqualifiedParticipationClassOperandAccess().getRule();
	}
	
	//QualifiedParticipationAttributeOperand returns ParticipationAttributeOperand:
	//    participationAttribute=QualifiedParticipationAttribute
	//;
	public QualifiedParticipationAttributeOperandElements getQualifiedParticipationAttributeOperandAccess() {
		return pQualifiedParticipationAttributeOperand;
	}
	
	public ParserRule getQualifiedParticipationAttributeOperandRule() {
		return getQualifiedParticipationAttributeOperandAccess().getRule();
	}
	
	//UnqualifiedParticipationAttributeOperand returns ParticipationAttributeOperand:
	//    participationAttribute=UnqualifiedParticipationAttribute
	//;
	public UnqualifiedParticipationAttributeOperandElements getUnqualifiedParticipationAttributeOperandAccess() {
		return pUnqualifiedParticipationAttributeOperand;
	}
	
	public ParserRule getUnqualifiedParticipationAttributeOperandRule() {
		return getUnqualifiedParticipationAttributeOperandAccess().getRule();
	}
	
	//LocalUnqualifiedCommonalityAttributeOperand returns CommonalityAttributeOperand:
	//    attributeReference=LocalUnqualifiedCommonalityAttributeReference
	//;
	public LocalUnqualifiedCommonalityAttributeOperandElements getLocalUnqualifiedCommonalityAttributeOperandAccess() {
		return pLocalUnqualifiedCommonalityAttributeOperand;
	}
	
	public ParserRule getLocalUnqualifiedCommonalityAttributeOperandRule() {
		return getLocalUnqualifiedCommonalityAttributeOperandAccess().getRule();
	}
	
	///******************
	// * Datatype Rules *
	// ******************/
	//DomainName:
	//    ValidID
	//;
	public DomainNameElements getDomainNameAccess() {
		return pDomainName;
	}
	
	public ParserRule getDomainNameRule() {
		return getDomainNameAccess().getRule();
	}
	
	//UnqualifiedClass:
	//    ValidID
	//;
	public UnqualifiedClassElements getUnqualifiedClassAccess() {
		return pUnqualifiedClass;
	}
	
	public ParserRule getUnqualifiedClassRule() {
		return getUnqualifiedClassAccess().getRule();
	}
	
	//QualifiedClass:
	//    DomainName ':' UnqualifiedClass
	//;
	public QualifiedClassElements getQualifiedClassAccess() {
		return pQualifiedClass;
	}
	
	public ParserRule getQualifiedClassRule() {
		return getQualifiedClassAccess().getRule();
	}
	
	//UnqualifiedAttribute:
	//    ValidID
	//;
	public UnqualifiedAttributeElements getUnqualifiedAttributeAccess() {
		return pUnqualifiedAttribute;
	}
	
	public ParserRule getUnqualifiedAttributeRule() {
		return getUnqualifiedAttributeAccess().getRule();
	}
	
	//// To correctly parse character combinations, we need to copy all tokens that
	//// already occurred in the parent grammars (i.e. Xbase).
	//// Must be in sync with CommonalitiesOperatorConventions.TYPE_NAME_TO_LANGUAGE_IDENTIFIER!
	//// Excluded are:
	////   * '->' and '<-': Ambiguous since the next participation condition may start with this as well
	////   * '_' because it is used for a wildcard import
	//OperatorName:
	//    ID |
	//    ( '+=' | '-=' | '*=' | '/=' | '%=' | '>=' | '<=' | '||' | '&&' | '==' | '!=' | '===' | '!=='
	//    | '=>' | '<>' | '?:' | '**' | '--' | '++' | '::'
	//    | '=' | '!' | '%' | '&' | '*' | '+' | '-' | '/' | '<' | '>' | '^' | '~' | ':' | '?')+
	//;
	public OperatorNameElements getOperatorNameAccess() {
		return pOperatorName;
	}
	
	public ParserRule getOperatorNameRule() {
		return getOperatorNameAccess().getRule();
	}
	
	//QualifiedOperatorName:
	//    ValidID ('.' ValidID)* '.' OperatorName
	//;
	public QualifiedOperatorNameElements getQualifiedOperatorNameAccess() {
		return pQualifiedOperatorName;
	}
	
	public ParserRule getQualifiedOperatorNameRule() {
		return getQualifiedOperatorNameAccess().getRule();
	}
	
	//QualifiedOperatorWildCard:
	//    ValidID ('.' ValidID)* '.' '_'
	//;
	public QualifiedOperatorWildCardElements getQualifiedOperatorWildCardAccess() {
		return pQualifiedOperatorWildCard;
	}
	
	public ParserRule getQualifiedOperatorWildCardRule() {
		return getQualifiedOperatorWildCardAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression returns XExpression:
	//    {XBlockExpression}
	//    '{'
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
