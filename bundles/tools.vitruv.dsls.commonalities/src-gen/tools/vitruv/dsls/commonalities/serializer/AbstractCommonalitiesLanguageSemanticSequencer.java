/*
 * generated by Xtext 2.30.0
 */
package tools.vitruv.dsls.commonalities.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;
import tools.vitruv.dsls.common.elements.ElementsPackage;
import tools.vitruv.dsls.common.elements.MetamodelImport;
import tools.vitruv.dsls.commonalities.language.BidirectionalParticipationCondition;
import tools.vitruv.dsls.commonalities.language.CheckedParticipationCondition;
import tools.vitruv.dsls.commonalities.language.Commonality;
import tools.vitruv.dsls.commonalities.language.CommonalityAttribute;
import tools.vitruv.dsls.commonalities.language.CommonalityAttributeOperand;
import tools.vitruv.dsls.commonalities.language.CommonalityAttributeReference;
import tools.vitruv.dsls.commonalities.language.CommonalityFile;
import tools.vitruv.dsls.commonalities.language.CommonalityReference;
import tools.vitruv.dsls.commonalities.language.Concept;
import tools.vitruv.dsls.commonalities.language.EnforcedParticipationCondition;
import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.LiteralOperand;
import tools.vitruv.dsls.commonalities.language.OperatorAttributeMapping;
import tools.vitruv.dsls.commonalities.language.OperatorImport;
import tools.vitruv.dsls.commonalities.language.OperatorReferenceMapping;
import tools.vitruv.dsls.commonalities.language.Participation;
import tools.vitruv.dsls.commonalities.language.ParticipationAttribute;
import tools.vitruv.dsls.commonalities.language.ParticipationAttributeOperand;
import tools.vitruv.dsls.commonalities.language.ParticipationClass;
import tools.vitruv.dsls.commonalities.language.ParticipationClassOperand;
import tools.vitruv.dsls.commonalities.language.ParticipationRelation;
import tools.vitruv.dsls.commonalities.language.ReferencedParticipationAttributeOperand;
import tools.vitruv.dsls.commonalities.language.SimpleAttributeMapping;
import tools.vitruv.dsls.commonalities.language.SimpleReferenceMapping;
import tools.vitruv.dsls.commonalities.services.CommonalitiesLanguageGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractCommonalitiesLanguageSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private CommonalitiesLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ElementsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ElementsPackage.METAMODEL_IMPORT:
				sequence_MetamodelImport(context, (MetamodelImport) semanticObject); 
				return; 
			}
		else if (epackage == LanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LanguagePackage.BIDIRECTIONAL_PARTICIPATION_CONDITION:
				sequence_ParticipationCondition(context, (BidirectionalParticipationCondition) semanticObject); 
				return; 
			case LanguagePackage.CHECKED_PARTICIPATION_CONDITION:
				sequence_ParticipationCondition(context, (CheckedParticipationCondition) semanticObject); 
				return; 
			case LanguagePackage.COMMONALITY:
				sequence_Commonality(context, (Commonality) semanticObject); 
				return; 
			case LanguagePackage.COMMONALITY_ATTRIBUTE:
				sequence_CommonalityAttribute(context, (CommonalityAttribute) semanticObject); 
				return; 
			case LanguagePackage.COMMONALITY_ATTRIBUTE_OPERAND:
				sequence_LocalUnqualifiedCommonalityAttributeOperand(context, (CommonalityAttributeOperand) semanticObject); 
				return; 
			case LanguagePackage.COMMONALITY_ATTRIBUTE_REFERENCE:
				sequence_LocalUnqualifiedCommonalityAttributeReference(context, (CommonalityAttributeReference) semanticObject); 
				return; 
			case LanguagePackage.COMMONALITY_FILE:
				sequence_CommonalityFile(context, (CommonalityFile) semanticObject); 
				return; 
			case LanguagePackage.COMMONALITY_REFERENCE:
				sequence_CommonalityReference(context, (CommonalityReference) semanticObject); 
				return; 
			case LanguagePackage.CONCEPT:
				sequence_Concept(context, (Concept) semanticObject); 
				return; 
			case LanguagePackage.ENFORCED_PARTICIPATION_CONDITION:
				sequence_ParticipationCondition(context, (EnforcedParticipationCondition) semanticObject); 
				return; 
			case LanguagePackage.LITERAL_OPERAND:
				sequence_LiteralOperand(context, (LiteralOperand) semanticObject); 
				return; 
			case LanguagePackage.OPERATOR_ATTRIBUTE_MAPPING:
				sequence_OperatorAttributeMapping(context, (OperatorAttributeMapping) semanticObject); 
				return; 
			case LanguagePackage.OPERATOR_IMPORT:
				sequence_OperatorImport(context, (OperatorImport) semanticObject); 
				return; 
			case LanguagePackage.OPERATOR_REFERENCE_MAPPING:
				sequence_OperatorReferenceMapping(context, (OperatorReferenceMapping) semanticObject); 
				return; 
			case LanguagePackage.PARTICIPATION:
				sequence_Participation(context, (Participation) semanticObject); 
				return; 
			case LanguagePackage.PARTICIPATION_ATTRIBUTE:
				if (rule == grammarAccess.getQualifiedParticipationAttributeRule()) {
					sequence_QualifiedParticipationAttribute(context, (ParticipationAttribute) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeRule()
						|| rule == grammarAccess.getParticipationAttributeRule()) {
					sequence_QualifiedParticipationAttribute_UnqualifiedParticipationAttribute(context, (ParticipationAttribute) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnqualifiedParticipationAttributeRule()) {
					sequence_UnqualifiedParticipationAttribute(context, (ParticipationAttribute) semanticObject); 
					return; 
				}
				else break;
			case LanguagePackage.PARTICIPATION_ATTRIBUTE_OPERAND:
				if (rule == grammarAccess.getAttributeMappingOperandRule()
						|| rule == grammarAccess.getQualifiedParticipationAttributeOperandRule()) {
					sequence_QualifiedParticipationAttributeOperand(context, (ParticipationAttributeOperand) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperandRule()) {
					sequence_QualifiedParticipationAttributeOperand_UnqualifiedParticipationAttributeOperand(context, (ParticipationAttributeOperand) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParticipationConditionLeftOperandRule()
						|| rule == grammarAccess.getParticipationConditionRightOperandRule()
						|| rule == grammarAccess.getParticipationConditionOperandRule()
						|| rule == grammarAccess.getReferenceMappingOperandRule()
						|| rule == grammarAccess.getUnqualifiedParticipationAttributeOperandRule()) {
					sequence_UnqualifiedParticipationAttributeOperand(context, (ParticipationAttributeOperand) semanticObject); 
					return; 
				}
				else break;
			case LanguagePackage.PARTICIPATION_CLASS:
				if (rule == grammarAccess.getFullParticipationClassRule()
						|| rule == grammarAccess.getParticipationPartRule()) {
					sequence_FullParticipationClass(context, (ParticipationClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getClassLikeRule()
						|| rule == grammarAccess.getParticipationClassRule()) {
					sequence_FullParticipationClass_SimpleParticipationClass(context, (ParticipationClass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSimpleParticipationClassRule()) {
					sequence_SimpleParticipationClass(context, (ParticipationClass) semanticObject); 
					return; 
				}
				else break;
			case LanguagePackage.PARTICIPATION_CLASS_OPERAND:
				if (rule == grammarAccess.getAttributeMappingOperandRule()
						|| rule == grammarAccess.getQualifiedParticipationClassOperandRule()) {
					sequence_QualifiedParticipationClassOperand(context, (ParticipationClassOperand) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperandRule()) {
					sequence_QualifiedParticipationClassOperand_UnqualifiedParticipationClassOperand(context, (ParticipationClassOperand) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParticipationConditionLeftOperandRule()
						|| rule == grammarAccess.getParticipationConditionRightOperandRule()
						|| rule == grammarAccess.getParticipationConditionOperandRule()
						|| rule == grammarAccess.getUnqualifiedParticipationClassOperandRule()) {
					sequence_UnqualifiedParticipationClassOperand(context, (ParticipationClassOperand) semanticObject); 
					return; 
				}
				else break;
			case LanguagePackage.PARTICIPATION_RELATION:
				sequence_ParticipationRelation(context, (ParticipationRelation) semanticObject); 
				return; 
			case LanguagePackage.REFERENCED_PARTICIPATION_ATTRIBUTE_OPERAND:
				sequence_ReferencedParticipationAttributeOperand(context, (ReferencedParticipationAttributeOperand) semanticObject); 
				return; 
			case LanguagePackage.SIMPLE_ATTRIBUTE_MAPPING:
				sequence_SimpleAttributeMapping(context, (SimpleAttributeMapping) semanticObject); 
				return; 
			case LanguagePackage.SIMPLE_REFERENCE_MAPPING:
				sequence_SimpleReferenceMapping(context, (SimpleReferenceMapping) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns CommonalityAttribute
	 *     CommonalityAttribute returns CommonalityAttribute
	 *
	 * Constraint:
	 *     (name=ValidID mappings+=CommonalityAttributeMapping*)
	 * </pre>
	 */
	protected void sequence_CommonalityAttribute(ISerializationContext context, CommonalityAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommonalityFile returns CommonalityFile
	 *
	 * Constraint:
	 *     (operatorImports+=OperatorImport* metamodelImports+=MetamodelImport* concept=Concept commonality=Commonality)
	 * </pre>
	 */
	protected void sequence_CommonalityFile(ISerializationContext context, CommonalityFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns CommonalityReference
	 *     CommonalityReference returns CommonalityReference
	 *
	 * Constraint:
	 *     (name=ValidID referenceType=[Commonality|QualifiedClass] mappings+=CommonalityReferenceMapping*)
	 * </pre>
	 */
	protected void sequence_CommonalityReference(ISerializationContext context, CommonalityReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Metaclass returns Commonality
	 *     Commonality returns Commonality
	 *
	 * Constraint:
	 *     (referenced?='referenced'? name=ValidID participations+=Participation* (attributes+=CommonalityAttribute | references+=CommonalityReference)*)
	 * </pre>
	 */
	protected void sequence_Commonality(ISerializationContext context, Commonality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Domain returns Concept
	 *     Concept returns Concept
	 *
	 * Constraint:
	 *     name=ValidID
	 * </pre>
	 */
	protected void sequence_Concept(ISerializationContext context, Concept semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.CONCEPT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.CONCEPT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConceptAccess().getNameValidIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FullParticipationClass returns ParticipationClass
	 *     ParticipationPart returns ParticipationClass
	 *
	 * Constraint:
	 *     (singleton?='single'? superMetaclass=[Metaclass|UnqualifiedClass] classAlias=ValidID?)
	 * </pre>
	 */
	protected void sequence_FullParticipationClass(ISerializationContext context, ParticipationClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClassLike returns ParticipationClass
	 *     ParticipationClass returns ParticipationClass
	 *
	 * Constraint:
	 *     (superMetaclass=[Metaclass|UnqualifiedClass] | (singleton?='single'? superMetaclass=[Metaclass|UnqualifiedClass] classAlias=ValidID?))
	 * </pre>
	 */
	protected void sequence_FullParticipationClass_SimpleParticipationClass(ISerializationContext context, ParticipationClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParticipationConditionRightOperand returns LiteralOperand
	 *     ParticipationConditionOperand returns LiteralOperand
	 *     AttributeMappingOperand returns LiteralOperand
	 *     ReferenceMappingOperand returns LiteralOperand
	 *     Operand returns LiteralOperand
	 *     LiteralOperand returns LiteralOperand
	 *
	 * Constraint:
	 *     (expression=XBooleanLiteral | expression=XNumberLiteral | expression=XNullLiteral | expression=XStringLiteral)
	 * </pre>
	 */
	protected void sequence_LiteralOperand(ISerializationContext context, LiteralOperand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeMappingOperand returns CommonalityAttributeOperand
	 *     Operand returns CommonalityAttributeOperand
	 *     LocalUnqualifiedCommonalityAttributeOperand returns CommonalityAttributeOperand
	 *
	 * Constraint:
	 *     attributeReference=LocalUnqualifiedCommonalityAttributeReference
	 * </pre>
	 */
	protected void sequence_LocalUnqualifiedCommonalityAttributeOperand(ISerializationContext context, CommonalityAttributeOperand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.COMMONALITY_ATTRIBUTE_OPERAND__ATTRIBUTE_REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.COMMONALITY_ATTRIBUTE_OPERAND__ATTRIBUTE_REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalUnqualifiedCommonalityAttributeOperandAccess().getAttributeReferenceLocalUnqualifiedCommonalityAttributeReferenceParserRuleCall_0(), semanticObject.getAttributeReference());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommonalityAttributeReference returns CommonalityAttributeReference
	 *     LocalUnqualifiedCommonalityAttributeReference returns CommonalityAttributeReference
	 *
	 * Constraint:
	 *     (commonality=[Commonality|UnqualifiedClass] attribute=[CommonalityAttribute|UnqualifiedAttribute])
	 * </pre>
	 */
	protected void sequence_LocalUnqualifiedCommonalityAttributeReference(ISerializationContext context, CommonalityAttributeReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.COMMONALITY_ATTRIBUTE_REFERENCE__COMMONALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.COMMONALITY_ATTRIBUTE_REFERENCE__COMMONALITY));
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.COMMONALITY_ATTRIBUTE_REFERENCE__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.COMMONALITY_ATTRIBUTE_REFERENCE__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalUnqualifiedCommonalityAttributeReferenceAccess().getCommonalityCommonalityUnqualifiedClassParserRuleCall_0_0_1(), semanticObject.eGet(LanguagePackage.Literals.COMMONALITY_ATTRIBUTE_REFERENCE__COMMONALITY, false));
		feeder.accept(grammarAccess.getLocalUnqualifiedCommonalityAttributeReferenceAccess().getAttributeCommonalityAttributeUnqualifiedAttributeParserRuleCall_2_0_1(), semanticObject.eGet(LanguagePackage.Literals.COMMONALITY_ATTRIBUTE_REFERENCE__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MetamodelImport returns MetamodelImport
	 *
	 * Constraint:
	 *     (package=[EPackage|STRING] name=ValidID useQualifiedNames?='using'?)
	 * </pre>
	 */
	protected void sequence_MetamodelImport(ISerializationContext context, MetamodelImport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommonalityAttributeMapping returns OperatorAttributeMapping
	 *     OperatorAttributeMapping returns OperatorAttributeMapping
	 *
	 * Constraint:
	 *     (
	 *         (readAndWrite?='=' | write?='-&gt;' | read?='&lt;-') 
	 *         operator=[JvmDeclaredType|OperatorName] 
	 *         (operands+=AttributeMappingOperand operands+=AttributeMappingOperand*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_OperatorAttributeMapping(ISerializationContext context, OperatorAttributeMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OperatorImport returns OperatorImport
	 *
	 * Constraint:
	 *     (importedNamespace=QualifiedOperatorName | importedNamespace=QualifiedOperatorWildCard)
	 * </pre>
	 */
	protected void sequence_OperatorImport(ISerializationContext context, OperatorImport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommonalityReferenceMapping returns OperatorReferenceMapping
	 *     OperatorReferenceMapping returns OperatorReferenceMapping
	 *
	 * Constraint:
	 *     (
	 *         (readAndWrite?='=' | write?='-&gt;' | read?='&lt;-') 
	 *         participationClass=[ParticipationClass|QualifiedClass] 
	 *         operator=[JvmDeclaredType|OperatorName] 
	 *         (operands+=ReferenceMappingOperand operands+=ReferenceMappingOperand*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_OperatorReferenceMapping(ISerializationContext context, OperatorReferenceMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParticipationCondition returns BidirectionalParticipationCondition
	 *
	 * Constraint:
	 *     (
	 *         leftOperand=ParticipationConditionLeftOperand 
	 *         operator=[JvmDeclaredType|OperatorName] 
	 *         (
	 *             rightOperands+=ParticipationConditionRightOperand | 
	 *             (rightOperands+=ParticipationConditionRightOperand rightOperands+=ParticipationConditionRightOperand*)
	 *         )?
	 *     )
	 * </pre>
	 */
	protected void sequence_ParticipationCondition(ISerializationContext context, BidirectionalParticipationCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParticipationCondition returns CheckedParticipationCondition
	 *
	 * Constraint:
	 *     (
	 *         leftOperand=ParticipationConditionLeftOperand 
	 *         operator=[JvmDeclaredType|OperatorName] 
	 *         (
	 *             rightOperands+=ParticipationConditionRightOperand | 
	 *             (rightOperands+=ParticipationConditionRightOperand rightOperands+=ParticipationConditionRightOperand*)
	 *         )?
	 *     )
	 * </pre>
	 */
	protected void sequence_ParticipationCondition(ISerializationContext context, CheckedParticipationCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParticipationCondition returns EnforcedParticipationCondition
	 *
	 * Constraint:
	 *     (
	 *         leftOperand=ParticipationConditionLeftOperand 
	 *         operator=[JvmDeclaredType|OperatorName] 
	 *         (
	 *             rightOperands+=ParticipationConditionRightOperand | 
	 *             (rightOperands+=ParticipationConditionRightOperand rightOperands+=ParticipationConditionRightOperand*)
	 *         )?
	 *     )
	 * </pre>
	 */
	protected void sequence_ParticipationCondition(ISerializationContext context, EnforcedParticipationCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParticipationPart returns ParticipationRelation
	 *     ParticipationRelation returns ParticipationRelation
	 *
	 * Constraint:
	 *     (
	 *         (leftParts+=SimpleParticipationClass | (leftParts+=ParticipationPart leftParts+=ParticipationPart*)) 
	 *         operator=[JvmDeclaredType|OperatorName] 
	 *         (rightParts+=SimpleParticipationClass | (rightParts+=ParticipationPart rightParts+=ParticipationPart*))
	 *     )
	 * </pre>
	 */
	protected void sequence_ParticipationRelation(ISerializationContext context, ParticipationRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PackageLike returns Participation
	 *     Participation returns Participation
	 *
	 * Constraint:
	 *     (
	 *         (domainName=DomainName | (domainName=DomainName domainAlias=ValidID?)) 
	 *         (parts+=SimpleParticipationClass | (parts+=ParticipationPart parts+=ParticipationPart*)) 
	 *         (conditions+=ParticipationCondition conditions+=ParticipationCondition*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Participation(ISerializationContext context, Participation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeMappingOperand returns ParticipationAttributeOperand
	 *     QualifiedParticipationAttributeOperand returns ParticipationAttributeOperand
	 *
	 * Constraint:
	 *     participationAttribute=QualifiedParticipationAttribute
	 * </pre>
	 */
	protected void sequence_QualifiedParticipationAttributeOperand(ISerializationContext context, ParticipationAttributeOperand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualifiedParticipationAttributeOperandAccess().getParticipationAttributeQualifiedParticipationAttributeParserRuleCall_0(), semanticObject.getParticipationAttribute());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operand returns ParticipationAttributeOperand
	 *
	 * Constraint:
	 *     (participationAttribute=QualifiedParticipationAttribute | participationAttribute=UnqualifiedParticipationAttribute)
	 * </pre>
	 */
	protected void sequence_QualifiedParticipationAttributeOperand_UnqualifiedParticipationAttributeOperand(ISerializationContext context, ParticipationAttributeOperand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QualifiedParticipationAttribute returns ParticipationAttribute
	 *
	 * Constraint:
	 *     (participationClass=[ParticipationClass|QualifiedClass] attribute=[Attribute|UnqualifiedAttribute])
	 * </pre>
	 */
	protected void sequence_QualifiedParticipationAttribute(ISerializationContext context, ParticipationAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS));
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualifiedParticipationAttributeAccess().getParticipationClassParticipationClassQualifiedClassParserRuleCall_0_0_1(), semanticObject.eGet(LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS, false));
		feeder.accept(grammarAccess.getQualifiedParticipationAttributeAccess().getAttributeAttributeUnqualifiedAttributeParserRuleCall_2_0_1(), semanticObject.eGet(LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns ParticipationAttribute
	 *     ParticipationAttribute returns ParticipationAttribute
	 *
	 * Constraint:
	 *     (
	 *         (participationClass=[ParticipationClass|QualifiedClass] attribute=[Attribute|UnqualifiedAttribute]) | 
	 *         (participationClass=[ParticipationClass|UnqualifiedClass] attribute=[Attribute|UnqualifiedAttribute])
	 *     )
	 * </pre>
	 */
	protected void sequence_QualifiedParticipationAttribute_UnqualifiedParticipationAttribute(ISerializationContext context, ParticipationAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeMappingOperand returns ParticipationClassOperand
	 *     QualifiedParticipationClassOperand returns ParticipationClassOperand
	 *
	 * Constraint:
	 *     participationClass=[ParticipationClass|QualifiedClass]
	 * </pre>
	 */
	protected void sequence_QualifiedParticipationClassOperand(ISerializationContext context, ParticipationClassOperand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_CLASS_OPERAND__PARTICIPATION_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_CLASS_OPERAND__PARTICIPATION_CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualifiedParticipationClassOperandAccess().getParticipationClassParticipationClassQualifiedClassParserRuleCall_0_1(), semanticObject.eGet(LanguagePackage.Literals.PARTICIPATION_CLASS_OPERAND__PARTICIPATION_CLASS, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Operand returns ParticipationClassOperand
	 *
	 * Constraint:
	 *     (participationClass=[ParticipationClass|QualifiedClass] | participationClass=[ParticipationClass|UnqualifiedClass])
	 * </pre>
	 */
	protected void sequence_QualifiedParticipationClassOperand_UnqualifiedParticipationClassOperand(ISerializationContext context, ParticipationClassOperand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReferenceMappingOperand returns ReferencedParticipationAttributeOperand
	 *     ReferencedParticipationAttributeOperand returns ReferencedParticipationAttributeOperand
	 *     Operand returns ReferencedParticipationAttributeOperand
	 *
	 * Constraint:
	 *     participationAttribute=UnqualifiedParticipationAttribute
	 * </pre>
	 */
	protected void sequence_ReferencedParticipationAttributeOperand(ISerializationContext context, ReferencedParticipationAttributeOperand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.REFERENCED_PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.REFERENCED_PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferencedParticipationAttributeOperandAccess().getParticipationAttributeUnqualifiedParticipationAttributeParserRuleCall_1_0(), semanticObject.getParticipationAttribute());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommonalityAttributeMapping returns SimpleAttributeMapping
	 *     SimpleAttributeMapping returns SimpleAttributeMapping
	 *
	 * Constraint:
	 *     ((readAndWrite?='=' | write?='-&gt;' | read?='&lt;-') attribute=QualifiedParticipationAttribute)
	 * </pre>
	 */
	protected void sequence_SimpleAttributeMapping(ISerializationContext context, SimpleAttributeMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SimpleParticipationClass returns ParticipationClass
	 *
	 * Constraint:
	 *     superMetaclass=[Metaclass|UnqualifiedClass]
	 * </pre>
	 */
	protected void sequence_SimpleParticipationClass(ISerializationContext context, ParticipationClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_CLASS__SUPER_METACLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_CLASS__SUPER_METACLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleParticipationClassAccess().getSuperMetaclassMetaclassUnqualifiedClassParserRuleCall_0_1(), semanticObject.eGet(LanguagePackage.Literals.PARTICIPATION_CLASS__SUPER_METACLASS, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommonalityReferenceMapping returns SimpleReferenceMapping
	 *     SimpleReferenceMapping returns SimpleReferenceMapping
	 *
	 * Constraint:
	 *     (
	 *         (readAndWrite?='=' | write?='-&gt;' | read?='&lt;-') 
	 *         reference=QualifiedParticipationAttribute 
	 *         (referenceTargets+=[ParticipationClass|QualifiedClass] referenceTargets+=[ParticipationClass|QualifiedClass]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_SimpleReferenceMapping(ISerializationContext context, SimpleReferenceMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParticipationConditionLeftOperand returns ParticipationAttributeOperand
	 *     ParticipationConditionRightOperand returns ParticipationAttributeOperand
	 *     ParticipationConditionOperand returns ParticipationAttributeOperand
	 *     ReferenceMappingOperand returns ParticipationAttributeOperand
	 *     UnqualifiedParticipationAttributeOperand returns ParticipationAttributeOperand
	 *
	 * Constraint:
	 *     participationAttribute=UnqualifiedParticipationAttribute
	 * </pre>
	 */
	protected void sequence_UnqualifiedParticipationAttributeOperand(ISerializationContext context, ParticipationAttributeOperand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE_OPERAND__PARTICIPATION_ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnqualifiedParticipationAttributeOperandAccess().getParticipationAttributeUnqualifiedParticipationAttributeParserRuleCall_0(), semanticObject.getParticipationAttribute());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UnqualifiedParticipationAttribute returns ParticipationAttribute
	 *
	 * Constraint:
	 *     (participationClass=[ParticipationClass|UnqualifiedClass] attribute=[Attribute|UnqualifiedAttribute])
	 * </pre>
	 */
	protected void sequence_UnqualifiedParticipationAttribute(ISerializationContext context, ParticipationAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS));
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnqualifiedParticipationAttributeAccess().getParticipationClassParticipationClassUnqualifiedClassParserRuleCall_0_0_1(), semanticObject.eGet(LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__PARTICIPATION_CLASS, false));
		feeder.accept(grammarAccess.getUnqualifiedParticipationAttributeAccess().getAttributeAttributeUnqualifiedAttributeParserRuleCall_2_0_1(), semanticObject.eGet(LanguagePackage.Literals.PARTICIPATION_ATTRIBUTE__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParticipationConditionLeftOperand returns ParticipationClassOperand
	 *     ParticipationConditionRightOperand returns ParticipationClassOperand
	 *     ParticipationConditionOperand returns ParticipationClassOperand
	 *     UnqualifiedParticipationClassOperand returns ParticipationClassOperand
	 *
	 * Constraint:
	 *     participationClass=[ParticipationClass|UnqualifiedClass]
	 * </pre>
	 */
	protected void sequence_UnqualifiedParticipationClassOperand(ISerializationContext context, ParticipationClassOperand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagePackage.Literals.PARTICIPATION_CLASS_OPERAND__PARTICIPATION_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagePackage.Literals.PARTICIPATION_CLASS_OPERAND__PARTICIPATION_CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnqualifiedParticipationClassOperandAccess().getParticipationClassParticipationClassUnqualifiedClassParserRuleCall_0_1(), semanticObject.eGet(LanguagePackage.Literals.PARTICIPATION_CLASS_OPERAND__PARTICIPATION_CLASS, false));
		feeder.finish();
	}
	
	
}
