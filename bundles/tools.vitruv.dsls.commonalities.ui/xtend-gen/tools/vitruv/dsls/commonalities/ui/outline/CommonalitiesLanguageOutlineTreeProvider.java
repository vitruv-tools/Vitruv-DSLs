/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.commonalities.ui.outline;

import java.util.function.Consumer;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import tools.vitruv.dsls.commonalities.language.Commonality;
import tools.vitruv.dsls.commonalities.language.CommonalityAttribute;
import tools.vitruv.dsls.commonalities.language.CommonalityFile;
import tools.vitruv.dsls.commonalities.language.CommonalityReference;
import tools.vitruv.dsls.commonalities.language.Concept;
import tools.vitruv.dsls.commonalities.language.LanguagePackage;
import tools.vitruv.dsls.commonalities.language.Participation;

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
@SuppressWarnings("all")
public class CommonalitiesLanguageOutlineTreeProvider extends DefaultOutlineTreeProvider {
  protected void _createChildren(final DocumentRootNode root, final CommonalityFile commonalityFile) {
    this.createNode(root, commonalityFile.getConcept());
    this.createNode(root, commonalityFile.getCommonality());
  }

  protected boolean _isLeaf(final Concept concept) {
    return true;
  }

  protected void _createChildren(final IOutlineNode parent, final Commonality commonality) {
    Image _image = this.labelProvider.getImage(LanguagePackage.Literals.PARTICIPATION);
    int _size = commonality.getParticipations().size();
    String _plus = (Integer.valueOf(_size) + " Participations");
    this.createEStructuralFeatureNode(parent, commonality, LanguagePackage.Literals.COMMONALITY__PARTICIPATIONS, _image, _plus, false);
    final Consumer<CommonalityAttribute> _function = (CommonalityAttribute it) -> {
      this.createNode(parent, it);
    };
    commonality.getAttributes().forEach(_function);
    final Consumer<CommonalityReference> _function_1 = (CommonalityReference it) -> {
      this.createNode(parent, it);
    };
    commonality.getReferences().forEach(_function_1);
  }

  protected boolean _isLeaf(final Participation participation) {
    return true;
  }

  protected boolean _isLeaf(final CommonalityAttribute attribute) {
    return true;
  }

  protected boolean _isLeaf(final CommonalityReference reference) {
    return true;
  }
}
