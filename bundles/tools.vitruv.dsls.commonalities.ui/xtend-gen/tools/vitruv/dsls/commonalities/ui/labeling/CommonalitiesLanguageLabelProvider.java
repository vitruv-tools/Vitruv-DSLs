/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.commonalities.ui.labeling;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider;
import tools.vitruv.dsls.commonalities.language.Commonality;
import tools.vitruv.dsls.commonalities.language.CommonalityAttribute;
import tools.vitruv.dsls.commonalities.language.CommonalityReference;
import tools.vitruv.dsls.commonalities.language.Participation;
import tools.vitruv.dsls.commonalities.language.ParticipationClass;
import tools.vitruv.dsls.commonalities.language.elements.Classifier;
import tools.vitruv.dsls.commonalities.language.elements.Wrapper;
import tools.vitruv.dsls.commonalities.language.extensions.CommonalitiesLanguageModelExtensions;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class CommonalitiesLanguageLabelProvider extends XbaseLabelProvider {
  @Inject
  public CommonalitiesLanguageLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }

  public StyledString text(final Participation participation) {
    final List<ParticipationClass> participationClasses = IterableExtensions.<ParticipationClass>toList(CommonalitiesLanguageModelExtensions.getAllClasses(participation));
    StyledString _styledString = new StyledString();
    String _elvis = null;
    String _domainName = participation.getDomainName();
    if (_domainName != null) {
      _elvis = _domainName;
    } else {
      _elvis = "?";
    }
    final StyledString result = _styledString.append(_elvis);
    int _size = participationClasses.size();
    boolean _equals = (_size == 1);
    if (_equals) {
      StyledString _append = result.append(":");
      String _elvis_1 = null;
      String _name = IterableExtensions.<ParticipationClass>head(participationClasses).getName();
      if (_name != null) {
        _elvis_1 = _name;
      } else {
        _elvis_1 = "?";
      }
      _append.append(_elvis_1);
    } else {
      int _size_1 = participationClasses.size();
      boolean _greaterThan = (_size_1 > 1);
      if (_greaterThan) {
        final Function1<ParticipationClass, String> _function = (ParticipationClass it) -> {
          return it.getName();
        };
        result.append(":(").append(IterableExtensions.join(ListExtensions.<ParticipationClass, String>map(participationClasses, _function), ", ")).append(")");
      }
    }
    return result;
  }

  public StyledString text(final CommonalityAttribute attribute) {
    Classifier _type = attribute.getType();
    String _name = null;
    if (_type!=null) {
      _name=_type.getName();
    }
    final String typeName = _name;
    String _name_1 = attribute.getName();
    final StyledString sstring = new StyledString(_name_1);
    if ((typeName != null)) {
      this.appendInfo(this.appendInfo(sstring, ": "), typeName);
    }
    return sstring;
  }

  public StyledString text(final CommonalityReference reference) {
    Commonality _referenceType = reference.getReferenceType();
    String _name = null;
    if (_referenceType!=null) {
      _name=_referenceType.getName();
    }
    final String typeName = _name;
    String _name_1 = reference.getName();
    final StyledString sstring = new StyledString(_name_1);
    if ((typeName != null)) {
      this.appendInfo(this.appendInfo(sstring, " -> "), typeName);
    }
    return sstring;
  }

  public Image image(final Wrapper<?> wrapper) {
    return this.getImage(wrapper.getWrapped());
  }

  private StyledString appendInfo(final StyledString sstring, final String text) {
    return sstring.append(text, StyledString.QUALIFIER_STYLER);
  }
}
