package tools.vitruv.dsls.commonalities.tests.execution;

import java.nio.file.Path;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Pair;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import tools.vitruv.testutils.TestProject;

/**
 * Inherits the Identified execution tests, but uses the modified commonalities
 * files located in this package.
 * <p>
 * TODO: Expand these tests to make use of more complex conditions and containment hierarchies.
 */
@DisplayName("executing commonalities with conditions")
@SuppressWarnings("all")
public class ConditionsExecutionTest extends IdentifiedExecutionTest {
  @BeforeAll
  @Override
  public void generate(@TestProject final Path testProject) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as AllElementTypes");
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes2\" as AllElementTypes2");
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.pcm_mockup\" as PcmMockup");
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.uml_mockup\" as UmlMockup");
    _builder.newLine();
    _builder.newLine();
    _builder.append("concept test");
    _builder.newLine();
    _builder.newLine();
    _builder.append("commonality IdentifiedWithConditions {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with AllElementTypes:(Root, Resource)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("whereat {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Root in Resource");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with AllElementTypes2:(Root2, Resource)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("whereat {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Root2 in Resource");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with PcmMockup:(Repository, Resource)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("whereat {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Repository in Resource");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("with UmlMockup:(UPackage, Resource)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("whereat {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("UPackage in Resource");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("has id {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= AllElementTypes:Root.id");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= AllElementTypes2:Root2.id2");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= PcmMockup:Repository.name");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= UmlMockup:UPackage.name");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("-> AllElementTypes:Resource.name");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("-> AllElementTypes2:Resource.name");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("-> PcmMockup:Resource.name");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("-> UmlMockup:Resource.name");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("has number {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= AllElementTypes:Root.singleValuedEAttribute");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= AllElementTypes2:Root2.singleValuedEAttribute2");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("has numberList {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= AllElementTypes:Root.multiValuedEAttribute");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= AllElementTypes2:Root2.multiValuedEAttribute2");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("has sub referencing test:SubIdentified {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= AllElementTypes:Root.multiValuedContainmentEReference");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= AllElementTypes2:Root2.multiValuedContainmentEReference2");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= PcmMockup:Repository.components");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("= UmlMockup:UPackage.classes");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    Pair<String, CharSequence> _mappedTo = Pair.<String, CharSequence>of("IdentifiedWithConditions.commonality", _builder.toString());
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as AllElementTypes");
    _builder_1.newLine();
    _builder_1.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes2\" as AllElementTypes2");
    _builder_1.newLine();
    _builder_1.append("import \"http://tools.vitruv.testutils.metamodels.pcm_mockup\" as PcmMockup");
    _builder_1.newLine();
    _builder_1.append("import \"http://tools.vitruv.testutils.metamodels.uml_mockup\" as UmlMockup");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("concept test");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("commonality SubIdentified {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("with AllElementTypes:NonRoot");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("with AllElementTypes2:NonRoot2");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("with PcmMockup:Component");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("with UmlMockup:UClass");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("has name {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("= AllElementTypes:NonRoot.id");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("= AllElementTypes2:NonRoot2.id2");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("= PcmMockup:Component.name");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("= UmlMockup:UClass.name");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}\t");
    _builder_1.newLine();
    Pair<String, CharSequence> _mappedTo_1 = Pair.<String, CharSequence>of("SubIdentified.commonality", _builder_1.toString());
    this.getGenerator().generate(testProject, _mappedTo, _mappedTo_1);
  }
}
