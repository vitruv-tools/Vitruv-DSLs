package tools.vitruv.dsls.reactions.builder;

import allElementTypes.AllElementTypesPackage;
import allElementTypes2.AllElementTypes2Package;
import com.google.common.base.Objects;
import java.util.function.Consumer;
import java.util.function.Function;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XbaseFactory;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.hamcrest.CoreMatchers;
import org.hamcrest.MatcherAssert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

@SuppressWarnings("all")
public class FluentReactionsLanguageBuilderTests extends FluentReactionsBuilderTest {
  @Test
  public void createRoot() {
    FluentReactionsFileBuilder _reactionsFile = this.create.reactionsFile("createRootTest");
    FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("simpleChangesRootTests").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    final Consumer<FluentRoutineBuilder.RoutineStartBuilder> _function = (FluentRoutineBuilder.RoutineStartBuilder it) -> {
      final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it_1) -> {
        it_1.vall("newRoot").create(FluentReactionsBuilderTest.Root);
      };
      final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it_1) -> {
        it_1.addCorrespondenceBetween("newRoot").and().affectedEObject();
      };
      it.create(_function_1).update(_function_2);
    };
    FluentReactionBuilder _call = this.create.reaction("CreateRootTest").afterElement(FluentReactionsBuilderTest.Root).created().call(_function);
    FluentReactionsSegmentBuilder _add = _executeActionsIn.operator_add(_call);
    final FluentReactionsFileBuilder builder = _reactionsFile.operator_add(_add);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRootTests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call createRootTestRepair(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine createRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String reactionResult = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(builder, this.builds(reactionResult));
  }

  @Test
  public void removeRoot() {
    FluentReactionsFileBuilder _reactionsFile = this.create.reactionsFile("deleteRootTest");
    FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("simpleChangesRootTests").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    final Consumer<FluentRoutineBuilder.RoutineStartBuilder> _function = (FluentRoutineBuilder.RoutineStartBuilder it) -> {
      final Consumer<FluentRoutineBuilder.UndecidedMatchStatementBuilder> _function_1 = (FluentRoutineBuilder.UndecidedMatchStatementBuilder it_1) -> {
        it_1.vall("toDelete").retrieve(FluentReactionsBuilderTest.Root).correspondingTo().affectedEObject();
      };
      final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it_1) -> {
        it_1.delete("toDelete");
      };
      it.match(_function_1).update(_function_2);
    };
    FluentReactionBuilder _call = this.create.reaction("DeleteRootTest").afterElement(FluentReactionsBuilderTest.Root).deleted().call(_function);
    FluentReactionsSegmentBuilder _add = _executeActionsIn.operator_add(_call);
    final FluentReactionsFileBuilder builder = _reactionsFile.operator_add(_add);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRootTests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction DeleteRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root deleted");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call deleteRootTestRepair(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine deleteRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("match {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val toDelete = retrieve allElementTypes::Root corresponding to affectedEObject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("removeObject(toDelete)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String reactionResult = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(builder, this.builds(reactionResult));
  }

  @Test
  public void importSegments() {
    final FluentReactionsFileBuilder builder = this.create.reactionsFile("importTest");
    final FluentReactionsSegmentBuilder baseSegment = this.create.reactionsSegment("baseSegment").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    final Consumer<FluentRoutineBuilder.RoutineStartBuilder> _function = (FluentRoutineBuilder.RoutineStartBuilder it) -> {
      final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it_1) -> {
        it_1.vall("newRoot").create(FluentReactionsBuilderTest.Root);
      };
      final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it_1) -> {
        it_1.addCorrespondenceBetween("newRoot").and().affectedEObject();
      };
      it.create(_function_1).update(_function_2);
    };
    FluentReactionBuilder _call = this.create.reaction("CreateRootTest").afterElement(FluentReactionsBuilderTest.Root).created().call(_function);
    baseSegment.operator_add(_call);
    final FluentReactionsSegmentBuilder baseSegment2 = this.create.reactionsSegment("baseSegment2").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    final Consumer<FluentRoutineBuilder.RoutineStartBuilder> _function_1 = (FluentRoutineBuilder.RoutineStartBuilder it) -> {
      final Consumer<FluentRoutineBuilder.UndecidedMatchStatementBuilder> _function_2 = (FluentRoutineBuilder.UndecidedMatchStatementBuilder it_1) -> {
        it_1.vall("toDelete").retrieve(FluentReactionsBuilderTest.Root).correspondingTo().affectedEObject();
      };
      final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_3 = (FluentRoutineBuilder.UpdateStatementBuilder it_1) -> {
        it_1.delete("toDelete");
      };
      it.match(_function_2).update(_function_3);
    };
    FluentReactionBuilder _call_1 = this.create.reaction("DeleteRootTest").afterElement(FluentReactionsBuilderTest.Root).deleted().call(_function_1);
    baseSegment2.operator_add(_call_1);
    final FluentReactionsSegmentBuilder extendedSegment = this.create.reactionsSegment("extendedSegment").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE).importSegment(baseSegment).usingSimpleRoutineNames().importSegment(baseSegment2).routinesOnly().usingQualifiedRoutineNames();
    builder.operator_add(baseSegment);
    builder.operator_add(baseSegment2);
    builder.operator_add(extendedSegment);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: baseSegment");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call createRootTestRepair(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine createRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: baseSegment2");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction DeleteRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root deleted");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call deleteRootTestRepair(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine deleteRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("match {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val toDelete = retrieve allElementTypes::Root corresponding to affectedEObject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("removeObject(toDelete)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: extendedSegment");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import baseSegment");
    _builder.newLine();
    _builder.append("import routines baseSegment2 using qualified names");
    _builder.newLine();
    final String reactionResult = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(builder, this.builds(reactionResult));
  }

  @Test
  public void overrideReaction() {
    final FluentReactionsFileBuilder builder = this.create.reactionsFile("overrideReactionTest");
    final FluentReactionsSegmentBuilder baseSegment = this.create.reactionsSegment("baseSegment").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    final Consumer<FluentRoutineBuilder.RoutineStartBuilder> _function = (FluentRoutineBuilder.RoutineStartBuilder it) -> {
      final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it_1) -> {
        it_1.vall("newRoot").create(FluentReactionsBuilderTest.Root);
      };
      final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it_1) -> {
        it_1.addCorrespondenceBetween("newRoot").and().affectedEObject();
      };
      it.create(_function_1).update(_function_2);
    };
    FluentReactionBuilder _call = this.create.reaction("CreateRootTest").afterElement(FluentReactionsBuilderTest.Root).created().call(_function);
    baseSegment.operator_add(_call);
    final FluentReactionsSegmentBuilder extendedSegment = this.create.reactionsSegment("extendedSegment").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE).importSegment(baseSegment).usingQualifiedRoutineNames();
    final Consumer<FluentRoutineBuilder.RoutineStartBuilder> _function_1 = (FluentRoutineBuilder.RoutineStartBuilder it) -> {
      final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_2 = (FluentRoutineBuilder.CreateStatementBuilder it_1) -> {
        it_1.vall("newRootInOverride").create(FluentReactionsBuilderTest.Root);
      };
      final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_3 = (FluentRoutineBuilder.UpdateStatementBuilder it_1) -> {
        it_1.addCorrespondenceBetween("newRootInOverride").and().affectedEObject();
      };
      it.create(_function_2).update(_function_3);
    };
    FluentReactionBuilder _call_1 = this.create.reaction("CreateRootTest").overrideSegment(baseSegment).afterElement(FluentReactionsBuilderTest.Root).created().call(_function_1);
    extendedSegment.operator_add(_call_1);
    builder.operator_add(baseSegment);
    builder.operator_add(extendedSegment);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: baseSegment");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call createRootTestRepair(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine createRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: extendedSegment");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import baseSegment using qualified names");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction baseSegment::CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call createRootTestRepair(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine createRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRootInOverride = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRootInOverride, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String reactionResult = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(builder, this.builds(reactionResult));
  }

  @Test
  public void overrideRoutines() {
    final FluentReactionsFileBuilder builder = this.create.reactionsFile("overrideRoutinesTest");
    final FluentReactionsSegmentBuilder baseSegment = this.create.reactionsSegment("baseSegment").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    final Consumer<FluentRoutineBuilder.RoutineStartBuilder> _function = (FluentRoutineBuilder.RoutineStartBuilder it) -> {
      final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it_1) -> {
        it_1.vall("newRoot").create(FluentReactionsBuilderTest.Root);
      };
      final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it_1) -> {
        it_1.addCorrespondenceBetween("newRoot").and().affectedEObject();
      };
      it.create(_function_1).update(_function_2);
    };
    FluentReactionBuilder _call = this.create.reaction("CreateRootTest").afterElement(FluentReactionsBuilderTest.Root).created().call(_function);
    baseSegment.operator_add(_call);
    final FluentReactionsSegmentBuilder extendedSegment = this.create.reactionsSegment("extendedSegment").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE).importSegment(baseSegment).usingQualifiedRoutineNames();
    final Consumer<FluentRoutineBuilder.InputBuilder> _function_1 = (FluentRoutineBuilder.InputBuilder it) -> {
      it.model(FluentReactionsBuilderTest.Root, "affectedEObject");
    };
    final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_2 = (FluentRoutineBuilder.CreateStatementBuilder it) -> {
      it.vall("newRoot2").create(FluentReactionsBuilderTest.Root);
    };
    final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_3 = (FluentRoutineBuilder.UpdateStatementBuilder it) -> {
      it.addCorrespondenceBetween("newRoot2").and().affectedEObject();
    };
    FluentRoutineBuilder _update = this.create.routine("createRootTestRepair").overrideAlongImportPath(baseSegment).input(_function_1).create(_function_2).update(_function_3);
    extendedSegment.operator_add(_update);
    final FluentReactionsSegmentBuilder extendedSegment2 = this.create.reactionsSegment("extendedSegment2").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE).importSegment(extendedSegment).usingQualifiedRoutineNames();
    final Consumer<FluentRoutineBuilder.InputBuilder> _function_4 = (FluentRoutineBuilder.InputBuilder it) -> {
      it.model(FluentReactionsBuilderTest.Root, "affectedEObject");
    };
    final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_5 = (FluentRoutineBuilder.CreateStatementBuilder it) -> {
      it.vall("newRoot3").create(FluentReactionsBuilderTest.Root);
    };
    final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_6 = (FluentRoutineBuilder.UpdateStatementBuilder it) -> {
      it.addCorrespondenceBetween("newRoot3").and().affectedEObject();
    };
    FluentRoutineBuilder _update_1 = this.create.routine("createRootTestRepair").overrideAlongImportPath(extendedSegment, baseSegment).input(_function_4).create(_function_5).update(_function_6);
    extendedSegment2.operator_add(_update_1);
    builder.operator_add(baseSegment);
    builder.operator_add(extendedSegment);
    builder.operator_add(extendedSegment2);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: baseSegment");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call createRootTestRepair(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine createRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: extendedSegment");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import baseSegment using qualified names");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine baseSegment::createRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot2 = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot2, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: extendedSegment2");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import extendedSegment using qualified names");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine extendedSegment.baseSegment::createRootTestRepair(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot3 = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot3, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String reactionResult = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(builder, this.builds(reactionResult));
  }

  @Test
  public void noEmptyReactionsFile() {
    final Executable _function = () -> {
      final FluentReactionsFileBuilder builder = this.create.reactionsFile("empty");
      this.matcher.build(builder);
    };
    final IllegalStateException exception = Assertions.<IllegalStateException>assertThrows(IllegalStateException.class, _function);
    MatcherAssert.<String>assertThat(exception.getMessage(), CoreMatchers.containsString("No reactions segments"));
  }

  @Test
  public void noEmptyReactionsSegment() {
    final Executable _function = () -> {
      FluentReactionsFileBuilder _reactionsFile = this.create.reactionsFile("Test");
      FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("empty").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
      final FluentReactionsFileBuilder builder = _reactionsFile.operator_add(_executeActionsIn);
      this.matcher.build(builder);
    };
    final IllegalStateException exception = Assertions.<IllegalStateException>assertThrows(IllegalStateException.class, _function);
    MatcherAssert.<String>assertThat(exception.getMessage(), CoreMatchers.containsString("Neither routines, nor reactions, nor imports"));
  }

  @Test
  public void routineArgument() {
    FluentReactionsFileBuilder _reactionsFile = this.create.reactionsFile("createRootTest");
    FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("simpleChangesRootTests").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    final Consumer<FluentRoutineBuilder.InputBuilder> _function = (FluentRoutineBuilder.InputBuilder it) -> {
      it.model(FluentReactionsBuilderTest.Root, "rootParameter");
      it.model(FluentReactionsBuilderTest.NonRoot, "nonRootParameter");
    };
    final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_1 = (FluentRoutineBuilder.UpdateStatementBuilder it) -> {
      it.addCorrespondenceBetween("rootParameter").and("nonRootParameter");
    };
    FluentRoutineBuilder _update = this.create.routine("withArguments").input(_function).update(_function_1);
    FluentReactionsSegmentBuilder _add = _executeActionsIn.operator_add(_update);
    final FluentReactionsFileBuilder builder = _reactionsFile.operator_add(_add);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRootTests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine withArguments(allElementTypes::Root rootParameter, allElementTypes::NonRoot nonRootParameter) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(rootParameter, nonRootParameter)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String expectedReaction = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(builder, this.builds(expectedReaction));
  }

  @Test
  public void routineForTwoReactionsImplicitlyAdded() {
    final Consumer<FluentRoutineBuilder.InputBuilder> _function = (FluentRoutineBuilder.InputBuilder it) -> {
      it.model(FluentReactionsBuilderTest.EObject, "affectedEObject");
    };
    final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it) -> {
      it.vall("newRoot").create(FluentReactionsBuilderTest.Root);
    };
    final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it) -> {
      it.addCorrespondenceBetween("newRoot").and().affectedEObject();
    };
    final FluentRoutineBuilder commonRoutine = this.create.routine("commonRootCreate").input(_function).create(_function_1).update(_function_2);
    final FluentReactionsFileBuilder reactionsFile = this.create.reactionsFile("createRootTest");
    FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("simpleChangesRootTests").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    FluentReactionBuilder _call = this.create.reaction("CreateRootTest").afterElement(FluentReactionsBuilderTest.Root).created().call(commonRoutine);
    FluentReactionBuilder _call_1 = this.create.reaction("CreateNonRootTest").afterElement(FluentReactionsBuilderTest.NonRoot).created().call(commonRoutine);
    final FluentReactionsSegmentBuilder reactionsSegment = _executeActionsIn.operator_add(new FluentReactionBuilder[] { _call, _call_1 });
    reactionsFile.operator_add(reactionsSegment);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRootTests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call commonRootCreate(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateNonRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::NonRoot created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call commonRootCreate(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine commonRootCreate(ecore::EObject affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String expectedReaction = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(reactionsFile, this.builds(expectedReaction));
  }

  @Test
  public void routineForTwoReactionsExplicitlyAdded() {
    final Consumer<FluentRoutineBuilder.InputBuilder> _function = (FluentRoutineBuilder.InputBuilder it) -> {
      it.model(FluentReactionsBuilderTest.EObject, "affectedEObject");
    };
    final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it) -> {
      it.vall("newRoot").create(FluentReactionsBuilderTest.Root);
    };
    final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it) -> {
      it.addCorrespondenceBetween("newRoot").and().affectedEObject();
    };
    final FluentRoutineBuilder commonRoutine = this.create.routine("commonRootCreate").input(_function).create(_function_1).update(_function_2);
    final FluentReactionsFileBuilder reactionsFile = this.create.reactionsFile("createRootTest");
    final FluentReactionsSegmentBuilder reactionsSegment = this.create.reactionsSegment("simpleChangesRootTests").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    reactionsSegment.operator_add(commonRoutine);
    FluentReactionBuilder _call = this.create.reaction("CreateRootTest").afterElement(FluentReactionsBuilderTest.Root).created().call(commonRoutine);
    reactionsSegment.operator_add(_call);
    FluentReactionBuilder _call_1 = this.create.reaction("CreateNonRootTest").afterElement(FluentReactionsBuilderTest.NonRoot).created().call(commonRoutine);
    reactionsSegment.operator_add(_call_1);
    reactionsFile.operator_add(reactionsSegment);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRootTests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call commonRootCreate(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateNonRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::NonRoot created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call commonRootCreate(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine commonRootCreate(ecore::EObject affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String expectedReaction = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(reactionsFile, this.builds(expectedReaction));
  }

  @Test
  public void routineWithMatch() {
    final String objectExtensionsFqn = "org.eclipse.xtext.xbase.lib.ObjectExtensions";
    final Consumer<FluentRoutineBuilder.UndecidedMatchStatementBuilder> _function = (FluentRoutineBuilder.UndecidedMatchStatementBuilder it) -> {
      final Function<TypeProvider, XExpression> _function_1 = (TypeProvider typeProvider) -> {
        XBinaryOperation _createXBinaryOperation = XbaseFactory.eINSTANCE.createXBinaryOperation();
        final Procedure1<XBinaryOperation> _function_2 = (XBinaryOperation it_1) -> {
          XStringLiteral _createXStringLiteral = XbaseFactory.eINSTANCE.createXStringLiteral();
          final Procedure1<XStringLiteral> _function_3 = (XStringLiteral it_2) -> {
            it_2.setValue("test");
          };
          XStringLiteral _doubleArrow = ObjectExtensions.<XStringLiteral>operator_doubleArrow(_createXStringLiteral, _function_3);
          it_1.setLeftOperand(_doubleArrow);
          XStringLiteral _createXStringLiteral_1 = XbaseFactory.eINSTANCE.createXStringLiteral();
          final Procedure1<XStringLiteral> _function_4 = (XStringLiteral it_2) -> {
            it_2.setValue("test");
          };
          XStringLiteral _doubleArrow_1 = ObjectExtensions.<XStringLiteral>operator_doubleArrow(_createXStringLiteral_1, _function_4);
          it_1.setRightOperand(_doubleArrow_1);
          JvmType _findTypeByName = typeProvider.findTypeByName(objectExtensionsFqn);
          final Function1<JvmMember, Boolean> _function_5 = (JvmMember it_2) -> {
            String _simpleName = it_2.getSimpleName();
            return Boolean.valueOf(Objects.equal(_simpleName, "operator_tripleEquals"));
          };
          it_1.setFeature(IterableExtensions.<JvmMember>findFirst(((JvmDeclaredType) _findTypeByName).getMembers(), _function_5));
        };
        return ObjectExtensions.<XBinaryOperation>operator_doubleArrow(_createXBinaryOperation, _function_2);
      };
      it.check(_function_1);
    };
    final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it) -> {
      it.vall("newRoot").create(FluentReactionsBuilderTest.Root);
    };
    final FluentRoutineBuilder routineWithMatch = this.create.routine("withMatch").match(_function).create(_function_1).withoutUpdate();
    FluentReactionsFileBuilder _reactionsFile = this.create.reactionsFile("routineWithMatchTest");
    FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("routineWithMatchTest").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    FluentReactionsSegmentBuilder _add = _executeActionsIn.operator_add(routineWithMatch);
    final FluentReactionsFileBuilder reactionsFile = _reactionsFile.operator_add(_add);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    _builder.append(objectExtensionsFqn);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: routineWithMatchTest");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine withMatch() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("match {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("check {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"test\" === \"test\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String expectedReaction = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(reactionsFile, this.builds(expectedReaction));
  }

  @Test
  public void routineWithAffectedEObjectInMatch() {
    final String objectExtensionsFqn = "org.eclipse.xtext.xbase.lib.ObjectExtensions";
    final Consumer<FluentRoutineBuilder.UndecidedMatchStatementBuilder> _function = (FluentRoutineBuilder.UndecidedMatchStatementBuilder it) -> {
      final Function<TypeProvider, XExpression> _function_1 = (TypeProvider typeProvider) -> {
        XBinaryOperation _createXBinaryOperation = XbaseFactory.eINSTANCE.createXBinaryOperation();
        final Procedure1<XBinaryOperation> _function_2 = (XBinaryOperation it_1) -> {
          XStringLiteral _createXStringLiteral = XbaseFactory.eINSTANCE.createXStringLiteral();
          final Procedure1<XStringLiteral> _function_3 = (XStringLiteral it_2) -> {
            it_2.setValue("test");
          };
          XStringLiteral _doubleArrow = ObjectExtensions.<XStringLiteral>operator_doubleArrow(_createXStringLiteral, _function_3);
          it_1.setLeftOperand(_doubleArrow);
          it_1.setRightOperand(typeProvider.affectedEObject());
          JvmType _findTypeByName = typeProvider.findTypeByName(objectExtensionsFqn);
          final Function1<JvmMember, Boolean> _function_4 = (JvmMember it_2) -> {
            String _simpleName = it_2.getSimpleName();
            return Boolean.valueOf(Objects.equal(_simpleName, "operator_tripleEquals"));
          };
          it_1.setFeature(IterableExtensions.<JvmMember>findFirst(((JvmDeclaredType) _findTypeByName).getMembers(), _function_4));
        };
        return ObjectExtensions.<XBinaryOperation>operator_doubleArrow(_createXBinaryOperation, _function_2);
      };
      it.check(_function_1);
    };
    final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it) -> {
      it.vall("newRoot").create(FluentReactionsBuilderTest.Root);
    };
    final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it) -> {
      it.addCorrespondenceBetween("newRoot").and().affectedEObject();
    };
    final FluentRoutineBuilder routineWithMatch = this.create.routine("withMatch").match(_function).create(_function_1).update(_function_2);
    final FluentReactionBuilder reaction = this.create.reaction("CreateRoot").afterElement(FluentReactionsBuilderTest.Root).created().call(routineWithMatch);
    FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("routineWithMatchTest").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    final FluentReactionsSegmentBuilder segment = _executeActionsIn.operator_add(reaction);
    segment.operator_add(routineWithMatch);
    FluentReactionsFileBuilder _reactionsFile = this.create.reactionsFile("routineWithMatchTest");
    final FluentReactionsFileBuilder reactionsFile = _reactionsFile.operator_add(segment);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    _builder.append(objectExtensionsFqn);
    _builder.newLineIfNotEmpty();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: routineWithMatchTest");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRoot {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call withMatch(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine withMatch(allElementTypes::Root affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("match {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("check {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"test\" === affectedEObject");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String expectedReaction = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(reactionsFile, this.builds(expectedReaction));
  }

  @Test
  @Disabled("not supported from text right now")
  public void routineFromDifferentSegmentWithImplicitSegment() {
    final Consumer<FluentRoutineBuilder.InputBuilder> _function = (FluentRoutineBuilder.InputBuilder it) -> {
      it.model(FluentReactionsBuilderTest.EObject, "affectedEObject");
    };
    final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it) -> {
      it.vall("newRoot").create(FluentReactionsBuilderTest.Root);
    };
    final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it) -> {
      it.addCorrespondenceBetween("newRoot").and().affectedEObject();
    };
    final FluentRoutineBuilder commonRoutine = this.create.routine("commonRootCreate").input(_function).create(_function_1).update(_function_2);
    final FluentReactionsFileBuilder reactionsFile = this.create.reactionsFile("createRootTest");
    FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("simpleChangesRootTests").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    FluentReactionBuilder _call = this.create.reaction("CreateRootTest").afterElement(FluentReactionsBuilderTest.Root).created().call(commonRoutine);
    FluentReactionsSegmentBuilder _add = _executeActionsIn.operator_add(_call);
    reactionsFile.operator_add(_add);
    FluentReactionsSegmentBuilder _executeActionsIn_1 = this.create.reactionsSegment("simpleChangesRoot2Tests").inReactionToChangesIn(AllElementTypes2Package.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    FluentReactionBuilder _call_1 = this.create.reaction("CreateRoot2Test").afterElement(FluentReactionsBuilderTest.Root2).created().call(commonRoutine);
    FluentReactionsSegmentBuilder _add_1 = _executeActionsIn_1.operator_add(_call_1);
    reactionsFile.operator_add(_add_1);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes2\" as allElementTypes2");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRootTests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call commonRootCreate(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("routine commonRootCreate(ecore::EObject affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRoot2Tests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes2");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRoot2Test {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes2::Root2 created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call commonRootCreate(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String expectedReaction = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(reactionsFile, this.builds(expectedReaction));
  }

  @Test
  @Disabled("not supported from text right now")
  public void routineFromDifferentSegmentWithExplicitSegment() {
    final Consumer<FluentRoutineBuilder.InputBuilder> _function = (FluentRoutineBuilder.InputBuilder it) -> {
      it.model(FluentReactionsBuilderTest.EObject, "affectedEObject");
    };
    final Consumer<FluentRoutineBuilder.CreateStatementBuilder> _function_1 = (FluentRoutineBuilder.CreateStatementBuilder it) -> {
      it.vall("newRoot").create(FluentReactionsBuilderTest.Root);
    };
    final Consumer<FluentRoutineBuilder.UpdateStatementBuilder> _function_2 = (FluentRoutineBuilder.UpdateStatementBuilder it) -> {
      it.addCorrespondenceBetween("newRoot").and().affectedEObject();
    };
    final FluentRoutineBuilder commonRoutine = this.create.routine("commonRootCreate").input(_function).create(_function_1).update(_function_2);
    final FluentReactionsFileBuilder reactionsFile = this.create.reactionsFile("createRootTest");
    FluentReactionsSegmentBuilder _executeActionsIn = this.create.reactionsSegment("simpleChangesRootTests").inReactionToChangesIn(AllElementTypesPackage.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    FluentReactionBuilder _call = this.create.reaction("CreateRootTest").afterElement(FluentReactionsBuilderTest.Root).created().call(commonRoutine);
    FluentReactionsSegmentBuilder _add = _executeActionsIn.operator_add(_call);
    reactionsFile.operator_add(_add);
    FluentReactionsSegmentBuilder _executeActionsIn_1 = this.create.reactionsSegment("simpleChangesRoot2Tests").inReactionToChangesIn(AllElementTypes2Package.eINSTANCE).executeActionsIn(AllElementTypesPackage.eINSTANCE);
    FluentReactionBuilder _call_1 = this.create.reaction("CreateRoot2Test").afterElement(FluentReactionsBuilderTest.Root2).created().call(commonRoutine);
    final FluentReactionsSegmentBuilder secondSegment = _executeActionsIn_1.operator_add(_call_1);
    secondSegment.operator_add(commonRoutine);
    reactionsFile.operator_add(secondSegment);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import tools.vitruv.dsls.reactions.runtime.^routines.AbstractRoutine.Update");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes\" as allElementTypes");
    _builder.newLine();
    _builder.append("import \"http://tools.vitruv.testutils.metamodels.allElementTypes2\" as allElementTypes2");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRootTests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRootTest {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes::Root created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call commonRootCreate(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("reactions: simpleChangesRoot2Tests");
    _builder.newLine();
    _builder.append("in reaction to changes in allElementTypes2");
    _builder.newLine();
    _builder.append("execute actions in allElementTypes");
    _builder.newLine();
    _builder.newLine();
    _builder.append("reaction CreateRoot2Test {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("after element allElementTypes2::Root2 created");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("call commonRootCreate(affectedEObject)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("routine commonRootCreate(ecore::EObject affectedEObject) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("create {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("val newRoot = new allElementTypes::Root");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("update {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addCorrespondenceBetween(newRoot, affectedEObject)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String expectedReaction = _builder.toString();
    MatcherAssert.<FluentReactionsFileBuilder>assertThat(reactionsFile, this.builds(expectedReaction));
  }
}
